import Unit from '../../../unit/types/Unit';
import { calculateTotalUnitsWeight } from '../weight/calculateUnitsWeight';
import { getDangerousUnits, containsDangerousUnits } from '../../../utils/unit/AI/AI_actions';
import { getSurroundedUnits } from '../../../utils/surrounded/getSurroundedUnits';
import { computerUnits, playerUnits } from '../../../store/unit/units';
import { revealedUnits } from '../../../store/AI/enemies/revealedEnemies';
import { deleteUnitFromArray } from '../../../utils';

export const assessVulnerability = (unit: Unit, exlusion: Unit = null): number => {
    let vulnerability = 0;
    let allies: Unit[];
    let enemies: Unit[];
    if(unit.controlBy === 'computer') {
        allies = Object.assign([], computerUnits);
        enemies = Object.assign([], revealedUnits);
    }
    else if(unit.controlBy === 'player') {
        allies = Object.assign([], playerUnits);
        enemies = Object.assign([], computerUnits);
    }
    if(exlusion) {
        allies = deleteUnitFromArray(unit, allies);
    }
    const nearestAllies: Unit[] = getSurroundedUnits(unit, allies, 5);
    const nearestEnemies: Unit[] = getSurroundedUnits(unit, enemies, 5);
    const nearestAlliesWeight: number = calculateTotalUnitsWeight(nearestAllies) + unit.weight;
    const nearestEnemiesWeight: number = calculateTotalUnitsWeight(nearestEnemies);
    const numberOfDangerousUnits: number = getDangerousUnits(unit).length;
    const containsDangerousUnitsNearby: boolean = containsDangerousUnits(unit, nearestEnemies);

    // no enemies nearby
    if(nearestAllies.length === 0 && nearestEnemies.length === 0) {
        if(unit.speed >= 70 && unit.speed < 80) {
            vulnerability += 10;
        }
        else if(unit.speed >= 50 && unit.speed < 70) {
            vulnerability += 30;
        }
        else if(unit.speed < 50) {
            vulnerability += 50;
        }
    }
    
    // one unit and one enemy
    if(nearestAllies.length === 0 && nearestEnemies.length == 1) {
        if(containsDangerousUnitsNearby) {
            vulnerability += 70;
        } 
        const nearestEnemySpeed = nearestEnemies[0].speed;
        if(unit.speed / nearestEnemySpeed > 1 && unit.speed / nearestEnemySpeed < 1.5) {
            if(nearestAlliesWeight > nearestEnemiesWeight) {
                vulnerability += 20;
            } else {
                vulnerability += 35;
            }
        } 
        else if(unit.speed / nearestEnemySpeed >= 1.5) {
            if(nearestAlliesWeight > nearestEnemiesWeight) {
                vulnerability += 5;
            } else {
                vulnerability += 15;
            }
        }
        else if(nearestEnemiesWeight / nearestAlliesWeight > 1.2) {
            vulnerability += 40;
        }
        else if(nearestEnemiesWeight / nearestAlliesWeight > 1.5) {
            vulnerability += 90;
        }
    }

    // lots of enemies and no allies nearby
    if(nearestAllies.length === 0 && nearestEnemies.length > 1) {
        if(containsDangerousUnitsNearby) {
            vulnerability += 70;
        } 
        if(nearestEnemiesWeight / nearestAlliesWeight >= 1.5) {
            vulnerability += 80;
        } else {
            vulnerability += 30;
        } 
    }

    // lots of allies and lots of enemies nearby
    if(nearestAllies.length >= 1 && nearestEnemies.length > 1) {
        vulnerability += 10;
        if(containsDangerousUnitsNearby) {
            vulnerability += 30;
        }
        if(nearestEnemiesWeight / nearestAlliesWeight >= 1.5) {
            vulnerability += 50;
        } 
        else if(nearestEnemiesWeight / nearestAlliesWeight >= 1.2) {
            vulnerability += 30;
        } 
    }

    if(numberOfDangerousUnits > 0 && unit.speed < 25 && unit.type != "skirmishers") {
        vulnerability += 30;
    }

    if(vulnerability < 0) vulnerability = 0;
    else if(vulnerability > 100) vulnerability = 100;

    return vulnerability;
}