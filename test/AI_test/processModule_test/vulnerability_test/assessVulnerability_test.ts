import {assert} from 'chai';
import {assessVulnerability} from '../../../../src/AI/processModule/vulnerability';
import {createUnit} from '../../../../src/unit/create';
import {removeAllUnits, computerUnits} from '../../../../src/store/unit/units';
import {removeUnit} from '../../../../src/unit/remove';
import Unit from '../../../../src/unit/types/Unit';
import { addToRevealedUnits } from '../../../../src/store/AI/enemies/revealedEnemies';

describe('AI processModule vulnerability test', () => {
    
    describe('assessVulnerability test', () => {
        let computerUnit1:Unit, computerUnit2:Unit, computerUnit3:Unit;
        let computerUnit4:Unit, computerUnit5:Unit, computerUnit6:Unit;
        let computerUnit7: Unit;
        let playerUnit1:Unit, playerUnit2:Unit, playerUnit3:Unit;
        let playerUnit4:Unit, playerUnit5:Unit, playerUnit6:Unit;
        let playerUnit7: Unit, playerUnit8: Unit;

        before(() => {
            removeAllUnits();
            computerUnit1 = createUnit('Archers', 40, 40, 'computer');
            computerUnit2 = createUnit('Archers', 0, 320, 'computer');
            computerUnit3 = createUnit('HeavyInfantry', 40, 320, 'computer');
            computerUnit4 = createUnit('Pikemen', 40, 360, 'computer');
            computerUnit5 = createUnit('Hoplites', 320, 520, 'computer');
            computerUnit6 = createUnit('Scouts', 1120, 320, 'computer');
            computerUnit7 = createUnit('HeavyCavalry', 1040, 40, 'computer');

            playerUnit1 = createUnit('LightCavalry', 80, 0, 'player');
            playerUnit2 = createUnit('Scouts', 120, 280, 'player');
            playerUnit3 = createUnit('HeavyInfantry', 160, 320, 'player');
            playerUnit4 = createUnit('LightInfantry', 400, 440, 'player');
            playerUnit5 = createUnit('LightInfantry', 440, 560, 'player');
            playerUnit6 = createUnit('Pikemen', 1180, 320, 'player');
            playerUnit7 = createUnit('HeavyInfantry', 1120, 80, 'player');
            playerUnit8 = createUnit('Pikemen', 600, 200, 'player');

            addToRevealedUnits(playerUnit1);
            addToRevealedUnits(playerUnit2);
            addToRevealedUnits(playerUnit3);
            addToRevealedUnits(playerUnit4);
            addToRevealedUnits(playerUnit5);
            addToRevealedUnits(playerUnit6);
            addToRevealedUnits(playerUnit7);
            addToRevealedUnits(playerUnit8);
        });

        after(() => {
            removeUnit(computerUnit1);
            removeUnit(computerUnit2);
            removeUnit(computerUnit3);
            removeUnit(computerUnit4);
            removeUnit(computerUnit5);
            removeUnit(computerUnit6);
            removeUnit(computerUnit7);

            removeUnit(playerUnit1);
            removeUnit(playerUnit2);
            removeUnit(playerUnit3);
            removeUnit(playerUnit4);
            removeUnit(playerUnit5);
            removeUnit(playerUnit6);
            removeUnit(playerUnit7);
            removeUnit(playerUnit8);
        });

        it("computerUnit1 vulnerability should have 100 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit1);
            assert.equal(vulnerability, 100);
            done();
        });
        it("computerUnit2 vulnerability should have 10 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit2);
            assert.equal(vulnerability, 10);
            done();
        });
        it("computerUnit3 vulnerability should have 10 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit3);
            assert.equal(vulnerability, 10);
            done();
        });
        it("computerUnit4 vulnerability should have 10 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit4);
            assert.equal(vulnerability, 10);
            done();
        });
        it("computerUnit5 vulnerability should have 80 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit5);
            assert.equal(vulnerability, 80);
            done();
        });
        it("computerUnit6 vulnerability should have 15 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit6);
            assert.equal(vulnerability, 15);
            done();
        });
        it("computerUnit7 vulnerability should have 5 vulnerability", (done) => {
            const vulnerability = assessVulnerability(computerUnit7);
            assert.equal(vulnerability, 5);
            done();
        });
    });
});