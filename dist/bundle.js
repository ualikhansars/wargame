!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=128)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(42);t.MAP_HEIGHT=r.MAP_HEIGHT,t.MAP_WIDTH=r.MAP_WIDTH,t.CANVAS_HEIGHT=r.CANVAS_HEIGHT,t.gridSize=r.gridSize;var i=n(133);t.mainMenuMode=i.mainMenuMode,t.setBattleMode=i.setBattleMode,t.setMainMenuMode=i.setMainMenuMode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(139);t.loadImage=r.loadImage;var i=n(5);t.getNodeFromMap=i.getNodeFromMap,t.getDistanceBetweenUnitAndNodeInGrids=i.getDistanceBetweenUnitAndNodeInGrids,t.getDistanceBetweenTwoNodesInGrids=i.getDistanceBetweenTwoNodesInGrids,t.addNodeIntoArray=i.addNodeIntoArray,t.getNodeFromArray=i.getNodeFromArray,t.getMinValueFromNodes=i.getMinValueFromNodes,t.getMaxValueFromNodes=i.getMaxValueFromNodes;var o=n(68);t.deleteObjectFromArray=o.deleteObjectFromArray,t.isObjectInArray=o.isObjectInArray,t.isObjectEmpty=o.isObjectEmpty;var a=n(171);t.addUnitIntoArray=a.addUnitIntoArray,t.anotherUnitIsOnTheWay=a.anotherUnitIsOnTheWay,t.deleteUnitFromArray=a.deleteUnitFromArray,t.deleteUnitFromArmy=a.deleteUnitFromArmy,t.getDistanceBetweenTwoUnitsInGrids=a.getDistanceBetweenTwoUnitsInGrids,t.getUnitsMinProperty=a.getUnitsMinProperty,t.getUnitsMaxProperty=a.getUnitsMaxProperty,t.isUnitInArray=a.isUnitInArray;var s=n(29);t.getSurroundedNodes=s.getSurroundedNodes,t.getSurroundedEnemies=s.getSurroundedEnemies;var l=n(177);t.drawBackground=l.drawBackground,t.drawObstacle=l.drawObstacle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(27);t.ctx=r.ctx,t.auxiliaryCtx=r.auxiliaryCtx,t.backgroundCtx=r.backgroundCtx,t.dragAndDropCanvasCtx=r.dragAndDropCanvasCtx,t.mainMenuCtx=r.mainMenuCtx,t.terrainCtx=r.terrainCtx},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(8);t.units=[],t.playerUnits=[],t.computerUnits=[],t.addToUnits=function(e){if(e){if(r.isUnitInArray(e,t.units))throw new Error("unit is already added");if("computer"===e.controlBy)t.addToComputerUnits(e),t.units.push(e);else{if("player"!==e.controlBy)throw new Error("Undefined unit control");t.addToPlayerUnits(e),t.units.push(e)}}},t.addToComputerUnits=function(e){e&&(r.isUnitInArray(e,t.computerUnits)||"computer"===e.controlBy&&t.computerUnits.push(e))},t.addToPlayerUnits=function(e){e&&(r.isUnitInArray(e,t.playerUnits)||"player"===e.controlBy&&t.playerUnits.push(e))},t.removeFromUnits=function(e){e&&(t.units=i.deleteUnitFromArray(e,t.units),"computer"===e.controlBy?t.removeFromComputerUnits(e):"player"===e.controlBy&&t.removeFromPlayerUnits(e))},t.removeFromPlayerUnits=function(e){e&&"player"===e.controlBy&&(t.playerUnits=i.deleteUnitFromArray(e,t.playerUnits))},t.removeFromComputerUnits=function(e){e&&"computer"===e.controlBy&&(t.computerUnits=i.deleteUnitFromArray(e,t.computerUnits))},t.removeAllComputerUnits=function(){t.computerUnits=[]},t.removeAllPlayerUnits=function(){t.playerUnits=[]},t.removeAllUnits=function(){t.removeAllComputerUnits(),t.removeAllPlayerUnits(),t.units=[]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(255);t.decreaseSpentGold=r.decreaseSpentGold,t.increaseSpentGold=r.increaseSpentGold,t.setTotalGold=r.setTotalGold;var i=n(106);t.armyLayoutHeight=i.armyLayoutHeight,t.armyLayoutWidth=i.armyLayoutWidth,t.infoLayoutHeight=i.infoLayoutHeight,t.infoLayoutWidth=i.infoLayoutWidth,t.unitRosterHeight=i.unitRosterHeight,t.unitRosterWidth=i.unitRosterWidth,t.startBattleStartY=i.startBattleStartY,t.startBattleHeight=i.startBattleHeight,t.startBattleWidth=i.startBattleWidth,t.titleHeight=i.titleHeight;var o=n(265);t.changeBattleSettingsToTrue=o.changeBattleSettingsToTrue,t.changeUnitInfoToTrue=o.changeUnitInfoToTrue,t.showBattleSettings=o.showBattleSettings,t.showUnitInfo=o.showUnitInfo;var a=n(266);t.changeToComputer=a.changeToComputer,t.changeToPlayer=a.changeToPlayer,t.side=a.side;var s=n(267);t.disableStartBattleButton=s.disableStartBattleButton,t.enableStartBattleButton=s.enableStartBattleButton,t.startBattleAvailable=s.startBattleAvailable;var l=n(268);t.changeHoveredUnit=l.changeHoveredUnit,t.hoveredUnit=l.hoveredUnit,t.computerHasUnits=l.computerHasUnits,t.playerHasUnits=l.playerHasUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(140);t.addNodeIntoArray=r.addNodeIntoArray;var i=n(143);t.getDistanceBetweenUnitAndNodeInGrids=i.getDistanceBetweenUnitAndNodeInGrids,t.getDistanceBetweenTwoNodesInGrids=i.getDistanceBetweenTwoNodesInGrids;var o=n(145);t.getNodeFromArray=o.getNodeFromArray,t.getNodeFromMap=o.getNodeFromMap,t.getMinValueFromNodes=o.getMinValueFromNodes,t.getMaxValueFromNodes=o.getMaxValueFromNodes;var a=n(164);t.getRandomNode=a.getRandomNode;var s=n(71);t.shuffleNodes=s.shuffleNodes;var l=n(167);t.getSurroundedBlockedNodes=l.getSurroundedBlockedNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1),o=n(8),a=n(182),s=function(){function e(e,t,n,o){void 0===o&&(o="player"),this.radius=a.radius,this.isCurrentlyChosen=!1,this.imgSrc="./src/img/units/pikemen.jpg",this.isMoving=!1,this.isVisible=!1,this.unitToPursue=null,this.isFighting=!1,this.figthAgainst={front:{},flank:[],rear:{},all:[]},this.health=100,this.speed=10,this.armour=1,this.range=0,this.mobility=1,this.meleeDamage=1,this.missileDamage=0,this.shotsRemained=0,this.charge=2,this.discipline=5,this.weight=0,this.visibility=5,this.morale=100,this.condition=100,this.baseNode={},this.isUnitUnderProtection=!1,this.isUnitNeedHelp=!1,this.beCloseTo=[],this.frozen=!1,this.id=e,this.x=t,this.y=n,this.centerX=t+r.gridSize/2,this.centerY=n+r.gridSize/2,this.controlBy=o,this.currentNode=i.getNodeFromMap(t,n),this.nextNode=i.getNodeFromMap(t,n)}return e.prototype.setX=function(e){this.x=e,this.centerX=e+r.gridSize/2},e.prototype.setY=function(e){this.y=e,this.centerY=e+r.gridSize/2},e.prototype.setIsMovingToFalse=function(){this.isMoving=!1},e.prototype.setIsMovingToTrue=function(){this.isMoving=!0},e.prototype.setUnitToPursue=function(e){this.unitToPursue=e},e.prototype.setUnitToPursueToNull=function(){this.unitToPursue=null},e.prototype.setIsFightingToTrue=function(){this.isFighting=!0},e.prototype.setIsFightingToFalse=function(){this.isFighting=!1},e.prototype.assignMoveToPosition=function(e,t){var n=i.getNodeFromMap(e,t);n&&(this.moveToNode=n)},e.prototype.removeEnemyFromFlank=function(e){for(var t=0;t<this.figthAgainst.flank.length;++t)this.figthAgainst.flank[t].id===e.id&&(this.figthAgainst.flank=o.deleteUnitFromArray(e,this.figthAgainst.flank))},e.prototype.increaseCondition=function(e){this.condition<100&&(this.condition+=e)},e.prototype.decreaseCondition=function(e){this.condition>0&&(this.condition-=e)},e.prototype.setCurrentNode=function(e){var t=i.getNodeFromMap(e.x,e.y);t&&(this.currentNode=t)},e.prototype.setNextNode=function(e){var t=i.getNodeFromMap(e.x,e.y);t&&(this.nextNode=t)},e.prototype.assignEnemy=function(e){if(i.isObjectEmpty(this.figthAgainst.front))this.figthAgainst.front=e;else{var t=this.figthAgainst.front.currentNode,n=e.currentNode,a=this.currentNode,s=(a.x-t.x)/r.gridSize,l=(a.y-t.y)/r.gridSize,u=(a.x-n.x)/r.gridSize,c=(a.y-n.y)/r.gridSize;s===-u&&l===-c?this.figthAgainst.rear=e:s===u&&l===-c?this.figthAgainst.rear=e:s===-u&&l===c?this.figthAgainst.rear=e:this.figthAgainst.flank.push(e)}o.isUnitInArray(e,this.figthAgainst.all)||this.figthAgainst.all.push(e),this.isFighting=!0},e.prototype.increaseWeightInPercentage=function(e){var t=this.weight+this.weight*(.01*e);t<0?t=0:t>100&&(t=100),this.weight=Math.round(t)},e.prototype.removeEnemyFromFightAgainst=function(e){if(e.id===this.figthAgainst.front.id)this.figthAgainst.front={},this.arrangeFightAgainst();else if(e.id===this.figthAgainst.rear.id)this.figthAgainst.rear={};else if(0!==this.figthAgainst.flank.length)for(var t=0,n=this.figthAgainst.flank;t<n.length;t++){n[t].id===e.id&&this.removeEnemyFromFlank(e)}this.figthAgainst.all=o.deleteUnitFromArray(e,this.figthAgainst.all),0===this.figthAgainst.all.length&&(this.isFighting=!1)},e.prototype.arrangeFightAgainst=function(){var e=Object.assign([],this.figthAgainst.flank),t=Object.assign({},this.figthAgainst.rear);if(this.figthAgainst.flank=[],this.figthAgainst.rear={},e.length>0)for(var n=0,r=e;n<r.length;n++){var o=r[n];this.assignEnemy(o)}i.isObjectEmpty(t)||this.assignEnemy(t)},e.prototype.clearFightAgainst=function(){this.figthAgainst.front={},this.figthAgainst.rear={},this.figthAgainst.flank=[],this.figthAgainst.all=[],this.isFighting=!1},e.prototype.assignTask=function(e){if("exploration"===e)this.task=e;else if("protection"===e)this.task=e;else if("patrol"===e)this.task=e;else{if("holdPosition"!==e)throw new Error("Cannot assign task for unit "+this.name);this.task=e}console.error(" new task for unit",this.name,"is",e)},e.prototype.clearTask=function(){this.task=""},e.prototype.setIsUnitUnderProtectionToTrue=function(){this.isUnitUnderProtection=!0},e.prototype.setIsUnitUnderProtectionToFalse=function(){this.isUnitUnderProtection=!1},e.prototype.assignUnitToProtect=function(e){this.unitToProtect=e},e.prototype.clearUnitToProtect=function(){this.unitToProtect=null},e.prototype.setIsUnitNeedHelpToTrue=function(){this.isUnitNeedHelp=!0},e.prototype.setIsUnitNeedHelpToFalse=function(){this.isUnitNeedHelp=!1},e.prototype.assignUnitToHelp=function(e){this.unitToHelp=e},e.prototype.clearUnitToHelp=function(){this.unitToHelp=null},e.prototype.assignBaseNode=function(e){e&&(this.baseNode=e)},e.prototype.removeBaseNode=function(){this.baseNode={}},e.prototype.setCommandNumber=function(e){this.commandNumber=e},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.side="player",t.changeToPlayer=function(){t.side="player"},t.changeToComputer=function(){t.side="computer"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(72);t.addUnitIntoArray=r.addUnitIntoArray,t.deleteUnitFromArray=r.deleteUnitFromArray,t.deleteUnitFromArmy=r.deleteUnitFromArmy,t.getDistanceBetweenTwoUnitsInGrids=r.getDistanceBetweenTwoUnitsInGrids,t.getUnitById=r.getUnitById,t.isUnitInArray=r.isUnitInArray},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.visibleForPlayerUnits=[],t.visibleForComputerUnits=[],t.addUnitIntoVisibleUnits=function(e){"player"===e.controlBy?r.isObjectInArray(e,t.visibleForComputerUnits)||t.visibleForComputerUnits.push(e):"computer"===e.controlBy&&(r.isObjectInArray(e,t.visibleForPlayerUnits)||t.visibleForPlayerUnits.push(e))},t.removeUnitFromVisibleUnits=function(e){"player"===e.controlBy?r.isObjectInArray(e,t.visibleForComputerUnits)&&(t.visibleForComputerUnits=r.deleteObjectFromArray(e,t.visibleForComputerUnits)):"computer"===e.controlBy&&r.isObjectInArray(e,t.visibleForPlayerUnits)&&(t.visibleForPlayerUnits=r.deleteObjectFromArray(e,t.visibleForPlayerUnits))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(20),i=n(70);t.initialMap=[],t.searchMap={},t.createMap=function(){return new Promise(function(e){t.initialMap=r.createNodes(),e()})},t.initializeSearchMap=function(e){return new Promise(function(n){t.searchMap=i.createSearchMap(e),n()})},t.addObstaclesToMap=function(){return new Promise(function(e){t.initialMap=r.createObstacles(120,220,120,160,"river"),t.initialMap=r.createObstacles(640,800,160,160,"river"),t.initialMap=r.createObstacles(880,1120,160,160,"river"),t.initialMap=r.createOneObstacle(t.initialMap,320,280,"mountain"),t.initialMap=r.createObstacles(240,340,320,360,"mountain"),t.initialMap=r.createObstacles(480,580,400,440,"forest"),t.initialMap=r.createObstacles(960,1e3,360,400,"forest"),t.initialMap=r.createObstacles(920,1e3,400,440,"forest"),e()})},t.initializeMap=function(){return new Promise(function(e){console.error("initializeMap"),t.createMap().then(function(){return t.addObstaclesToMap()}).then(function(){r.addNeighbors(t.initialMap).then(function(){return t.initializeSearchMap(t.initialMap).then(function(){e()})})})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(73);t.onChooseUnit=r.onChooseUnit,t.chooseUnitType=r.chooseUnitType;var i=n(194);t.createUnit=i.createUnit;var o=n(78);t.drawUnit=o.drawUnit,t.redrawUnits=o.redrawUnits;var a=n(195);t.armourPenetration=a.armourPenetration,t.checkAttackSide=a.checkAttackSide,t.charge=a.charge,t.calculateCharge=a.calculateCharge,t.calculateDamage=a.calculateDamage,t.calculateDamageBaseOnEnemyPosition=a.calculateDamageBaseOnEnemyPosition,t.calculateDamageWhenItsLessThanOne=a.calculateDamageWhenItsLessThanOne,t.removeUnitFromEnemiesFightAgainst=a.removeUnitFromEnemiesFightAgainst,t.findUnitInFightAgainst=a.findUnitInFightAgainst,t.isUnitFighting=a.isUnitFighting,t.checkHealth=a.checkHealth,t.meleeAttack=a.meleeAttack,t.meleeCombat=a.meleeCombat,t.refreshment=a.refreshment;var s=n(23);t.updateUnit=s.updateUnit,t.pursueUnit=s.pursueUnit;var l=n(217);t.spotEnemy=l.spotEnemy,t.isUnitSpottedByEnemy=l.isUnitSpottedByEnemy,t.spotUnits=l.spotUnits;var u=n(74);t.Archers=u.Archers,t.HeavyInfantry=u.HeavyInfantry,t.HeavyCavalry=u.HeavyCavalry,t.Hoplites=u.Hoplites,t.LightInfantry=u.LightInfantry,t.LightCavalry=u.LightCavalry,t.Militia=u.Militia,t.Peltasts=u.Peltasts,t.Pikemen=u.Pikemen,t.Scouts=u.Scouts,t.Unit=u.Unit},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(130);t.auxiliaryCanvas=r.auxiliaryCanvas;var i=n(134);t.backgroundCanvas=i.backgroundCanvas;var o=n(135);t.canvas=o.canvas;var a=n(136);t.terrain=a.terrain;var s=n(137);t.dragAndDropCanvas=s.dragAndDropCanvas;var l=n(138);t.mainMenu=l.mainMenu},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.quantity=0,this.totalHealth=0,this.totalSpeed=0,this.totalArmour=0,this.totalMeleeDamage=0,this.totalMissileDamage=0,this.totalDiscipline=0,this.totalMorale=0,this.totalCondition=0}return e.prototype.incrementQuantity=function(){this.quantity+=1},e.prototype.decrementQuantity=function(){this.quantity-=1},e.prototype.addHealth=function(e){this.totalHealth+=e},e.prototype.addSpeed=function(e){this.totalSpeed+=e},e.prototype.addArmour=function(e){this.totalArmour+=e},e.prototype.addMeleeDamage=function(e){this.totalMeleeDamage+=e},e.prototype.addMissileDamage=function(e){this.totalMissileDamage+=e},e.prototype.addDiscipline=function(e){this.totalDiscipline+=e},e.prototype.addMorale=function(e){this.totalMorale+=e},e.prototype.addCondition=function(e){this.totalCondition+=e},e.prototype.resetAllProperties=function(){this.quantity=0,this.totalHealth=0,this.totalSpeed=0,this.totalArmour=0,this.totalMeleeDamage=0,this.totalMissileDamage=0,this.totalDiscipline=0,this.totalMorale=0,this.totalCondition=0},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),i=n(4),o=n(40),a=n(1);t.computerArmy=[],t.computerArmyPositionX=i.unitRosterWidth+20,t.computerArmyPositionY=i.titleHeight+60,t.playerArmy=[],t.playerArmyPositionX=i.unitRosterWidth+20,t.playerArmyPositionY=i.titleHeight+60,t.addUnitToArmy=function(e){var n,i=Object.assign({},e);"player"===r.side?(n=t.playerArmy,i.armyPosition={x:t.playerArmyPositionX,y:t.playerArmyPositionY}):(n=t.computerArmy,i.armyPosition={x:t.computerArmyPositionX,y:t.computerArmyPositionY}),e&&n.push(i),"player"===r.side?t.changePlayerArmyPosition():t.changeComputerArmyPosition()},t.removeUnitFromArmy=function(e){var n;n="player"===r.side?t.playerArmy:t.computerArmy,e&&a.isUnitInArray(e,n)&&("player"===r.side?(t.playerArmy=a.deleteUnitFromArmy(e,t.playerArmy),t.rearrangePlayerArmyPosition()):(t.computerArmy=a.deleteUnitFromArmy(e,t.computerArmy),t.rearrangeComputerArmyPosition()))},t.changePlayerArmyPosition=function(){var e=t.playerArmy.length,n=o.armyImgWidth+10,r=o.armyImgHeight+15,a=i.unitRosterWidth+20;e%5==0?(t.playerArmyPositionX=a,t.playerArmyPositionY+=r):t.playerArmyPositionX+=n},t.changeComputerArmyPosition=function(){var e=t.computerArmy.length,n=o.armyImgWidth+10,r=o.armyImgHeight+15,a=i.unitRosterWidth+20;e%5==0?(t.computerArmyPositionX=a,t.computerArmyPositionY+=r):t.computerArmyPositionX+=n},t.rearrangePlayerArmyPosition=function(){for(var e=o.armyImgWidth+10,n=o.armyImgHeight+15,r=i.unitRosterWidth+20,a=i.unitRosterWidth+20,s=i.titleHeight+60,l=1,u=0,c=t.playerArmy;u<c.length;u++){c[u].armyPosition={x:a,y:s},l%5==0?(a=r,s+=n):a+=e,l++}if(0!==t.playerArmy.length){var d=t.playerArmy[t.playerArmy.length-1].armyPosition.x,f=t.playerArmy[t.playerArmy.length-1].armyPosition.y;l%5==0?(t.playerArmyPositionX=r,t.playerArmyPositionY=f+n):(t.playerArmyPositionX=d+e,t.playerArmyPositionY=f)}else t.playerArmyPositionX=i.unitRosterWidth+20,t.playerArmyPositionY=i.titleHeight+60},t.rearrangeComputerArmyPosition=function(){for(var e=o.armyImgWidth+10,n=o.armyImgHeight+15,r=i.unitRosterWidth+20,a=i.unitRosterWidth+20,s=i.titleHeight+60,l=1,u=0,c=t.computerArmy;u<c.length;u++){c[u].armyPosition={x:a,y:s},l%5==0?(s+=n,a=r):a+=e,l++}if(0!==t.computerArmy.length){var d=t.computerArmy[t.computerArmy.length-1].armyPosition.x,f=t.computerArmy[t.computerArmy.length-1].armyPosition.y;l%5==0?(t.computerArmyPositionX=r,t.computerArmyPositionY=f+n):(t.computerArmyPositionX=d+e,t.computerArmyPositionY=f)}else t.computerArmyPositionX=i.unitRosterWidth+20,t.computerArmyPositionY=i.titleHeight+60}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(62);t.goldBoxStartX=r.goldBoxStartX,t.goldBoxStartY=r.goldBoxStartY,t.startTotalMoneyTitleX=r.startTotalMoneyTitleX,t.startTotalMoneyTitleY=r.startTotalMoneyTitleY,t.boxWidth=r.boxWidth,t.boxHeight=r.boxHeight,t.goldOptions=r.goldOptions,t.unitInfoTitleX=r.unitInfoTitleX,t.unitInfoTitleY=r.unitInfoTitleY,t.propertyStartX=r.propertyStartX,t.propertyStartY=r.propertyStartY,t.valueStartX=r.valueStartX,t.valueStartY=r.valueStartY;var i=n(281);t.width=i.width,t.height=i.height,t.battleSettingsX=i.battleSettingsX,t.battleSettingsY=i.battleSettingsY,t.unitInfoX=i.unitInfoX,t.unitInfoY=i.unitInfoY},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.currentlyChosenUnit=null,t.assignCurrentlyChosenUnit=function(e){e&&"player"===e.controlBy?t.currentlyChosenUnit=e:t.currentlyChosenUnit=null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31),i=n(2),o=n(76),a=n(72),s=n(3),l=n(0),u=n(21),c=n(16);t.drawUnitIcon=function(e,n){if(void 0===n&&(n=!1),"player"===e.controlBy){var u=a.getUnitPositionInArray(e.id,s.playerUnits)+1,c=r.UNIT_LEFT_PANEL_WIDTH+r.UNIT_ICON_WIDTH*u,d=l.CANVAS_HEIGHT-r.UNIT_PANEL_HEIGHT;i.ctx.clearRect(c,d,r.UNIT_ICON_WIDTH,r.UNIT_ICON_HEIGHT);var f=n?.5:1,h=c,g=r.UNIT_ICON_WIDTH*f;i.ctx.strokeRect(c,d,g,r.UNIT_ICON_HEIGHT),t.drawMovementIcon(c,d,e,n),c+=o.movementIcon.width*f,t.drawFightIcon(c,d,e,n),c+=o.fightIcon.width*f,t.drawArrowIcon(c,d,n),c=h,d+=o.attributesHeight,t.fillHealthPoints(c,d,e,n),d+=o.healthPointsHeight,t.drawIcon(c,d,e,n)}},t.drawMovementIcon=function(e,t,n,r){if(void 0===r&&(r=!1),n.isMoving){var a=r?.5:1;i.ctx.drawImage(u.movementIconImage,e,t,o.movementIcon.width*a,o.movementIcon.height)}},t.drawFightIcon=function(e,t,n,r){if(void 0===r&&(r=!1),n.isFighting){var a=r?.5:1;i.ctx.drawImage(u.fightIconImage,e,t,o.fightIcon.width*a,o.fightIcon.height)}},t.drawArrowIcon=function(e,t,n){void 0===n&&(n=!1)},t.fillHealthPoints=function(e,t,n,a){void 0===a&&(a=!1);var s=a?.5:1,l=r.UNIT_ICON_WIDTH*s,u=n.initialHealth,c=.01*Math.round(n.health/u*100),d=l*c;c>=.7?i.ctx.fillStyle="green":c>=.4&&c<.7?i.ctx.fillStyle="yellow":c>0&&c<.4&&(i.ctx.fillStyle="red"),d<0&&(d=0),i.ctx.fillRect(e,t,d,o.healthPointsHeight)},t.drawIcon=function(e,t,n,a){void 0===a&&(a=!1),i.ctx.save(),(!c.currentlyChosenUnit||c.currentlyChosenUnit&&c.currentlyChosenUnit.id!==n.id)&&(i.ctx.filter="brightness(0.8)");var s=a?.5:1;i.ctx.drawImage(u.unitIconImages[n.name],e,t,r.UNIT_ICON_WIDTH*s,o.iconHeight),i.ctx.restore()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.loadingCanvas=document.getElementById("loadingCanvas"),t.loadingCanvas&&(t.loadingCanvas.width=r.MAP_WIDTH,t.loadingCanvas.height=r.CANVAS_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(10),o=n(162);t.getNodeFromMap=function(e,t,n){var a;void 0===n&&(n=i.searchMap);var s=r.MAP_WIDTH/r.gridSize,l=r.MAP_HEIGHT/r.gridSize,u=o.findXInSearchMap(0,s,e);return u&&(a=o.coordinateYBinarySearch(0,l,t,u)),a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(150);t.clearMap=r.clearMap;var i=n(152);t.drawGrid=i.drawGrid;var o=n(154);t.addNeighbors=o.addNeighbors,t.neighbors=o.neighbors;var a=n(156);t.createNodes=a.createNodes;var s=n(158);t.createOneObstacle=s.createOneObstacle,t.createObstacles=s.createObstacles,t.createUnitObstacle=s.createUnitObstacle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(76),o=n(77);t.unitIconImages={},t.loadIcons=function(){l(),s(),t.loadSwordIconImage(),t.loadSpearIconImage(),t.loadSpearAndShieldIconImage()},t.loadUnitIcons=function(){return new Promise(function(e){o.createDefaultUnits().then(function(){return a().then(function(){return e()})})})};var a=function(){return new Promise(function(e){u().then(function(){e()})})},s=function(){r.loadImage(i.moveIconSrc,function(e,n){if(e)throw new Error("cannot load movement icon");t.movementIconImage=n})},l=function(){r.loadImage(i.fightIconSrc,function(e,n){if(e)throw new Error("cannot load fight icon");t.fightIconImage=n})},u=function(e){return void 0===e&&(e=0),new Promise(function(n){e===o.defaultUnits.length&&n(),r.loadImage(o.defaultUnits[e].imgSrc,function(r,i){if(r)throw new Error("Cannot load images of unit "+o.defaultUnits[e].name);t.unitIconImages[o.defaultUnits[e].name]=i,n(u(e+1))})})};t.loadSwordIconImage=function(){r.loadImage(i.swordIconSrc,function(e,n){if(e)throw new Error("cannot load sword icon at path "+t.swordIconImage);t.swordIconImage=n})},t.loadSpearIconImage=function(){r.loadImage(i.spearIconSrc,function(e,n){if(e)throw new Error("cannot load spear icon at path: "+i.spearIconSrc);t.spearIconImage=n})},t.loadSpearAndShieldIconImage=function(){r.loadImage(i.spearAndShieldSrc,function(e,n){if(e)throw new Error("cannot load spear and shield icon at path "+i.spearAndShieldSrc);t.spearAndShieldIconImage=n})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.revealedUnits=[],t.addToRevealedUnits=function(e){if(!r.isUnitInArray(e,t.revealedUnits)&&"player"===e.controlBy){var n=Object.assign({},e);t.revealedUnits.push(n)}},t.removeFromRevealedUnits=function(e){r.isUnitInArray(e,t.revealedUnits)&&(t.revealedUnits=r.deleteUnitFromArray(e,t.revealedUnits))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(208);t.attackEnemy=r.attackEnemy,t.moveTo=r.moveTo,t.pursueUnit=r.pursueUnit,t.updateUnit=r.updateUnit},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.armyImgWidth=80,t.armyImgHeight=80},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(291);t.isStartBattleAvailable=r.isStartBattleAvailable;var i=n(293);t.isStartBattleButtonSelected=i.isStartBattleButtonSelected;var o=n(295);t.showStartBattleButton=o.showStartBattleButton,t.showText=o.showText},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(129);t.launchBattle=r.launchBattle;var i=n(248);t.launchGame=i.launchGame;var o=n(308);t.activateBattleMode=o.activateBattleMode,t.activateMainMenuMode=o.activateMainMenuMode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),i=n(44),o=n(45),a=n(18);r.canvas&&(t.ctx=r.canvas.getContext("2d")),r.auxiliaryCanvas&&(t.auxiliaryCtx=r.auxiliaryCanvas.getContext("2d")),r.terrain&&(t.terrainCtx=r.terrain.getContext("2d")),r.backgroundCanvas&&(t.backgroundCtx=r.backgroundCanvas.getContext("2d")),r.mainMenu&&(t.mainMenuCtx=r.mainMenu.getContext("2d")),r.dragAndDropCanvas&&(t.dragAndDropCanvasCtx=r.dragAndDropCanvas.getContext("2d")),i.pathCanvas&&(t.pathCtx=i.pathCanvas.getContext("2d")),o.eventCanvas&&(t.eventCtx=o.eventCanvas.getContext("2d")),a.loadingCanvas&&(t.loadingCtx=a.loadingCanvas.getContext("2d"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(9);t.hidingEnemies=[],t.addToHidingEnemies=function(e){if(!r.isUnitInArray(e,i.visibleForComputerUnits)){var n=Object.assign({},e);r.isUnitInArray(e,t.hidingEnemies)||"player"!==e.controlBy||t.hidingEnemies.push(n)}},t.removeFromHidingEnemies=function(e){r.isUnitInArray(e,i.visibleForComputerUnits)&&r.isUnitInArray(e,t.hidingEnemies)&&(t.hidingEnemies=r.deleteUnitFromArray(e,t.hidingEnemies))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(30);t.getSurroundedNodes=r.getSurroundedNodes;var i=n(169);t.getSurroundedEnemies=i.getSurroundedEnemies;var o=n(170);t.getSurroundedAllies=o.getSurroundedAllies},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1);t.getSurroundedNodes=function(e,t){void 0===t&&(t=1);for(var n=[],o=e.currentNode.x-t*r.gridSize,a=e.currentNode.x+t*r.gridSize,s=e.currentNode.y-t*r.gridSize,l=e.currentNode.y+t*r.gridSize,u=s;u<=l;u+=r.gridSize)for(var c=o;c<=a;c+=r.gridSize){var d=i.getNodeFromMap(c,u);d&&n.push(d)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.UNIT_PANEL_HEIGHT=r.CANVAS_HEIGHT-r.MAP_HEIGHT,t.UNIT_PANEL_WIDTH=r.MAP_WIDTH,t.UNIT_LEFT_PANEL_WIDTH=260,t.UNIT_RIGHT_PANEL_WIDTH=260,t.UNIT_ICONS_PANEL_WIDTH=1e3,t.UNIT_ICON_WIDTH=100,t.UNIT_ICON_HEIGHT=t.UNIT_PANEL_HEIGHT},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(0),o=n(16),a=n(3),s=n(316);t.drawUnit=function(e){var t,n=0;if("player"===e.controlBy)t="#dbdb0d";else if("computer"===e.controlBy&&(t="#d30c0c",!e.isVisible))return;if(r.ctx){o.currentlyChosenUnit&&o.currentlyChosenUnit.id===e.id&&(r.ctx.beginPath(),r.ctx.arc(e.centerX,e.centerY,e.radius,0,2*Math.PI),r.ctx.fillStyle="#a79ebf",r.ctx.fill(),r.ctx.closePath(),r.ctx.restore(),n=2);r.ctx.beginPath(),r.ctx.arc(e.centerX,e.centerY,e.radius-n,0,2*Math.PI),r.ctx.fillStyle=t,r.ctx.fill(),r.ctx.closePath(),r.ctx.restore();var i=e.x+8,a=e.y+8,l=2*e.radius-8;r.ctx.drawImage(s.unitToIconMap[e.name],i+2,a+2,l,l)}},t.clearUnitImage=function(e){r.ctx&&r.ctx.clearRect(e.x,e.y,i.gridSize,i.gridSize)},t.redrawUnits=function(e){for(var n=0,r=e;n<r.length;n++){var i=r[n];!0!==i.isMoving&&t.drawUnit(i)}},t.redrawPlayerUnits=function(){t.redrawUnits(a.playerUnits)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),i=n(1),o=n(20),a=n(10),s=n(48),l=n(1),u=n(92),c=n(5),d=n(93),f=n(34),h=n(94),g=n(95),y=n(97),v=n(98),m=n(17);t.pursueUnit=function(e,n,p,M,U,_,b,P){if(void 0===P&&(P=0),!(P>3)){if(e.isFighting){if(e.setUnitToPursueToNull(),!b||!u.unitCanGetOutOfCombat(e)){var I=i.getNodeFromMap(e.x,e.y);return e.setCurrentNode(I),e.setNextNode(I),void e.setIsMovingToFalse()}e.clearFightAgainst(),r.removeUnitFromEnemiesFightAgainst(e),e.setIsMovingToTrue()}if(null===e.unitToPursue){var x=i.getNodeFromMap(e.x,e.y),C=i.getNodeFromMap(e.moveToNode.x,e.moveToNode.y),T=s.aStar(a.initialMap,x,C);return e.assignMoveToPosition(C.x,C.y),void f.updateUnit(e,T,0,C.x,C.y,null,!1)}if(null!==e.unitToPursue&&n.id!==e.unitToPursue.id){var A=i.getNodeFromMap(e.x,e.y),O=i.getNodeFromMap(e.unitToPursue.x,e.unitToPursue.y);T=s.aStar(a.initialMap,A,O);return e.assignMoveToPosition(O.x,O.y),void t.pursueUnit(e,e.unitToPursue,O.x,O.y,0,T,!1)}if(0===y.getInterceptedEnemies(e).length){var S=Object.assign([],_),w=S[U];if(w){var N;N=U+1===S.length?w:S[U+1];var j=i.getNodeFromMap(e.x,e.y);e.setCurrentNode(j),e.setNextNode(N);var H=i.getNodeFromMap(e.x,e.y),B=i.getNodeFromMap(n.x,n.y);if(p===n.x&&M===n.y||(U=0,p=n.x,M=n.y,H=i.getNodeFromMap(e.x,e.y),B=i.getNodeFromMap(n.x,n.y),_=s.aStar(a.initialMap,H,B),e.assignMoveToPosition(n.currentNode.x,n.currentNode.y),w=_[U]),N.x===n.currentNode.x&&N.y===n.currentNode.y){console.log("UNIT REACHED ENEMY"),h.stopMoving(e,j),e.setUnitToPursueToNull(),m.drawUnitIcon(e),e.assignEnemy(n),n.assignEnemy(e);var F=i.getNodeFromMap(n.x,n.y);return h.stopMoving(n,F),m.drawUnitIcon(n),r.charge(e,n),void console.log("end of reached enemy")}if(l.anotherUnitIsOnTheWay(e)){if(console.error("ANOTHER UNIT IS ON THE WAY"),v.getBlockedEnemies(e).length>0){console.log("UNIT is blocked by enemy"),h.stopMoving(e,j),e.setUnitToPursueToNull(),m.drawUnitIcon(e);for(var E=0,W=v.getBlockedEnemies(e);E<W.length;E++){q=W[E];e.assignEnemy(q),q.assignEnemy(e)}return}var D=g.unitCanMoveToTheNode(N,e);if(console.log("PERMISSION",D),!D){h.stopMoving(e,j);for(var k=Object.assign([],a.initialMap),R=0,G=c.getSurroundedBlockedNodes(e);R<G.length;R++){var z=G[R];k=o.createUnitObstacle(k,z.x,z.y)}o.addNeighbors(k);var L=i.getNodeFromMap(e.x,e.y,k),Y=i.getNodeFromMap(p,M,k);T=s.aStar(k,L,Y);return void t.pursueUnit(e,n,p,M,U,T,!1,P+=1)}}e.assignMoveToPosition(n.currentNode.x,n.currentNode.y),e.setIsMovingToTrue(),m.drawUnitIcon(e),r.spotEnemy(e),e.decreaseCondition(1),d.moveToNextNodeInPursueUnit(e,n,j,N,p,M,_,U)}}else{e.setIsMovingToFalse(),e.setUnitToPursueToNull(),m.drawUnitIcon(e);for(var V=0,X=y.getInterceptedEnemies(e);V<X.length;V++){var q;(q=X[V]).setIsMovingToFalse(),e.assignEnemy(q),q.assignEnemy(e)}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),i=n(1),o=n(20),a=n(10),s=n(48),l=n(1),u=n(92),c=n(5),d=n(94),f=n(93),h=n(33),g=n(95),y=n(97),v=n(98),m=n(17);t.updateUnit=function(e,n,p,M,U,_,b,P){if(void 0===p&&(p=0),void 0===_&&(_=null),void 0===P&&(P=0),!(P>3||e.health<=0))if(p!==n.length){if(e.isFighting){if(m.drawUnitIcon(e),!b||!u.unitCanGetOutOfCombat(e)){var I=i.getNodeFromMap(e.x,e.y);return void d.stopMoving(e,I)}e.setUnitToPursueToNull(),e.clearFightAgainst(),r.removeUnitFromEnemiesFightAgainst(e)}if(0===y.getInterceptedEnemies(e).length){if(e.unitToPursue){var x=i.getNodeFromMap(e.x,e.y);d.stopMoving(e,x);var C=i.getNodeFromMap(e.unitToPursue.x,e.unitToPursue.y),T=s.aStar(a.initialMap,x,C);return e.assignMoveToPosition(C.x,C.y),void h.pursueUnit(e,e.unitToPursue,C.x,C.y,0,T,!1)}if(M!==e.moveToNode.x||U!==e.moveToNode.y){x=i.getNodeFromMap(e.x,e.y),C=i.getNodeFromMap(e.moveToNode.x,e.moveToNode.y);d.stopMoving(e,x);T=s.aStar(a.initialMap,x,C);return e.assignMoveToPosition(C.x,C.y),void t.updateUnit(e,T,0,C.x,C.y,null,!1)}var A=Object.assign([],n),O=A[p];if(O){var S;S=p+1===A.length?O:A[p+1];var w=i.getNodeFromMap(e.x,e.y);if(e.setCurrentNode(w),e.setNextNode(O),p>=A.length)d.stopMoving(e,w);else{if(l.anotherUnitIsOnTheWay(e)&&p===A.length-1){if(v.getBlockedEnemies(e).length>0){d.stopMoving(e,w),e.setUnitToPursueToNull(),m.drawUnitIcon(e);for(var N=0,j=v.getBlockedEnemies(e);N<j.length;N++){L=j[N];e.assignEnemy(L),L.assignEnemy(e)}return}return console.error("another unit occupying destination position"),e.assignMoveToPosition(e.x,e.y),void d.stopMoving(e,w)}if(l.anotherUnitIsOnTheWay(e)){if(console.log("another unit is on the way"),v.getBlockedEnemies(e).length>0){d.stopMoving(e,w),e.setUnitToPursueToNull(),m.drawUnitIcon(e);for(var H=0,B=v.getBlockedEnemies(e);H<B.length;H++){L=B[H];e.assignEnemy(L),L.assignEnemy(e)}return}if(!g.unitCanMoveToTheNode(S,e)){d.stopMoving(e,w);for(var F=Object.assign([],a.initialMap),E=0,W=c.getSurroundedBlockedNodes(e);E<W.length;E++){var D=W[E];F=o.createUnitObstacle(F,D.x,D.y)}o.addNeighbors(F);x=i.getNodeFromMap(e.x,e.y,F),C=i.getNodeFromMap(M,U,F),T=s.aStar(F,x,C);return void t.updateUnit(e,T,0,M,U,null,!1,P+=1)}}e.setIsMovingToTrue(),m.drawUnitIcon(e);var k=O;r.spotEnemy(e),0!==p&&(k=A[p-1]),e.decreaseCondition(1),f.moveToNextNodeInUpdateUnit(e,k,O,M,U,n,p)}}}else{console.log("UNIT IS INTERCEPTED BY ENEMY");var R=i.getNodeFromMap(e.x,e.y);d.stopMoving(e,R),e.setUnitToPursueToNull(),m.drawUnitIcon(e);for(var G=0,z=y.getInterceptedEnemies(e);G<z.length;G++){var L=z[G];d.stopMoving(L,L.nextNode),e.assignEnemy(L),L.assignEnemy(e),m.drawUnitIcon(L)}}}else{var Y=i.getNodeFromMap(e.x,e.y);d.stopMoving(e,Y)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(8),o=n(5);t.getClosestUnitToNode=function(e){for(var t=r.computerUnits[0],n=1;n<r.computerUnits.length;++n){var i=o.getDistanceBetweenUnitAndNodeInGrids(t,e);o.getDistanceBetweenUnitAndNodeInGrids(r.computerUnits[n],e)<i&&(t=r.computerUnits[n])}return t},t.getClosestUnitToOtherUnit=function(e,t){void 0===t&&(t=r.computerUnits);var n=Object.assign([],i.deleteUnitFromArray(e,t));if(0===n.length)return e;for(var o=n[0],a=1;a<n.length;++a){var s=i.getDistanceBetweenTwoUnitsInGrids(o,e);i.getDistanceBetweenTwoUnitsInGrids(n[a],e)<s&&(o=n[a])}return o},t.getBestUnitByProperty=function(e,t){void 0===t&&(t=[]);var n=Object.assign([],r.computerUnits);if(0!==t.length)for(var o=0,a=t;o<a.length;o++){var s=a[o];n=i.deleteUnitFromArray(s,n)}if(0===n.length)return null;for(var l=n[0],u=0;u<n.length;++u)l[e]<n[u][e]&&(l=n[u]);return l},t.getWorstUnitByProperty=function(e,t){void 0===t&&(t=[]);var n=Object.assign([],r.computerUnits);if(0!==t.length)for(var o=0,a=t;o<a.length;o++){var s=a[o];n=i.deleteUnitFromArray(s,n)}if(0===n.length)return null;for(var l=n[0],u=0;u<n.length;++u)l[e]>n[u][e]&&(l=n[u]);return l},t.getBestEnemyByProperty=function(e,t){void 0===t&&(t=[]);var n=Object.assign([],r.playerUnits);if(0!==t.length)for(var o=0,a=t;o<a.length;o++){var s=a[o];n=i.deleteUnitFromArray(s,n)}if(0===n.length)return null;for(var l=n[0],u=0;u<n.length;++u)l[e]<n[u][e]&&(l=n[u]);return l},t.getWorstEnemyByProperty=function(e,t){void 0===t&&(t=[]);var n=Object.assign([],r.playerUnits);if(0!==t.length)for(var o=0,a=t;o<a.length;o++){var s=a[o];n=i.deleteUnitFromArray(s,n)}if(0===n.length)return null;for(var l=n[0],u=0;u<n.length;++u)l[e]>n[u][e]&&(l=n[u]);return l},t.getNotFightingUnits=function(e){void 0===e&&(e=[]);var t=Object.assign([],r.computerUnits);if(0!==e.length)for(var n=0,o=e;n<o.length;n++){var a=o[n];t=i.deleteUnitFromArray(a,t)}if(0===t.length)return null;for(var s=[],l=0,u=t;l<u.length;l++){(a=u[l]).isFighting||s.push(a)}return s},t.getFightingUnits=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var i=r[n];i.isFighting&&t.push(i)}return t},t.getTotalUnitsHealth=function(e){for(var t=0,n=0,r=e;n<r.length;n++){t+=r[n].health}return t},t.getTotalUnitsInitialHealth=function(e){for(var t=0,n=0,r=e;n<r.length;n++){t+=r[n].health}return t},t.getClosestEnemyToUnit=function(e){var t=Object.assign([],i.deleteUnitFromArray(e,r.playerUnits));if(0===t.length)return null;for(var n=t[0],o=1;o<t.length;++o){var a=i.getDistanceBetweenTwoUnitsInGrids(n,e);i.getDistanceBetweenTwoUnitsInGrids(t[o],e)<a&&(n=t[o])}return n},t.getFreeUnits=function(e){void 0===e&&(e=[]);var t=Object.assign([],r.computerUnits);if(0!==e.length)for(var n=0,o=e;n<o.length;n++){var a=o[n];t=i.deleteUnitFromArray(a,t)}if(0===t.length)return null;for(var s=[],l=0,u=t;l<u.length;l++){(a=u[l]).task||s.push(a)}return s},t.getUnitsByTask=function(e,t){void 0===t&&(t=[]);var n=Object.assign([],r.computerUnits);if(0!==t.length)for(var o=0,a=t;o<a.length;o++){var s=a[o];n=i.deleteUnitFromArray(s,n)}if(0===n.length)return null;for(var l=[],u=0,c=n;u<c.length;u++){(s=c[u]).task===e&&l.push(s)}return l},t.getUnitsByPropertyValue=function(e,t,n){void 0===n&&(n=[]);var o=Object.assign([],r.computerUnits);if(0!==n.length)for(var a=0,s=n;a<s.length;a++){var l=s[a];o=i.deleteUnitFromArray(l,o)}if(0===o.length)return null;for(var u=[],c=0,d=o;c<d.length;c++){(l=d[c])[e]===t&&u.push(l)}return u},t.getUnitsWhereValue=function(e,t,n,o){void 0===o&&(o=[]);var a=Object.assign([],r.computerUnits);if(0!==o.length)for(var s=0,l=o;s<l.length;s++){var u=l[s];a=i.deleteUnitFromArray(u,a)}if(0===a.length)return null;for(var c=[],d=0,f=a;d<f.length;d++){u=f[d];t.toLowerCase(),"="===t||"equal"===t||"=="===t||"==="===t?u[e]==n&&c.push(u):">"===t||"greater"===t?u[e]>n&&c.push(u):">="===t||">=="===t||"greaterOrEqual"===t?u[e]>=n&&c.push(u):"<"===t||"less"===t?u[e]<n&&c.push(u):"<="!==t&&"<=="!==t&&"lessOrEqual"!==t||u[e]<=n&&c.push(u)}return c},t.getDangerousUnits=function(e){var t=[],n=[];"computer"===e.controlBy?t=Object.assign([],r.playerUnits):"player"===e.controlBy&&(t=Object.assign([],r.computerUnits));for(var i=0,o=t;i<o.length;i++)for(var a=o[i],s=0,l=e.vulnerableAgainst;s<l.length;s++){var u=l[s];if(a.name==u){n.push(a);break}}return n},t.containsDangerousUnits=function(e,t){for(var n=0,r=t;n<r.length;n++)for(var i=r[n],o=0,a=e.vulnerableAgainst;o<a.length;o++){var s=a[o];if(i.name==s)return!0}return!1},t.isEnemyDangerousForUnit=function(e,t){for(var n=0,r=e.vulnerableAgainst;n<r.length;n++){var i=r[n];if(t.name==i)return!0}return!1},t.isEnemyVulnerableToUnit=function(e,t){for(var n=0,r=e.advantageOver;n<r.length;n++){var i=r[n];if(t.name==i)return!0}return!1},t.getScoutsNumber=function(){for(var e=0,n=r.computerUnits;e<n.length;e++){n[e];return t.getUnitsByTask("exploration").length}},t.isUnitsChanged=function(e,t){var n=function(e,t){return e.id<t.id?-1:e.id>t.id?1:0};if(e.length!=t.length)return!0;var r=Object.assign([],e),i=Object.assign([],t);r.sort(n),i.sort(n);for(var o=0;o<r.length;++o)if(r[o]!=i[o])return console.error("units changed"),!0;return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(30),i=n(19),o=n(8);t.getSurroundedUnits=function(e,t,n,a){void 0===n&&(n=3),void 0===a&&(a=!1);var s=[],l=Object.assign([],t);!a&&o.isUnitInArray(e,l)&&(l=o.deleteUnitFromArray(e,l));for(var u=0,c=r.getSurroundedNodes(e,n);u<c.length;u++)for(var d=c[u],f=0,h=l;f<h.length;f++){var g=h[f],y=i.getNodeFromMap(g.x,g.y);d.x===y.x&&d.y===y.y&&s.push(g)}return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(77);t.roster=[],t.createRoster=function(){for(var e=0,n=r.defaultUnits;e<n.length;e++){var i=n[e];t.roster.push(i)}for(var o=0,a=t.roster;o<a.length;o++){(i=a[o]).selected=!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.totalGold=400,t.setTotalGold=function(e){t.totalGold=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.showBattleSettings=!0,t.showUnitInfo=!1,t.changeBattleSettingsToTrue=function(){t.showBattleSettings=!0,t.showUnitInfo=!1},t.changeUnitInfoToTrue=function(){t.showBattleSettings=!1,t.showUnitInfo=!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(109);t.displayArmy=r.displayArmy;var i=n(111);t.drawRemoveIcon=i.drawRemoveIcon;var o=n(275);t.isUnitShouldBeRemoved=o.isUnitShouldBeRemoved;var a=n(24);t.armyImgWidth=a.armyImgWidth,t.armyImgHeight=a.armyImgHeight;var s=n(276);t.displayChosenUnits=s.displayChosenUnits,t.displayChosenUnitsTitle=s.displayChosenUnitsTitle,t.onChooseUnitInArmy=s.onChooseUnitInArmy},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(286);t.displayComputer=r.displayComputer;var i=n(287);t.displayPlayer=i.displayPlayer;var o=n(288);t.displayRemainGold=o.displayRemainGold;var a=n(289);t.displayTitle=a.displayTitle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(131);t.MAP_HEIGHT=r.MAP_HEIGHT,t.MAP_WIDTH=r.MAP_WIDTH,t.CANVAS_HEIGHT=r.CANVAS_HEIGHT;var i=n(132);t.gridSize=i.gridSize},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.battleMode=!1,t.battleFinish=!1,t.mainMenuMode=!0,t.setBattleMode=function(){return new Promise(function(e){t.mainMenuMode=!1,t.battleMode=!0,e()})},t.setMainMenuMode=function(){return new Promise(function(e){t.mainMenuMode=!1,t.battleMode=!0,e()})},t.finishBattle=function(){t.battleFinish=!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.pathCanvas=document.getElementById("pathCanvas"),t.pathCanvas&&(t.pathCanvas.width=r.MAP_WIDTH,t.pathCanvas.height=r.CANVAS_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.eventCanvas=document.getElementById("eventCanvas"),t.eventCanvas&&(t.eventCanvas.width=r.MAP_WIDTH,t.eventCanvas.height=r.CANVAS_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unitId=0,t.incUnitId=function(){t.unitId++}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(200);t.calculateDamage=r.calculateDamage,t.calculateDamageBaseOnEnemyPosition=r.calculateDamageBaseOnEnemyPosition,t.calculateDamageWhenItsLessThanOne=r.calculateDamageWhenItsLessThanOne},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(49);t.aStar=r.aStar;var i=n(91);t.drawPath=i.drawPath;var o=n(210);t.findPathFromOneNodeToAnother=o.findPathFromOneNodeToAnother;var a=n(90);t.getMinFScore=a.getMinFScore,t.unclosedNeigbors=a.unclosedNeigbors,t.isObjectInMapKeys=a.isObjectInMapKeys},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(20),i=n(1),o=n(90);t.aStar=function(e,n,a){var s=Object.assign([],e);if(n&&a){var l=[],u=[];n.gScore=0,n.fScore=n.gScore+t.h(n,a),l.push(n);for(var c=new Map;l;){var d=o.getMinFScore(l);if(!d)return;if(d.x===a.x&&d.y===a.y)return t.reconstructPath(c,d);l=i.deleteObjectFromArray(d,l),u.push(d);for(var f=0,h=o.unclosedNeigbors(d,u);f<h.length;f++){var g=h[f],y=o.getNeighborDistance(d,g),v=d.gScore+y;if(!i.isObjectInArray(g,l)||v<g.gScore){if(c.set(g,d),!g)return;g.gScore=v,g.fScore=g.gScore+t.h(g,a)}if(!i.isObjectInArray(g,l)){var m=r.neighbors(s,g);g.neighbors=m,l.push(g)}}}return 0}},t.h=function(e,t){var n=Math.abs(e.x-t.x),r=Math.abs(e.y-t.y);return 10*(n+r)+-6*Math.min(n,r)},t.reconstructPath=function(e,t){for(var n=[t],r=[];o.isObjectInMapKeys(t,e);)t=e.get(t),n.push(t);for(var i=n.length-1;i>=0;i--)r.push(n[i]);return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(19),i=n(10),o=n(34),a=n(49);t.moveTo=function(e,t,n){if(e.isMoving){e.setUnitToPursue(null);var s=r.getNodeFromMap(t,n);e.assignMoveToPosition(s.x,s.y)}else{e.setUnitToPursue(null);var l=r.getNodeFromMap(e.x,e.y),u=(s=r.getNodeFromMap(t,n),a.aStar(i.initialMap,l,s));e.assignMoveToPosition(s.x,s.y),o.updateUnit(e,u,0,s.x,s.y,null,!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.playerPower=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.computerPower=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(96);t.getRandomUnit=function(e){var t=Object.assign([],e);return r.shuffleUnits(t)[0]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(244);t.assessVulnerability=r.assessVulnerability},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generateCurrentCommandNumber=function(){var e=Math.random();return t.currentCommandNumber=e,e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(253);t.rosterImgWidth=r.rosterImgWidth,t.rosterImgHeight=r.rosterImgHeight},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(254);t.displayRoster=r.displayRoster;var i=n(270);t.displayRosterUnits=i.displayRosterUnits;var o=n(273);t.displayRosterTitle=o.displayRosterTitle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7);t.playerSpentGold=0,t.computerSpentGold=0,t.increaseSpentGold=function(e){"computer"===r.side?t.computerSpentGold+=e:"player"===r.side&&(t.playerSpentGold+=e)},t.decreaseSpentGold=function(e){"computer"===r.side?t.computerSpentGold-=e:"player"===r.side&&(t.playerSpentGold-=e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.startBattleAvailable=!1,t.disableStartBattleButton=function(){t.startBattleAvailable=!1},t.enableStartBattleButton=function(){t.startBattleAvailable=!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.selectedUnitInRoster=null,t.selectUnitInRoster=function(e){t.selectedUnitInRoster=e||null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(279);t.changeTotalGold=r.changeTotalGold;var i=n(296);t.onChooseInfo=i.onChooseInfo,t.displayInfo=i.displayInfo},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);t.goldBoxStartX=r.armyLayoutWidth+r.unitRosterWidth+100,t.goldBoxStartY=r.titleHeight+80,t.startTotalMoneyTitleX=t.goldBoxStartX+40,t.startTotalMoneyTitleY=t.goldBoxStartY-20,t.boxWidth=40,t.boxHeight=40,t.goldOptions=[200,300,400,600,1e3],t.unitInfoTitleX=r.armyLayoutWidth+r.unitRosterWidth+170,t.unitInfoTitleY=r.titleHeight+60,t.propertyStartX=t.unitInfoTitleX-100,t.propertyStartY=t.unitInfoTitleY+30,t.valueStartX=t.propertyStartX+200,t.valueStartY=t.unitInfoTitleY+30,t.changeY=function(){t.propertyStartY+=30,t.valueStartY+=30},t.setDefault=function(){t.propertyStartX=t.unitInfoTitleX-100,t.propertyStartY=t.unitInfoTitleY+30,t.valueStartX=t.propertyStartX+200,t.valueStartY=t.unitInfoTitleY+30}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(283);t.onChoosePlayer=r.onChoosePlayer,t.onChooseComputer=r.onChooseComputer;var i=n(41);t.displayTitle=i.displayTitle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(285);t.playerSwitcherX0=r.playerSwitcherX0,t.playerSwitcherX1=r.playerSwitcherX1,t.playerSwitcherY0=r.playerSwitcherY0,t.playerSwitcherY1=r.playerSwitcherY1,t.computerSwitcherX0=r.computerSwitcherX0,t.computerSwitcherX1=r.computerSwitcherX1,t.computerSwitcherY0=r.computerSwitcherY0,t.computerSwitcherY1=r.computerSwitcherY1,t.playerSwitcherWidth=r.playerSwitcherWidth,t.computerSwitcherWidth=r.computerSwitcherWidth,t.goldX=r.goldX,t.goldY=r.goldY},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(294);t.startBattleButtonX=r.startBattleButtonX,t.startBattleButtonY=r.startBattleButtonY,t.startBattleButtonWidth=r.startBattleButtonWidth,t.startBattleButtonHeight=r.startBattleButtonHeight,t.startBattleTextX=r.startBattleTextX,t.startBattleTextY=r.startBattleTextY},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),i=n(2),o=n(0),a=n(1),s=n(11),l=n(3),u=n(23),c=n(16),d=n(89),f=n(219),h=n(32),g=n(221),y=n(91),v=n(222);t.launchBattle=function(){r.auxiliaryCanvas.addEventListener("mousemove",function(e){var t=e.offsetX,n=e.offsetY;if(c.currentlyChosenUnit){for(var r=null,a=0,s=l.computerUnits;a<s.length;a++){var u=s[a],d=u.x+o.gridSize,f=u.y+o.gridSize;t>=u.x&&t<d&&n>=u.y&&n<f&&(r=u)}r&&r.isVisible?(i.auxiliaryCtx.fillStyle="#000",i.auxiliaryCtx.font="14px Arial",i.auxiliaryCtx.fillText("Attack",r.x,r.y+o.gridSize/2)):i.auxiliaryCtx.clearRect(0,0,o.MAP_WIDTH,o.MAP_HEIGHT)}}),r.auxiliaryCanvas.addEventListener("click",function(e){var t=e.offsetX,n=e.offsetY;s.onChooseUnit(l.units,t,n),h.redrawPlayerUnits(),d.displayUnitIcons(),y.clearPath()}),r.auxiliaryCanvas.addEventListener("contextmenu",function(e){e.preventDefault();var t=e.offsetX,n=e.offsetY;if(c.currentlyChosenUnit){for(var r=null,i=0,a=l.computerUnits;i<a.length;i++){var s=a[i],d=s.x+o.gridSize,f=s.y+o.gridSize;t>=s.x&&t<d&&n>=s.y&&n<f&&(r=s)}r&&r.isVisible?u.attackEnemy(c.currentlyChosenUnit,r):(u.moveTo(c.currentlyChosenUnit,t,n),g.drawClickedIcon(t,n)),y.clearPath()}}),a.drawBackground("./src/img/terrain/terrain.png"),d.displayUnitIcons(),f.battleListener(),v.computerMovement(),setInterval(function(){f.isBattleEnd()},15e3)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadImage=function(e,t){var n=new Image;n.onload=function(){t(null,n)},n.onerror=function(){t(new Error("Cannot load the image at "+e))},n.src=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deleteObjectFromArray=function(e,t){return t.filter(function(t){return t.x!==e.x||t.y!==e.y})},t.isObjectInArray=function(e,t){if(0!==t.length)for(var n=0,r=t;n<r.length;n++){var i=r[n];if(e.x===i.x&&e.y===i.y)return!0}return!1},t.isObjectEmpty=function(e){var t=Object.prototype.hasOwnProperty;if(null==e)return!0;if(e.length>0)return!1;if(0===e.length)return!0;if("object"!=typeof e)return!0;for(var n in e)if(t.call(e,n))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(148);t.findClosestUnitsToTheNodeCenter=r.findClosestUnitsToTheNodeCenter,t.getClosestNodeToUnit=r.getClosestNodeToUnit,t.getBestUnitsByProperty=r.getBestUnitsByProperty},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(157);t.createNodes=function(){for(var e=[],t=0,n=0;n<r.MAP_WIDTH;n+=r.gridSize)for(var o=0;o<r.MAP_HEIGHT;o+=r.gridSize){var a=new i.default(t,n,o);e.push(a),t++}return e},t.createSearchMap=function(e){for(var t={},n=0,i=[],o=0;o<e.length;++o)i.push(e[o]),o<=e.length-2&&e[o+1].x!==n&&(t[n]=i,n+=r.gridSize,i=[]);return t[n]=i,t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(166);t.shuffleNodes=r.shuffleNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(3);t.addUnitIntoArray=function(e,n){var r=Object.assign([],n);return t.isUnitInArray(e,n)||r.push(e),r},t.deleteUnitFromArray=function(e,t){return t.filter(function(t){return t.id!==e.id})},t.deleteUnitFromArmy=function(e,t){return t.filter(function(t){return t.armyPosition.x!==e.armyPosition.x||t.armyPosition.y!==e.armyPosition.y})},t.getDistanceBetweenTwoUnitsInGrids=function(e,t){var n=e.currentNode.x,i=e.currentNode.y,o=t.currentNode.x,a=t.currentNode.y;return Math.abs(n-o)/r.gridSize+Math.abs(i-a)/r.gridSize},t.isUnitInArray=function(e,t){if(0!==t.length)for(var n=0,r=t;n<r.length;n++){if(r[n].id===e.id)return!0}return!1},t.getUnitById=function(e,t){void 0===t&&(t=i.units);for(var n=0,r=t;n<r.length;n++){var o=r[n];if(e===o.id)return o}},t.getUnitPositionInArray=function(e,t){for(var n=0;n<t.length;++n)if(t[n].id===e)return n;return null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(180);t.chooseUnitType=r.chooseUnitType;var i=n(193);t.onChooseUnit=i.onChooseUnit},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(181);t.Archers=r.default;var i=n(184);t.HeavyCavalry=i.default;var o=n(185);t.HeavyInfantry=o.default;var a=n(186);t.Hoplites=a.default;var s=n(187);t.LightCavalry=s.default;var l=n(188);t.LightInfantry=l.default;var u=n(189);t.Militia=u.default;var c=n(190);t.Peltasts=c.default;var d=n(191);t.Pikemen=d.default;var f=n(192);t.Scouts=f.default;var h=n(6);t.Unit=h.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(46),o=n(32),a=n(73);t.createUnit=function(e,t,n,s){if("player"===s||"computer"===s){var l;return l=a.chooseUnitType(e,t,n,s),r.addToUnits(l),o.drawUnit(l),i.incUnitId(),l}throw new Error("Unit cannot be controlled by "+s)},t.createDefaultUnit=function(e,t,n,r){if("player"===r||"computer"===r){return a.chooseUnitType(e,t,n,r)}throw new Error("Unit cannot be controlled by "+r)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31);t.attributesHeight=20,t.healthPointsHeight=10,t.iconHeight=r.UNIT_ICON_HEIGHT-(t.attributesHeight+t.healthPointsHeight),t.moveIconSrc="./src/img/icons/MoveIcon.png",t.fightIconSrc="./src/img/icons/Swords.png",t.swordIconSrc="./src/img/units/icons/sword.png",t.spearIconSrc="./src/img/units/icons/spear.png",t.spearAndShieldSrc="./src/img/units/icons/spearAndShield.png",t.movementIcon={width:30,height:t.attributesHeight},t.fightIcon={width:40,height:t.attributesHeight},t.arrowIcon={width:30,height:t.attributesHeight}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(75);t.defaultUnits=[];var i=["HeavyCavalry","HeavyInfantry","Hoplites","LightCavalry","LightInfantry","Militia","Pikemen","Scouts"];t.createDefaultUnits=function(){return new Promise(function(e){for(var n=0,o=i;n<o.length;n++){var a=o[n],s=r.createDefaultUnit(a,0,0,"player");t.defaultUnits.push(s)}e()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(32);t.drawUnit=r.drawUnit,t.redrawUnits=r.redrawUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(196);t.armourPenetration=r.armourPenetration},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(197);t.checkAttackSide=r.checkAttackSide},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(201);t.removeUnitFromEnemiesFightAgainst=r.removeUnitFromEnemiesFightAgainst,t.findUnitInFightAgainst=r.findUnitInFightAgainst},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(202);t.checkHealth=r.checkHealth;var i=n(86);t.isUnitFighting=i.isUnitFighting;var o=n(206);t.meleeAttack=o.meleeAttack;var a=n(207);t.meleeCombat=a.meleeCombat},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(203);t.removeUnit=r.removeUnit},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(204);t.assignCurrentlyChosenUnit=r.assignCurrentlyChosenUnit,t.addUnitToSpottedUnits=r.addUnitToSpottedUnits,t.removeUnitFromSpottedUnits=r.removeUnitFromSpottedUnits,t.incUnitId=r.incUnitId,t.addUnitIntoVisibleUnits=r.addUnitIntoVisibleUnits,t.removeUnitFromVisibleUnits=r.removeUnitFromVisibleUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.spottedUnits=[],t.addUnitToSpottedUnits=function(e){r.isUnitInArray(e,t.spottedUnits)||t.spottedUnits.push(e)},t.removeUnitFromSpottedUnits=function(e){r.isUnitInArray(e,t.spottedUnits)&&(t.spottedUnits=r.deleteObjectFromArray(e,t.spottedUnits))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.isUnitFighting=function(e){var t=!1,n=e.figthAgainst;r.isObjectEmpty(n.front)&&r.isObjectEmpty(n.rear)?0!==n.flank.length&&(t=!0):t=!0,t||e.setIsFightingToFalse()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(205);t.refreshment=r.refreshment},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomizeMeleeDamage=function(e){var t=e-Math.ceil(.2*e),n=e+Math.floor(.2*e);return Math.floor(Math.random()*(t-n+1))+n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(31),o=n(0),a=n(17),s=n(2);t.displayUnitIcons=function(){var e=i.UNIT_LEFT_PANEL_WIDTH,t=o.CANVAS_HEIGHT-i.UNIT_PANEL_HEIGHT;s.ctx.clearRect(e,t,i.UNIT_PANEL_WIDTH,i.UNIT_PANEL_HEIGHT);for(var n=0,l=r.playerUnits;n<l.length;n++){var u=l[n];a.drawUnitIcon(u,!1)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMinFScore=function(e){for(var t=0,n=1;n<e.length-1;++n)e[t].fScore>e[n].fScore&&(t=n);return e[t]},t.unclosedNeigbors=function(e,t){for(var n=[],r=0,i=e.neighbors;r<i.length;r++){for(var o=i[r],a=!1,s=0,l=t;s<l.length;s++){var u=l[s];o.x===u.x&&o.y===u.y&&(a=!0)}a||n.push(o)}return n},t.isObjectInMapKeys=function(e,t){for(var n=Array.from(t),r=!1,i=0;i<n.length;++i)n[i][0].x===e.x&&n[i][0].y===e.y&&(r=!0);return r},t.getNeighborDistance=function(e,t){var n=Math.abs(e.x-t.x),r=Math.abs(e.y-t.y);return 0!==n&&0!==r?14:10}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(27),o=n(16),a=n(1);t.drawPath=function(e,n,a){if(void 0===a&&(a=0),o.currentlyChosenUnit&&o.currentlyChosenUnit.id===e.id){t.clearPath(),0!=a&&(a-=1);for(var s=!0,l=a;l!=n.length-1;++l){var u=n[l].x+r.gridSize/2,c=n[l].y+r.gridSize/2,d=n[l+1].x+r.gridSize/2,f=n[l+1].y+r.gridSize/2;if(i.pathCtx.save(),i.pathCtx.strokeStyle="yellow",i.pathCtx.beginPath(),s?(i.pathCtx.moveTo(e.centerX,e.centerY),s=!1):i.pathCtx.moveTo(u,c),i.pathCtx.lineTo(d,f),i.pathCtx.stroke(),l==n.length-2){var h=Math.round(r.gridSize/4);i.pathCtx.beginPath(),i.pathCtx.arc(d,f,h,0,2*Math.PI),i.pathCtx.fill(),i.pathCtx.closePath()}i.pathCtx.restore()}}},t.clearPath=function(){i.pathCtx.clearRect(0,0,r.MAP_WIDTH,r.MAP_HEIGHT)},t.clearCurrentNode=function(e){var t=a.getNodeFromMap(e.x,e.y);i.pathCtx.clearRect(t.x,t.y,r.gridSize,r.gridSize)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(211);t.calculateChanceToGetOutOfCombat=r.calculateChanceToGetOutOfCombat,t.unitCanGetOutOfCombat=r.unitCanGetOutOfCombat},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(48),o=n(212);t.moveToNextNodeInPursueUnit=function(e,t,n,a,s,l,u,c){var d=n.x+.5*r.gridSize,f=n.y+.5*r.gridSize,h=a.x+.5*r.gridSize,g=a.y+.5*r.gridSize,y=i.findPathFromOneNodeToAnother(d,f,h,g);o.makeMovementInPursueUnit(e,t,n,a,y,u,s,l,0,c)},t.moveToNextNodeInUpdateUnit=function(e,t,n,a,s,l,u){var c=t.x+.5*r.gridSize,d=t.y+.5*r.gridSize,f=n.x+.5*r.gridSize,h=n.y+.5*r.gridSize,g=i.findPathFromOneNodeToAnother(c,d,f,h);o.makeMovementInUpdateUnit(e,t,n,g,l,a,s,0,u)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(17);t.stopMoving=function(e,t){e.setIsMovingToFalse(),e.setCurrentNode(t),e.setNextNode(t),r.drawUnitIcon(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(213);t.getPriorityUnit=r.getPriorityUnit,t.unitCanMoveToTheNode=r.unitCanMoveToTheNode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(214);t.shuffleUnits=r.shuffleUnits;var i=n(215);t.shuffleID=i.shuffleID},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(216),i=n(3),o=n(8);t.getInterceptedEnemies=function(e){var t;"player"===e.controlBy?t=Object.assign([],i.computerUnits):"computer"===e.controlBy&&(t=Object.assign([],i.playerUnits));for(var n=[],a=r.getInterceptionNodes(e),s=0,l=t;s<l.length;s++)for(var u=l[s],c=0,d=a;c<d.length;c++){var f=d[c];u.currentNode.x==f.x&&u.currentNode.y===f.y&&(o.isUnitInArray(u,n)||n.push(u))}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.getBlockedEnemies=function(e){var t,n=[];"player"===e.controlBy?t=Object.assign([],r.computerUnits):"computer"===e.controlBy&&(t=Object.assign([],r.playerUnits));for(var i=0,o=t;i<o.length;i++){var a=o[i];e.nextNode.x===a.nextNode.x&&e.nextNode.y===a.nextNode.y&&n.push(a)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(224),i=n(225),o=n(51),a=n(52),s=n(3),l=n(22),u=n(9),c=n(226),d=n(227),f=n(13);t.calculateTotalComputerPower=function(){var e=new f.default;a.computerPower.resetAllProperties();for(var n=0,r=s.computerUnits;n<r.length;n++){var i=r[n];t.decomposeUnitProps(i,"computer"),t.decomposePower(e,i)}return e},t.calculateTotalPlayerPower=function(){var e=new f.default;o.playerPower.resetAllProperties();for(var n=0,r=s.playerUnits;n<r.length;n++){var i=r[n];t.decomposeUnitProps(i),t.decomposePower(e,i)}return e},t.calculateRevealedUnitsPower=function(){d.revealedUnitsPower.resetAllProperties();for(var e=0,n=l.revealedUnits;e<n.length;e++){var r=n[e];t.decomposeUnitProps(r,"revealedUnits")}},t.calculateVisiblePlayerPower=function(){c.visiblePlayerUnitsPower.resetAllProperties();for(var e=0,n=u.visibleForComputerUnits;e<n.length;e++){var r=n[e];t.decomposeUnitProps(r,"visiblePlayerUnits")}},t.calculateInitialComputerPower=function(){r.initialComputerPower.resetAllProperties();for(var e=0,n=s.computerUnits;e<n.length;e++){var i=n[e];t.decomposeUnitProps(i,"initialComputer")}},t.calculateInitialPlayerPower=function(){i.initialPlayerPower.resetAllProperties();for(var e=0,n=s.playerUnits;e<n.length;e++){var r=n[e];t.decomposeUnitProps(r,"initialPlayer")}},t.calculateTotalPower=function(){t.calculateTotalComputerPower(),t.calculateTotalPlayerPower()},t.calculateInitialPower=function(){t.calculateInitialComputerPower(),t.calculateInitialPlayerPower()},t.decomposeUnitProps=function(e,n){void 0===n&&(n="player"),"visiblePlayerUnits"===n&&t.decomposePower(c.visiblePlayerUnitsPower,e),"player"===n?t.decomposePower(o.playerPower,e):"computer"===n?t.decomposePower(a.computerPower,e):"initialComputer"===n?t.decomposePower(r.initialComputerPower,e):"initialPlayer"===n?t.decomposePower(i.initialPlayerPower,e):"revealedUnits"===n&&t.decomposePower(d.revealedUnitsPower,e)},t.decomposePower=function(e,t){e.incrementQuantity(),e.addHealth(t.health),e.addSpeed(t.speed),e.addArmour(t.armour),e.addMeleeDamage(t.meleeDamage),e.addMissileDamage(t.missileDamage),e.addDiscipline(t.discipline),e.addMorale(t.morale),e.addCondition(t.condition)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomValueInRange=function(e,t){if(e>=t)throw new Error("invalid min or max");if(e>0&&e<1&&t>0&&t<1){var n=Math.round(100*e),r=Math.round(100*t);return.01*(Math.floor(Math.random()*(r-n+1))+n)}return Math.floor(Math.random()*(t-e+1))+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.Attack=0]="Attack",e[e.BeCloseToUnit=1]="BeCloseToUnit",e[e.MoveToNode=2]="MoveToNode"}(t.Command||(t.Command={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35);t.getClosestUnitToNode=r.getClosestUnitToNode,t.getClosestUnitToOtherUnit=r.getClosestUnitToOtherUnit,t.getBestUnitByProperty=r.getBestUnitByProperty,t.getWorstUnitByProperty=r.getWorstUnitByProperty,t.getBestEnemyByProperty=r.getBestEnemyByProperty,t.getWorstEnemyByProperty=r.getWorstEnemyByProperty,t.getNotFightingUnits=r.getNotFightingUnits,t.getClosestEnemyToUnit=r.getClosestEnemyToUnit,t.getFreeUnits=r.getFreeUnits,t.getUnitsByTask=r.getUnitsByTask,t.getUnitsByPropertyValue=r.getUnitsByPropertyValue,t.getScoutsNumber=r.getScoutsNumber,t.getUnitsWhereValue=r.getUnitsWhereValue},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calculateTotalUnitsWeight=function(e){for(var t=0,n=0,r=e;n<r.length;n++){t+=r[n].weight}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(53),o=n(23),a=n(36),s=n(9),l=n(5),u=n(55),c=n(50);t.beCloseTo=function(e,n,d,f,h){if(void 0===f&&(f=!1),void 0===h&&(h=!1),d===u.currentCommandNumber){if(h||!e.isFighting&&!e.isMoving){var g=r.getDistanceBetweenTwoUnitsInGrids(e,n);if(n.isFighting){if(0!=n.figthAgainst.all.length){var y=i.getRandomUnit(n.figthAgainst.all);o.attackEnemy(e,y)}}else if(f&&a.getSurroundedUnits(n,s.visibleForComputerUnits,3).length>0){var v=a.getSurroundedUnits(n,s.visibleForComputerUnits,3);y=i.getRandomUnit(v);o.attackEnemy(e,y)}else if(g>=2){var m=r.getSurroundedNodes(n,2),p=l.getRandomNode(m);c.moveTo(e,p.x,p.y)}}setTimeout(function(){t.beCloseTo(e,n,d,f)},2e3)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(56),i=n(37);t.isUnitSelectedInRoster=function(e,t){for(var n=0,o=i.roster;n<o.length;n++){var a=o[n],s=a.x,l=s+r.rosterImgWidth,u=a.y,c=u+r.rosterImgHeight;if(e>=s&&e<l&&t>=u&&t<c)return a}return null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(256);t.armyLayoutHeight=r.armyLayoutHeight,t.armyLayoutWidth=r.armyLayoutWidth;var i=n(258);t.infoLayoutHeight=i.infoLayoutHeight,t.infoLayoutWidth=i.infoLayoutWidth;var o=n(260);t.unitRosterHeight=o.unitRosterHeight,t.unitRosterWidth=o.unitRosterWidth;var a=n(262);t.startBattleStartY=a.startBattleStartY,t.startBattleHeight=a.startBattleHeight,t.startBattleWidth=a.startBattleWidth;var s=n(107);t.titleHeight=s.titleHeight},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(264);t.titleHeight=r.titleHeight},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hoveredUnit=null,t.changeHoveredUnit=function(e){e&&(t.hoveredUnit=e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(110);t.displayArmy=r.displayArmy},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(7),o=n(14),a=n(4),s=n(24),l=n(21);t.displayArmy=function(e){void 0===e&&(e=1);var n=[];if((n="player"===i.side?o.playerArmy:o.computerArmy).length>=1&&n.length>=e){var u=n[e-1],c=u.armyPosition.x,d=u.armyPosition.y;r.mainMenuCtx.drawImage(l.unitIconImages[u.name],c,d,s.armyImgWidth,s.armyImgHeight),e++,t.displayArmy(e)}else{var f=n.length,h=s.armyImgWidth+10,g=s.armyImgHeight+15,y=a.unitRosterWidth+20;c=void 0,d=void 0;if(0===n.length)c=a.unitRosterWidth+20,d=a.titleHeight+60;else{var v=n[n.length-1].armyPosition.x,m=n[n.length-1].armyPosition.y;f%5==0?(c=y,d=m+g):(c=v+h,d=m)}e<=10?(r.mainMenuCtx.fillStyle="#fff",r.mainMenuCtx.fillRect(c,d,s.armyImgWidth,s.armyImgHeight),r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.strokeRect(c,d,s.armyImgWidth,s.armyImgHeight),t.emptyBox={i:e,x:c,y:d,filled:!1}):t.emptyBox={i:e,x:c,y:d,filled:!0}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(274);t.drawRemoveIcon=r.drawRemoveIcon},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),i=n(14),o=n(24);t.isUnitShouldBeRemoved=function(e,t){for(var n=0,a="player"===r.side?i.playerArmy:i.computerArmy;n<a.length;n++){var s=a[n],l=s.armyPosition.x+o.armyImgWidth-15,u=s.armyPosition.x+o.armyImgWidth-5,c=s.armyPosition.y+4,d=s.armyPosition.y+15;if(e>=l&&e<u&&t>=c&&t<d)return s}return null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(280);t.drawMoneyBox=r.drawMoneyBox},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(282);t.changeTotalGold=r.changeTotalGold,t.fillTotalGold=r.fillTotalGold,t.showTotalGold=r.showTotalGold},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(40);t.displayChosenUnits=r.displayChosenUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(292);t.drawBottomLayout=r.drawBottomLayout;var i=n(117);t.fillLayout=i.fillLayout},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(2);t.fillLayout=function(){i.mainMenuCtx.clearRect(0,r.startBattleStartY,r.startBattleWidth,r.startBattleHeight),i.mainMenuCtx.fillStyle="#2c2f33",i.mainMenuCtx.fillRect(0,r.startBattleStartY,r.startBattleWidth,r.startBattleWidth)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15);t.onChooseBattleSettings=function(e,t){var n=r.battleSettingsX,i=r.battleSettingsX+r.width,o=r.battleSettingsY,a=r.battleSettingsY+r.height;return e>=n&&e<i&&t>=o&&t<a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15);t.onChooseUnitInfo=function(e,t){var n=r.unitInfoX,i=r.unitInfoX+r.width,o=r.unitInfoY,a=r.unitInfoY+r.height;return e>=n&&e<i&&t>=o&&t<a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(299);t.displayInfo=r.displayInfo},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(122);t.battleSettingSwitcher=r.battleSettingSwitcher;var i=n(300);t.showSwither=i.showSwither;var o=n(123);t.unitInfoSwitcher=o.unitInfoSwitcher},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(15),o=n(39);t.battleSettingSwitcher=function(){o.showBattleSettings?r.mainMenuCtx.fillStyle="#fff":r.mainMenuCtx.fillStyle="#cdd1d6",r.mainMenuCtx.fillRect(i.battleSettingsX,i.battleSettingsY,i.width,i.height),r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.strokeRect(i.battleSettingsX,i.battleSettingsY,i.width,i.height),r.mainMenuCtx.font="24px serif",r.mainMenuCtx.textAlign="left",r.mainMenuCtx.fillText("Battle Settings",i.battleSettingsX+5,i.battleSettingsY+20)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(15),o=n(39);t.unitInfoSwitcher=function(){o.showUnitInfo?r.mainMenuCtx.fillStyle="#fff":r.mainMenuCtx.fillStyle="#cdd1d6",r.mainMenuCtx.fillRect(i.unitInfoX,i.unitInfoY,i.width,i.height),r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.strokeRect(i.unitInfoX,i.unitInfoY,i.width,i.height),r.mainMenuCtx.font="24px serif",r.mainMenuCtx.textAlign="left",r.mainMenuCtx.fillText("Unit Info",i.unitInfoX+35,i.unitInfoY+20)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(27),i=n(18),o=n(0);t.drawLoadingCanvas=function(){i.loadingCanvas.style.zIndex="7",r.loadingCtx.fillStyle="#ccc",r.loadingCtx.fillRect(0,0,o.MAP_WIDTH,o.CANVAS_HEIGHT),r.loadingCtx.font="48px serif",r.loadingCtx.fillStyle="#000";var e=o.MAP_WIDTH/2-100,t=o.CANVAS_HEIGHT/2-50;r.loadingCtx.fillText("Loading...",e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(313);t.deleteNodeFromComputerNodes=r.deleteNodeFromComputerNodes,t.deleteNodeFromPlayerNodes=r.deleteNodeFromPlayerNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1);t.computerUnitsNodes=[],t.initializeComputerUnitsNodes=function(){return new Promise(function(e){for(var n=r.MAP_WIDTH-2*r.gridSize,o=r.MAP_WIDTH,a=r.MAP_HEIGHT,s=n;s<=o;s+=r.gridSize)for(var l=0;l<=a;l+=r.gridSize){var u=i.getNodeFromMap(s,l);u&&t.computerUnitsNodes.push(u)}e()})},t.deleteNodeFromComputerNodes=function(e){e&&(t.computerUnitsNodes=i.deleteObjectFromArray(e,t.computerUnitsNodes))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1);t.playerUnitsNodes=[],t.initializePlayerUnitsNodes=function(){return new Promise(function(e){for(var n=2*r.gridSize,o=r.MAP_HEIGHT,a=0;a<=n;a+=r.gridSize)for(var s=0;s<=o;s+=r.gridSize){var l=i.getNodeFromMap(a,s);l&&t.playerUnitsNodes.push(l)}e()})},t.deleteNodeFromPlayerNodes=function(e){e&&(t.playerUnitsNodes=i.deleteObjectFromArray(e,t.playerUnitsNodes))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(26).launchGame()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(66);t.launchBattle=r.launchBattle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.auxiliaryCanvas=document.getElementById("auxiliary"),t.auxiliaryCanvas&&(t.auxiliaryCanvas.width=r.MAP_WIDTH,t.auxiliaryCanvas.height=r.CANVAS_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAP_WIDTH=1520,t.MAP_HEIGHT=600,t.CANVAS_HEIGHT=720},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gridSize=40},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(43);t.mainMenuMode=r.mainMenuMode,t.setBattleMode=r.setBattleMode,t.setMainMenuMode=r.setMainMenuMode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.backgroundCanvas=document.getElementById("background"),t.backgroundCanvas&&(t.backgroundCanvas.width=r.MAP_WIDTH,t.backgroundCanvas.height=r.MAP_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.canvas=document.getElementById("canvas"),t.canvas&&(t.canvas.width=r.MAP_WIDTH,t.canvas.height=r.CANVAS_HEIGHT,t.canvas.style.border="1px solid")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.terrain=document.getElementById("terrain"),t.terrain&&(t.terrain.width=r.MAP_WIDTH,t.terrain.height=r.MAP_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.dragAndDropCanvas=document.getElementById("dragAndDrop"),t.dragAndDropCanvas&&(t.dragAndDropCanvas.width=r.MAP_WIDTH,t.dragAndDropCanvas.height=r.CANVAS_HEIGHT)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.mainMenu=document.getElementById("mainMenu"),t.mainMenu&&(t.mainMenu.width=r.MAP_WIDTH,t.mainMenu.height=r.CANVAS_HEIGHT,t.mainMenu.style.border="1px solid")},function(e,t,n){"use strict";n.r(t);var r=n(67);n.d(t,"loadImage",function(){return r.loadImage})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(141);t.addNodeIntoArray=r.addNodeIntoArray},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(142);t.addNodeIntoArray=function(e,t){var n=Object.assign([],t);return r.isObjectInArray(e,t)||n.push(e),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(68);t.deleteObjectFromArray=r.deleteObjectFromArray,t.isObjectInArray=r.isObjectInArray,t.isObjectEmpty=r.isObjectEmpty},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(144);t.getDistanceBetweenUnitAndNodeInGrids=r.getDistanceBetweenUnitAndNodeInGrids,t.getDistanceBetweenTwoNodesInGrids=r.getDistanceBetweenTwoNodesInGrids},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(42);t.getDistanceBetweenUnitAndNodeInGrids=function(e,t){var n=t.x,i=t.y,o=e.currentNode.x,a=e.currentNode.y;return Math.abs(o-n)/r.gridSize+Math.abs(a-i)/r.gridSize},t.getDistanceBetweenTwoNodesInGrids=function(e,t){var n=e.x,i=e.y,o=t.x,a=t.y;return Math.abs(n-o)/r.gridSize+Math.abs(i-a)/r.gridSize}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(146);t.getNodeFromArray=r.getNodeFromArray;var i=n(147);t.getClosestToEnemySideNodes=i.getClosestToEnemySideNodes,t.getClosestToEnemyNodes=i.getClosestToEnemyNodes;var o=n(149);t.getFarthestNodeFromEnemy=o.getFarthestNodeFromEnemy,t.getFarthestXNodes=o.getFarthestXNodes;var a=n(19);t.getNodeFromMap=a.getNodeFromMap;var s=n(163);t.getMinValueFromNodes=s.getMinValueFromNodes,t.getMaxValueFromNodes=s.getMaxValueFromNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getNodeFromArray=function(e,t){for(var n=0,r=t;n<r.length;n++){var i=r[n];if(i.x===e.x&&i.y&&e.y)return i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(69),o=n(28);t.getClosestToEnemySideNodes=function(e){for(var t=[],n=r.getMinValueFromNodes("x",e),i=0,o=e;i<o.length;i++){var a=o[i];a.x===n&&t.push(a)}return t},t.getClosestToEnemyNodes=function(e){var n=[];if(0===o.hidingEnemies.length)n=t.getClosestToEnemySideNodes(e);else for(var r=0,a=o.hidingEnemies;r<a.length;r++){var s=a[r],l=i.getClosestNodeToUnit(s,e);n.push(l)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(42),i=n(5);t.getClosestNodeToUnit=function(e,t){for(var n=t[0],r=1;r<t.length;++r){var o=i.getDistanceBetweenUnitAndNodeInGrids(e,n);i.getDistanceBetweenUnitAndNodeInGrids(e,t[r])<o&&(n=t[r])}return n},t.getBestUnitsByProperty=function(e,t){for(var n=Object.assign([],e),r=[],i=n[0],o=0;o<n.length;++o)i[t]<n[o][t]&&(i=n[o]);for(var a=0,s=n;a<s.length;a++){var l=s[a];l[t]===i[t]&&r.push(l)}return r},t.findClosestUnitsToTheNodeCenter=function(e,t){var n,i=Object.assign([],t),o=e.x+.5*r.gridSize,a=e.y+.5*r.gridSize,s=[],l=i[0];if(i.length>1)for(var u=1;u<i.length;++u){var c=l.centerX,d=l.centerY,f=i[u].centerX,h=i[u].centerY,g=Math.abs(c-o),y=Math.abs(d-a),v=Math.abs(f-o),m=Math.abs(h-a),p=Math.sqrt(Math.pow(g,2)+Math.pow(y,2));n=p,(_=Math.sqrt(Math.pow(v,2)+Math.pow(m,2)))<p&&(l=i[u],n=_)}for(var M=0,U=i;M<U.length;M++){var _,b=U[M];f=b.centerX,h=b.centerY,v=Math.abs(f-o),m=Math.abs(h-a);(_=Math.sqrt(Math.pow(v,2)+Math.pow(m,2)))===n&&s.push(b)}return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.getFarthestNodeFromEnemy=function(e,t){for(var n=t[0],i=0;i<t.length;++i){var o=r.getDistanceBetweenUnitAndNodeInGrids(e,n);r.getDistanceBetweenUnitAndNodeInGrids(e,t[i])>o&&(n=t[i])}return n},t.getFarthestXNodes=function(e){for(var t=[],n=r.getMinValueFromNodes("x",e),i=r.getMaxValueFromNodes("x",e),o=0,a=e;o<a.length;o++){var s=a[o];s.x!==n&&s.x!==i||t.push(s)}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(151);t.clearMap=r.clearMap},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(0);t.clearMap=function(){r.ctx.clearRect(0,0,i.MAP_WIDTH,i.CANVAS_HEIGHT)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(153);t.drawGrid=r.drawGrid},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(0);t.drawGrid=function(){for(var e=0;e<=i.MAP_HEIGHT;e+=i.gridSize)for(var t=0;t<=i.MAP_WIDTH;t+=i.gridSize)r.ctx.strokeRect(t,e,i.gridSize,i.gridSize)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(155);t.addNeighbors=r.addNeighbors,t.neighbors=r.neighbors},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.neighbors=function(e,t){for(var n=[],i=0,o=[{x:-r.gridSize,y:-r.gridSize},{x:0,y:-r.gridSize,distance:10},{x:r.gridSize,y:-r.gridSize},{x:-r.gridSize,y:0},{x:r.gridSize,y:0},{x:-r.gridSize,y:r.gridSize},{x:0,y:r.gridSize},{x:r.gridSize,y:r.gridSize}];i<o.length;i++){var a=o[i],s={x:t.x+a.x,y:t.y+a.y};if(s.x>=0&&s.x<=r.MAP_WIDTH&&s.y>=0&&s.y<=r.MAP_HEIGHT){for(var l=void 0,u=0,c=e;u<c.length;u++){var d=c[u];s.x===d.x&&s.y===d.y&&(l=d)}l&&n.push(l)}}return n},t.addNeighbors=function(e){return new Promise(function(n){for(var r=0,i=e;r<i.length;r++){var o=i[r],a=t.neighbors(e,o);o.neighbors=a}n()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(70);t.createNodes=r.createNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=function(){return function(e,t,n){if(t%r.gridSize!=0||n%r.gridSize!=0)throw new Error("Node coordinates do not corresponds to map grid size");if(!(t>=0&&t<=r.MAP_WIDTH&&n>=0&&n<=r.MAP_HEIGHT))throw new Error("Node is out of bound");this.id=e,this.x=t,this.y=n}}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(159);t.createOneObstacle=r.createOneObstacle;var i=n(160);t.createObstacles=i.createObstacles;var o=n(161);t.createUnitObstacle=o.createUnitObstacle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(1);t.createOneObstacle=function(e,t,n,o){void 0===o&&(o="forest");var a={x:t,y:n};return"forest"===o?i.drawObstacle(a.x,a.y,r.gridSize,r.gridSize,"./src/img/terrain/trees.png"):"mountain"===o?i.drawObstacle(a.x,a.y,r.gridSize,r.gridSize,"./src/img/terrain/mountain.png"):"river"===o&&i.drawObstacle(a.x,a.y,r.gridSize,r.gridSize,"./src/img/terrain/river.jpg"),i.deleteObjectFromArray(a,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(0),o=n(1);t.createObstacles=function(e,t,n,a,s){void 0===s&&(s="forest");for(var l=r.initialMap,u=e;u<=t;u+=i.gridSize)for(var c=n;c<=a;c+=i.gridSize){var d={x:u,y:c};l=o.deleteObjectFromArray(d,l);var f=void 0;"forest"===s?f="./src/img/terrain/trees.png":"mountain"===s?f="/src/img/terrain/mountain.png":"river"===s&&(f="./src/img/terrain/river.jpg"),o.drawObstacle(d.x,d.y,i.gridSize,i.gridSize,f)}return l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.createUnitObstacle=function(e,t,n){var i={x:t,y:n};return r.deleteObjectFromArray(i,e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(10);t.findXInSearchMap=function(e,n,o){if(n>=e){var a=Math.floor(e+(n-e)/2),s=a*r.gridSize;if(o>=s&&o<s+r.gridSize)return i.searchMap[s];if(o===s+r.gridSize)return i.searchMap[s+r.gridSize];if(s>o)return t.findXInSearchMap(e,a-1,o);if(s<o)return t.findXInSearchMap(a+1,n,o)}},t.coordinateYBinarySearch=function(e,n,i,o){if(n>=e){var a=Math.floor(e+(n-e)/2),s=o[a];if(!s)return null;if(i>=s.y&&i<s.y+r.gridSize)return o[a];if(i===s.y+r.gridSize)return o[a+1];if(s.y>i)return t.coordinateYBinarySearch(e,a-1,i,o);if(s.y<i)return t.coordinateYBinarySearch(a+1,n,i,o)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getMinValueFromNodes=function(e,t){for(var n=t[0],r=1;r<t.length;++r)n[e]>t[r][e]&&(n=t[r]);return n[e]},t.getMaxValueFromNodes=function(e,t){for(var n=t[0],r=1;r<t.length;++r)n[e]<t[r][e]&&(n=t[r]);return n[e]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(165);t.getRandomNode=r.getRandomNode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(71);t.getRandomNode=function(e){return r.shuffleNodes(e)[0]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t,n){var r=e[t];e[t]=e[n],e[n]=r};t.assignRandomValue=function(e){for(var t=0,n=e;t<n.length;t++){var r=n[t],i=Math.random();r.randomValue=i}return e},t.shuffleNodes=function(e){for(var n=Object.assign([],e),i=t.assignRandomValue(n),o=0;o<i.length;++o){for(var a=o,s=o+1;s<i.length;++s)i[s].randomValue===i[a].randomValue&&(a=s),i[s].randomValue<i[a].randomValue&&(a=s);a!==o&&r(i,a,o)}for(var l=[],u=0,c=i;u<c.length;u++){var d=c[u];delete d.randomValue,l.push(d)}return l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(168);t.getSurroundedBlockedNodes=r.getSurroundedBlockedNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(29),i=n(3),o=n(1);t.getSurroundedBlockedNodes=function(e){var t,n=r.getSurroundedNodes(e,1),a=[];t="player"===e.controlBy?i.playerUnits:i.computerUnits;for(var s=o.deleteUnitFromArray(e,t),l=0,u=n;l<u.length;l++)for(var c=u[l],d=0,f=s;d<f.length;d++){var h=f[d];h.currentNode.x===c.x&&h.currentNode.y===c.y&&(a=o.addNodeIntoArray(c,a)),h.nextNode.x===c.x&&h.nextNode.y===c.y&&(a=o.addNodeIntoArray(c,a))}return a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(30);t.getSurroundedEnemies=function(e,t){void 0===t&&(t=1);var n=[],o=[];o="computer"===e.controlBy?Object.assign([],r.playerUnits):Object.assign([],r.computerUnits);for(var a=0,s=i.getSurroundedNodes(e,t);a<s.length;a++)for(var l=s[a],u=0,c=o;u<c.length;u++){var d=c[u];l.x===d.x&&l.y===d.y&&n.push(d)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(30),o=n(19),a=n(8);t.getSurroundedAllies=function(e){var t,n=[],s=[];s="computer"===e.controlBy?Object.assign([],r.computerUnits):Object.assign([],r.playerUnits),t=a.deleteUnitFromArray(e,s);for(var l=0,u=i.getSurroundedNodes(e,3);l<u.length;l++)for(var c=u[l],d=0,f=t;d<f.length;d++){var h=f[d],g=o.getNodeFromMap(h.x,h.y);c.x===g.x&&c.y===g.y&&n.push(h)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(172);t.getUnitsMinProperty=r.getUnitsMinProperty,t.getUnitsMaxProperty=r.getUnitsMaxProperty;var i=n(174);t.anotherUnitIsOnTheWay=i.anotherUnitIsOnTheWay;var o=n(8);t.addUnitIntoArray=o.addUnitIntoArray,t.deleteUnitFromArray=o.deleteUnitFromArray,t.deleteUnitFromArmy=o.deleteUnitFromArmy,t.getDistanceBetweenTwoUnitsInGrids=o.getDistanceBetweenTwoUnitsInGrids,t.isUnitInArray=o.isUnitInArray},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(173);t.getUnitsMinProperty=r.getUnitsMinProperty,t.getUnitsMaxProperty=r.getUnitsMaxProperty},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getUnitsMinProperty=function(e,t){if(t.length>0){for(var n=t[0][e],r=1;r<t.length;++r)n>t[r][e]&&(n=t[r][e]);return n}},t.getUnitsMaxProperty=function(e,t){if(t.length>0){for(var n=t[0][e],r=1;r<t.length;++r)n<t[r][e]&&(n=t[r][e]);return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(175);t.anotherUnitIsOnTheWay=r.anotherUnitIsOnTheWay;var i=n(176);t.getUnitsOnTheNode=i.getUnitsOnTheNode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8),i=n(3);t.anotherUnitIsOnTheWay=function(e){for(var t=Object.assign([],i.units),n=r.deleteUnitFromArray(e,t),o=e.nextNode,a=0,s=n;a<s.length;a++){var l=s[a];if(o.x===l.currentNode.x&&o.y===l.currentNode.y)return!0;if(o.x===l.nextNode.x&&o.y===l.nextNode.y)return!0}return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8);t.getUnitsOnTheNode=function(e,t,n){void 0===n&&(n=null);Object.assign([],t);var i=Object.assign([],t);n&&(i=r.deleteUnitFromArray(n,t));for(var o=e.x,a=e.y,s=[],l=0,u=i;l<u.length;l++){var c=u[l],d=c.currentNode.x,f=c.currentNode.y,h=c.nextNode.x,g=c.nextNode.y;d===o&&f===a?s.push(c):h===o&&g===a&&s.push(c)}return s}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(178);t.drawBackground=r.drawBackground;var i=n(179);t.drawObstacle=i.drawObstacle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(1),o=n(0);t.drawBackground=function(e){i.loadImage(e,function(e,t){r.backgroundCtx.drawImage(t,0,0,o.MAP_WIDTH,o.MAP_HEIGHT)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(1);t.drawObstacle=function(e,t,n,o,a){i.loadImage(a,function(i,a){r.terrainCtx.drawImage(a,e,t,n,o)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(74),i=n(46);t.chooseUnitType=function(e,t,n,o){if("archers"===e||"Archers"===e)return new r.Archers(i.unitId,t,n,o);if("heavyCavalry"===e||"HeavyCavalry"===e)return new r.HeavyCavalry(i.unitId,t,n,o);if("heavyInfantry"===e||"HeavyInfantry"===e)return new r.HeavyInfantry(i.unitId,t,n,o);if("hoplites"===e||"Hoplites"===e)return new r.Hoplites(i.unitId,t,n,o);if("lightCavalry"===e||"LightCavalry"===e)return new r.LightCavalry(i.unitId,t,n,o);if("lightInfantry"===e||"LightInfantry"===e)return new r.LightInfantry(i.unitId,t,n,o);if("militia"===e||"Militia"===e)return new r.Militia(i.unitId,t,n,o);if("peltasts"===e||"Peltasts"===e)return new r.Peltasts(i.unitId,t,n,o);if("pikemen"===e||"Pikemen"===e)return new r.Pikemen(i.unitId,t,n,o);if("scouts"===e||"Scouts"===e)return new r.Scouts(i.unitId,t,n,o);throw new Error("No existing unit type "+e)}},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="High range skirmishers armed with bows",o.cost=50,o.advantageOver=["Pikemen","Hoplites"],o.vulnerableAgainst=["LightCavalry","HeavyCavalry"],o.name="Archers",o.type="skirmishers",o.imgSrc="./src/img/units/pikemen.jpg",o.health=25,o.speed=25,o.armour=2,o.range=8,o.mobility=4,o.meleeDamage=7,o.missileDamage=7,o.shotsRemained=10,o.charge=1,o.discipline=40,o.weight=20,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(183);t.radius=r.radius},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.radius=13},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="heavy and cavalry aimed to break through enemy's lines",o.cost=150,o.advantageOver=["Archers","Peltasts"],o.vulnerableAgainst=["Pikemen","Hoplites"],o.name="HeavyCavalry",o.type="cavalry",o.imgSrc="./src/img/units/pikemen.jpg",o.health=150,o.speed=35,o.armour=8,o.range=0,o.mobility=5,o.meleeDamage=12,o.missileDamage=0,o.charge=8,o.discipline=70,o.initialWeight=100,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="Heavily armed infantry trained to mount frontal assaults",o.cost=70,o.advantageOver=["LightInfantry","Militia"],o.vulnerableAgainst=[],o.name="HeavyInfantry",o.type="infantry",o.imgSrc="./src/img/units/pikemen.jpg",o.health=170,o.speed=18,o.armour=8,o.range=0,o.mobility=3,o.meleeDamage=12,o.missileDamage=0,o.charge=4,o.discipline=70,o.initialWeight=60,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="Infantry armed with spears and shields",o.cost=80,o.advantageOver=["LightCavalry","HeavyCavalry"],o.vulnerableAgainst=["Archers","Peltasts"],o.name="Hoplites",o.type="spearmen",o.imgSrc="./src/img/units/hoplites.jpg",o.health=190,o.speed=12,o.armour=7,o.range=0,o.mobility=1,o.meleeDamage=16,o.missileDamage=0,o.charge=1,o.discipline=90,o.initialWeight=70,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="Light and fast cavalry",o.cost=90,o.advantageOver=["Archers","Peltasts"],o.vulnerableAgainst=["Hoplites","Pikemen"],o.name="LightCavalry",o.type="cavalry",o.imgSrc="./src/img/units/lightCavalry.png",o.health=80,o.speed=40,o.armour=2,o.range=0,o.mobility=7,o.meleeDamage=8,o.missileDamage=0,o.charge=6,o.discipline=40,o.initialWeight=80,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="Frontline soldiers trained for hand-to-hand combat with their enemies",o.cost=30,o.advantageOver=[],o.vulnerableAgainst=[],o.name="LightInfantry",o.type="infantry",o.imgSrc="./src/img/units/pikemen.jpg",o.health=80,o.speed=22,o.armour=2,o.range=0,o.mobility=5,o.meleeDamage=8,o.missileDamage=0,o.charge=2,o.discipline=30,o.initialWeight=40,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="A military force that is raised from the civil population to supplement a regular army in an emergency.",o.cost=20,o.advantageOver=[],o.vulnerableAgainst=[],o.name="Militia",o.type="infantry",o.imgSrc="./src/img/units/pikemen.jpg",o.health=120,o.speed=25,o.armour=1,o.range=0,o.mobility=3,o.meleeDamage=7,o.missileDamage=0,o.charge=1,o.discipline=10,o.initialWeight=30,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="Low range skirmishers armed with javelins",o.cost=50,o.advantageOver=["Hoplites","Pikemen"],o.vulnerableAgainst=["LightCavalry","HeavyCavalry"],o.name="Peltasts",o.type="skirmishers",o.imgSrc="./src/img/units/pikemen.jpg",o.health=50,o.speed=22,o.armour=4,o.range=3,o.ammunition=10,o.mobility=6,o.meleeDamage=4,o.missileDamage=12,o.shotsRemained=5,o.charge=1,o.discipline=50,o.initialWeight=25,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="Infantry armed with long spears",o.cost=80,o.advantageOver=["HeavyCavalry","LightCavalry"],o.vulnerableAgainst=["Archers","Peltasts"],o.name="Pikemen",o.type="spearmen",o.imgSrc="./src/img/units/pikemen.jpg",o.health=120,o.speed=10,o.armour=4,o.range=0,o.mobility=1,o.meleeDamage=24,o.missileDamage=0,o.charge=1,o.discipline=80,o.initialWeight=90,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,n,r,i){void 0===i&&(i="player");var o=e.call(this,t,n,r,i)||this;return o.description="small and mobile band that inteded to descover the map",o.cost=20,o.advantageOver=[],o.vulnerableAgainst=[],o.name="Scouts",o.type="scouts",o.imgSrc="./src/img/units/pikemen.jpg",o.health=60,o.speed=27,o.armour=1,o.range=0,o.mobility=9,o.meleeDamage=7,o.missileDamage=0,o.charge=1,o.discipline=10,o.initialWeight=20,o.weight=o.initialWeight,o.initialHealth=o.health,o}return r(t,e),t}(n(6).default);t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(16),o=n(3),a=n(31);t.onChooseUnit=function(e,t,n){for(var s=null,l=0,u=e;l<u.length;l++){var c=(p=u[l]).x+r.gridSize,d=p.y+r.gridSize;if(t>=p.x&&t<c&&n>=p.y&&n<d){console.log("unit",p.name," was chosen"),p.isCurrentlyChosen=!0,s=p;break}}for(var f=a.UNIT_LEFT_PANEL_WIDTH,h=r.CANVAS_HEIGHT-a.UNIT_PANEL_HEIGHT,g=h+a.UNIT_ICON_HEIGHT,y=0;y<o.playerUnits.length;++y){var v=f+a.UNIT_ICON_WIDTH*(y+1),m=v+a.UNIT_ICON_WIDTH;if(t>=v&&t<m&&n>=h&&n<g){var p;(p=o.playerUnits[y]).isCurrentlyChosen=!0,s=p;break}}i.assignCurrentlyChosenUnit(s)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(75);t.createUnit=r.createUnit},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(79);t.armourPenetration=r.armourPenetration;var i=n(80);t.checkAttackSide=i.checkAttackSide;var o=n(198);t.charge=o.charge,t.calculateCharge=o.calculateCharge;var a=n(47);t.calculateDamage=a.calculateDamage,t.calculateDamageBaseOnEnemyPosition=a.calculateDamageBaseOnEnemyPosition,t.calculateDamageWhenItsLessThanOne=a.calculateDamageWhenItsLessThanOne;var s=n(81);t.removeUnitFromEnemiesFightAgainst=s.removeUnitFromEnemiesFightAgainst,t.findUnitInFightAgainst=s.findUnitInFightAgainst;var l=n(82);t.isUnitFighting=l.isUnitFighting,t.checkHealth=l.checkHealth,t.meleeAttack=l.meleeAttack,t.meleeCombat=l.meleeCombat;var u=n(87);t.refreshment=u.refreshment},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.armourPenetration=function(e,t){var n=Math.random();return e>t?n<.1?e:e<.1?Math.round(e-t/2):e-t:e<=t?n<.2?1:0:void 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.checkAttackSide=function(e,t){var n=t.currentNode,i=e.currentNode;if(t.figthAgainst.front.id===e.id)return"front";if(!t.isFighting&&t.isMoving){var o=t.nextNode;return o.x===i.x&&o.y===i.y?"front":o.x-i.x>r.gridSize||o.y-i.y>r.gridSize?"back":"side"}if(t.isFighting){var a=t.figthAgainst.front.currentNode;return i.x===n.x&&i.x===a.x?"back":i.y===n.y&&i.y===a.y?"back":Math.abs(a.x-n.x)===r.gridSize&&Math.abs(a.x-i.x)===2*r.gridSize?"back":Math.abs(a.y-n.y)===r.gridSize&&Math.abs(a.y-i.y)===2*r.gridSize?"back":"side"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(199);t.charge=r.charge,t.calculateCharge=r.calculateCharge},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(80),i=n(47);t.charge=function(e,n){var i=r.checkAttackSide(e,n),o=t.calculateCharge(e,n,i);n.health=Math.round(n.health-o)},t.calculateCharge=function(e,t,n){var r;return"front"===n?(r=e.charge-t.armour)<1?i.calculateDamageWhenItsLessThanOne(r):r:"side"===n?(r=1.5*e.charge-t.armour)<1?i.calculateDamageWhenItsLessThanOne(r):r:"back"===n?e.charge:void 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.calculateDamage=function(e,t){var n=e.health,r=e.condition;return n>=80&&r>=80?t:n>=80&&r>=50||r>=80&&n>=50?Math.round(.9*t):n>=50&&r>=50?Math.round(.8*t):n>=50||r>=50?Math.round(.7*t):Math.round(.6*t)},t.calculateDamageBaseOnEnemyPosition=function(e,n){return e<=1?t.calculateDamageWhenItsLessThanOne(e):"front"===n?e:"flank"===n?(r=Math.round(.3*e))<=1?t.calculateDamageWhenItsLessThanOne(r):r:"rear"===n?(r=Math.round(.1*e))<=1?t.calculateDamageWhenItsLessThanOne(r):r:void 0;var r},t.calculateDamageWhenItsLessThanOne=function(e){return Math.random()>.5?0:1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.removeUnitFromEnemiesFightAgainst=function(e){var t;if(0!==(t="computer"===e.controlBy?r.playerUnits:r.computerUnits).length)for(var n=0,i=t;n<i.length;n++){i[n].removeEnemyFromFightAgainst(e)}},t.findUnitInFightAgainst=function(e){var t=[],n=[];"computer"===e.controlBy?t=r.playerUnits:"player"===e.controlBy&&(t=r.computerUnits);for(var i=0,o=t;i<o.length;i++){var a=o[i],s=a.figthAgainst;s.front.id===e.id?n.push(a):s.rear.id===e.id&&n.push(a);for(var l=0,u=s.flank;l<u.length;l++){u[l].id===e.id&&n.push(a)}}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(83),o=n(85),a=n(81),s=n(86),l=n(2),u=n(87),c=n(0);t.checkHealth=function(){return new Promise(function(e){for(var t=0,n=r.units;t<n.length;t++){var d=n[t];if(d.health<=0){if("player"===d.controlBy&&o.removeUnitFromSpottedUnits(d),a.findUnitInFightAgainst(d).length>0)for(var f=0,h=a.findUnitInFightAgainst(d);f<h.length;f++){h[f].removeEnemyFromFightAgainst(d)}i.removeUnit(d),l.ctx.clearRect(d.x,d.y,c.gridSize,c.gridSize)}else s.isUnitFighting(d),u.refreshment(d)}e()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(9),o=n(22),a=n(32),s=n(84);t.removeUnit=function(e){e&&(a.clearUnitImage(e),r.removeFromUnits(e),i.removeUnitFromVisibleUnits(e),s.removeUnitFromSpottedUnits(e),"player"===e.controlBy&&o.removeFromRevealedUnits(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(16);t.assignCurrentlyChosenUnit=r.assignCurrentlyChosenUnit;var i=n(85);t.addUnitToSpottedUnits=i.addUnitToSpottedUnits,t.spottedUnits=i.spottedUnits,t.removeUnitFromSpottedUnits=i.removeUnitFromSpottedUnits;var o=n(46);t.incUnitId=o.incUnitId,t.unitId=o.unitId;var a=n(9);t.addUnitIntoVisibleUnits=a.addUnitIntoVisibleUnits,t.removeUnitFromVisibleUnits=a.removeUnitFromVisibleUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.refreshment=function(e){e.isFighting||e.isMoving||e.condition<100&&e.increaseCondition(1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(88),i=n(47),o=n(79),a=n(83),s=n(17),l=n(89);t.meleeAttack=function(e,t,n){return void 0===n&&(n="front"),new Promise(function(u){var c=r.randomizeMeleeDamage(e.meleeDamage),d=i.calculateDamage(e,c);d<1&&(d=1);var f=i.calculateDamageBaseOnEnemyPosition(d,n),h=t.armour;if(t.health<=0)return console.error("defendUnit is destroyed"),e.removeEnemyFromFightAgainst(t),a.removeUnit(t),void l.displayUnitIcons();t.health=Math.round(t.health-o.armourPenetration(f,h)),e.condition-=1,s.drawUnitIcon(t),u()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(1),o=n(82),a=n(17);t.meleeCombat=function(){for(var e=0,t=r.units;e<t.length;e++){var n=t[e];if(!i.isObjectEmpty(n.figthAgainst.front)){if(!n.figthAgainst.front.isFighting)return void a.drawUnitIcon(n);o.meleeAttack(n,n.figthAgainst.front,"front")}if(!i.isObjectEmpty(n.figthAgainst.rear)){if(!n.figthAgainst.rear.isFighting)return void a.drawUnitIcon(n);o.meleeAttack(n,n.figthAgainst.rear,"rear")}if(n.figthAgainst.flank.length>0)for(var s=0,l=n.figthAgainst.flank;s<l.length;s++){var u=l[s];if(!u.isFighting)return void a.drawUnitIcon(n);o.meleeAttack(n,u,"flank")}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(209);t.attackEnemy=r.attackEnemy;var i=n(50);t.moveTo=i.moveTo;var o=n(33);t.pursueUnit=o.pursueUnit;var a=n(34);t.updateUnit=a.updateUnit},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(19),i=n(10),o=n(33),a=n(49);t.attackEnemy=function(e,t){if(e.isMoving)e.setUnitToPursue(t);else{var n=e.x,s=e.y,l=t.x,u=t.y;e.setUnitToPursue(t);var c=r.getNodeFromMap(n,s),d=r.getNodeFromMap(l,u),f=a.aStar(i.initialMap,c,d);o.pursueUnit(e,t,l,u,0,f,!0)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findPathFromOneNodeToAnother=function(e,t,n,r){var i=n-e,o=r-t,a=e,s=n,l=t,u=r,c=[];if(a===s&&l===u)return c.push({x:a,y:l}),c;if(a<=s){if(Math.abs(i)>=Math.abs(o)){if(l>u)for(var d=a;d<=s;++d){var f=Math.round(l+o*(d-a)/i);c.push({x:d,y:f})}if(l<=u)for(d=a;d<=s;++d){f=Math.round(l+o*(d-a)/i);c.push({x:d,y:f})}}if(Math.abs(i)<Math.abs(o)){if(l>u)for(f=l;f>=u;--f){d=Math.round(a+i*(f-l)/o);c.push({x:d,y:f})}if(l<=u)for(f=l;f<=u;++f){d=Math.round(a+i*(f-l)/o);c.push({x:d,y:f})}}}if(a>s){if(Math.abs(i)>=Math.abs(o)){if(l>u)for(d=a;d>=s;--d){f=Math.round(l+o*(d-a)/i);c.push({x:d,y:f})}if(l<=u)for(d=a;d>=s;--d){f=Math.round(l+o*(d-a)/i);c.push({x:d,y:f})}}if(Math.abs(i)<Math.abs(o)){if(l>u)for(f=l;f>=u;--f){d=Math.round(a+i*(f-l)/o);c.push({x:d,y:f})}if(l<=u)for(f=l;f<=u;++f){d=Math.round(a+i*(f-l)/o);c.push({x:d,y:f})}}}return c}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);t.calculateChanceToGetOutOfCombat=function(e){var t=0,n=0,i=(e.speed,e.mobility),o=0,a=!1;if(r.isObjectEmpty(e.figthAgainst.front)||(n++,o+=e.figthAgainst.front.speed),r.isObjectEmpty(e.figthAgainst.rear)||(n++,o+=e.figthAgainst.rear.speed,a=!0),e.figthAgainst.flank.length>0)for(var s=0,l=e.figthAgainst.flank;s<l.length;s++){n++,o+=l[s].speed}return 1===n?t-=.1:2===n?t-=.3:n>2&&n<=4?t-=.4:n>4&&(t-=.5),a&&(t-=.5),e.condition>=50&&e.condition<80?t-=.1:e.condition>=25&&e.condition<50?t-=.2:e.condition<25&&(t-=.4),e.speed>=o?e.speed/o>=3?t+=.8:e.speed/o>2&&e.speed/o<3?t+=.6:e.speed/o>=1?t+=.4:t+=.2:o/e.speed<=1.25&&(t+=.1),e.mobility>=2&&e.mobility<3?t+=.1:i>=3&&i<5?t+=.3:5===i?t+=.5:i>=5&&i<7?t+=.7:i>=7&&i<8?t+=.8:i>=8&&(t+=.9),t<=0&&(t=.1),t>=1&&(t=.9),t},t.unitCanGetOutOfCombat=function(e){var n=t.calculateChanceToGetOutOfCombat(e),r=Math.random();return r>=0&&r<=n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),i=n(0),o=n(2),a=n(34),s=n(33);t.makeMovementInUpdateUnit=function(e,n,s,l,u,c,d,f,h){if(e.x===s.x&&e.y===s.y&&(h++,a.updateUnit(e,u,h,c,d,null,!1)),!(f>=l.length)){f>0?(l[f-1].x-.5*i.gridSize,l[f-1].y-.5*i.gridSize):(l[f].x-.5*i.gridSize,l[f].y-.5*i.gridSize);var g=e.centerX-e.radius,y=e.centerY-e.radius,v=2*e.radius;o.ctx.clearRect(g,y,v,v);var m=l[f].x,p=l[f].y;e.setX(m-.5*i.gridSize),e.setY(p-.5*i.gridSize),r.drawUnit(e),setTimeout(function(){f++,t.makeMovementInUpdateUnit(e,n,s,l,u,c,d,f,h)},Math.round(1e3/e.speed))}},t.makeMovementInPursueUnit=function(e,n,a,l,u,c,d,f,h,g){if(e.x===l.x&&e.y===l.y&&(g++,s.pursueUnit(e,n,d,f,g,c,!1)),!(h>=u.length)){h>0?(u[h-1].x-.5*i.gridSize,u[h-1].y-.5*i.gridSize):(u[h].x-.5*i.gridSize,u[h].y-.5*i.gridSize);var y=e.centerX-e.radius,v=e.centerY-e.radius,m=2*e.radius;o.ctx.clearRect(y,v,m,m);var p=u[h].x,M=u[h].y;e.setX(p-.5*i.gridSize),e.setY(M-.5*i.gridSize),r.drawUnit(e),setTimeout(function(){h++,t.makeMovementInPursueUnit(e,n,a,l,u,c,d,f,h,g)},Math.round(1e3/e.speed))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(69),i=n(96),o=n(3);t.getPriorityUnit=function(e,t){var n=Object.assign([],t),o=r.findClosestUnitsToTheNodeCenter(e,n);if(1===o.length)return o[0];if(o.length>1){var a=r.getBestUnitsByProperty(o,"speed");if(1===a.length)return a[0];if(a.length>1)return i.shuffleUnits(a)[0]}},t.unitCanMoveToTheNode=function(e,n){var r=t.getPriorityUnit(e,o.units),i=!1;return n.id===r.id&&(i=!0),i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t,n){var r=e[t];e[t]=e[n],e[n]=r};t.shuffleUnits=function(e){for(var t=Object.assign([],e),n=function(e){for(var t=Object.assign([],e),n=0,r=t;n<r.length;n++){var i=r[n],o=Math.random();i.randomValue=o}return t}(e),i=0;i<n.length;++i){for(var o=i,a=i+1;a<e.length;++a)n[a].randomValue===n[o].randomValue&&(o=a),n[a].randomValue<n[o].randomValue&&(o=a);o!==i&&r(t,o,i)}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setRandomValue=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var i=r[n],o=Math.random(),a={id:i.id,randomValue:o};t.push(a)}return t},t.swap=function(e,t,n){var r=e[t];e[t]=e[n],e[n]=r},t.shuffleID=function(e){for(var n=Object.assign([],e),r=t.setRandomValue(n),i=0;i<r.length;++i){for(var o=i,a=i+1;a<r.length;++a)r[a].randomValue===r[o].randomValue&&(o=a),r[a].randomValue<r[o].randomValue&&(o=a);o!==i&&t.swap(r,o,i)}return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(5);t.getInterceptionNodes=function(e){for(var t=e.currentNode,n=[],o=t.x-r.gridSize;o<=t.x+r.gridSize;o+=r.gridSize){(s=i.getNodeFromMap(o,t.y))&&o!==t.x&&n.push(s)}for(var a=t.y-r.gridSize;a<=t.y+r.gridSize;a+=r.gridSize){var s;(s=i.getNodeFromMap(t.x,a))&&a!=t.y&&n.push(s)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(218);t.spotEnemy=r.spotEnemy,t.isUnitSpottedByEnemy=r.isUnitSpottedByEnemy,t.spotUnits=r.spotUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(0),o=n(78),a=n(84),s=n(22),l=n(3),u=n(1),c=n(28);t.spotEnemy=function(e){var t;"player"===e.controlBy&&(t=Object.assign([],l.computerUnits)),"computer"===e.controlBy&&(t=Object.assign([],l.playerUnits));for(var n=e.visibility*i.gridSize,r=e.currentNode.x,d=e.currentNode.y,f=u.getNodeFromMap(r,d),h=0,g=t;h<g.length;h++){var y=g[h],v=y.currentNode.x,m=y.currentNode.y,p=u.getNodeFromMap(v,m),M=Math.abs(f.x-p.x),U=Math.abs(f.y-p.y);n>=M&&n>=U&&("computer"===e.controlBy&&!1===y.isVisible&&c.removeFromHidingEnemies(y),y.isVisible=!0,o.drawUnit(y),a.addUnitIntoVisibleUnits(y),"computer"===e.controlBy&&(a.addUnitToSpottedUnits(y),s.addToRevealedUnits(y)))}},t.isUnitSpottedByEnemy=function(e){var t;if("player"===e.controlBy&&(t=Object.assign([],l.computerUnits)),"computer"===e.controlBy&&(t=Object.assign([],l.playerUnits)),0!==t.length){for(var n=e.currentNode.x,s=e.currentNode.y,d=u.getNodeFromMap(n,s),f=!1,h=0,g=t;h<g.length;h++){var y=g[h],v=y.visibility*i.gridSize,m=y.currentNode.x,p=y.currentNode.y,M=u.getNodeFromMap(m,p),U=Math.abs(d.x-M.x),_=Math.abs(d.y-M.y);v>=U&&v>=_&&(a.addUnitIntoVisibleUnits(e),f=!0,!1===e.isVisible&&"player"===e.controlBy&&c.removeFromHidingEnemies(e),e.isVisible=!0,"computer"===e.controlBy&&a.addUnitToSpottedUnits(y),"computer"===e.controlBy&&o.drawUnit(e))}f||(a.removeUnitFromVisibleUnits(e),"player"===e.controlBy&&!0===e.isVisible&&c.addToHidingEnemies(e),e.isVisible=!1,"computer"!==e.controlBy||e.isMoving||r.ctx.clearRect(e.x,e.y,i.gridSize,i.gridSize))}},t.spotUnits=function(e){if(e.length>0)for(var n=0,r=e;n<r.length;n++){var i=r[n];t.isUnitSpottedByEnemy(i)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(220),o=n(11),a=n(43);t.battleListener=function(){o.spotUnits(r.units),o.meleeCombat(),setTimeout(function(){t.battleListener()},600)},t.isBattleEnd=function(){var e=r.computerUnits.length,n=r.playerUnits.length;0!==e&&0!==n||(a.finishBattle(),t.checkWinner(e,n))},t.checkWinner=function(e,t){0===e?i.drawMessage("Victory"):0===t&&(a.finishBattle(),i.drawMessage("Defeat"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(2);t.drawMessage=function(e){i.ctx.fillStyle="#000",i.ctx.font="256px serif",i.ctx.textAlign="left",i.ctx.fillText(e,r.MAP_WIDTH/2-400,r.CANVAS_HEIGHT/2)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(27),i=n(0),o=n(1);t.drawClickedIcon=function(e,t){r.eventCtx.clearRect(0,0,i.MAP_WIDTH,i.MAP_HEIGHT);var n=o.getNodeFromMap(e,t);if(n){var a=n.x+i.gridSize/2,s=n.y+i.gridSize/2,l=Math.round(i.gridSize/3);r.eventCtx.beginPath(),r.eventCtx.arc(a,s,l,0,2*Math.PI),r.eventCtx.strokeStyle="#20ef09",r.eventCtx.stroke(),r.eventCtx.closePath(),setTimeout(function(){r.eventCtx.clearRect(0,0,i.MAP_WIDTH,i.MAP_HEIGHT)},1e3)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(223),i=n(228),o=n(229),a=n(99);t.computerAction=function(){var e=new r.default;a.calculateTotalPower(),setTimeout(function(){i.needToChangePosition(e)&&(console.error("Need to change position"),o.moveUnits()),e.setPreviousState(),t.computerAction()},600)},t.computerMovement=function(){o.moveUnits(),t.computerAction()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(99),o=n(9),a=n(28),s=function(){function e(){var e=i.calculateTotalPlayerPower(),t=i.calculateTotalComputerPower();this.playerUnits=Object.assign([],r.playerUnits),this.computerUnits=Object.assign([],r.computerUnits),this.playerTotalHealth=e.totalHealth,this.computerTotalHealth=t.totalHealth,this.visibleForPlayerUnits=Object.assign([],o.visibleForPlayerUnits),this.visibleForComputerUnits=Object.assign([],o.visibleForComputerUnits),this.hidingEnemies=Object.assign([],a.hidingEnemies)}return e.prototype.setPreviousState=function(){var e=i.calculateTotalPlayerPower(),t=i.calculateTotalComputerPower();this.playerUnits=Object.assign([],r.playerUnits),this.computerUnits=Object.assign([],r.computerUnits),this.playerTotalHealth=e.totalHealth,this.computerTotalHealth=t.totalHealth,this.visibleForPlayerUnits=Object.assign([],o.visibleForPlayerUnits),this.visibleForComputerUnits=Object.assign([],o.visibleForComputerUnits),this.hidingEnemies=Object.assign([],a.hidingEnemies)},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.initialComputerPower=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.initialPlayerPower=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.visiblePlayerUnitsPower=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);t.revealedUnitsPower=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(3),o=n(51),a=n(52),s=n(28),l=n(35);t.needToChangePosition=function(e){return!!l.isUnitsChanged(r.visibleForComputerUnits,e.visibleForComputerUnits)||(i.computerUnits.length!=e.computerUnits.length||(i.playerUnits.length!=e.playerUnits.length||(1-e.playerTotalHealth/o.playerPower.totalHealth>=.2||(1-e.computerTotalHealth/a.computerPower.totalHealth>=.2||(!!l.isUnitsChanged(s.hidingEnemies,e.hidingEnemies)||!!l.isUnitsChanged(l.getFightingUnits(i.computerUnits),l.getFightingUnits(e.computerUnits)))))))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=n(230),o=n(101),a=n(23),s=n(54),l=n(104),u=n(55),c=n(245),d=n(246);t.moveUnits=function(){console.error("moveUnits");var e=u.generateCurrentCommandNumber();c.setCommandNumberToUnits(e);for(var t=i.bestActionAlgorithm(),n=0,f=r.computerUnits;n<f.length;n++){var h=f[n];console.error("command unit "+h.id+" "+t.getCommandsByUnitId(h.id).command)}for(var g=0,y=r.computerUnits;g<y.length;g++){h=y[g];var v=t.getCommandsByUnitId(h.id),m=v.command;v.node;if(m===o.Command.Attack)a.attackEnemy(h,v.actionUnit);else if(m===o.Command.MoveToNode)d.advance(h,v.node,e,!0);else if(m===o.Command.BeCloseToUnit){var p=v.actionUnit;s.assessVulnerability(h)>=s.assessVulnerability(p)?l.beCloseTo(h,p,e,!0,!0):l.beCloseTo(h,p,e,!1,!0)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(231),i=n(3),o=n(235),a=n(236),s=n(237);t.bestActionAlgorithm=function(){for(var e=new o.default,t=0;t<=10;){for(var n=new a.default,l=0,u=i.computerUnits;l<u.length;l++){var c=u[l],d=r.generateRandomAction(c);n.addCommand(c.id,d)}var f=n.getUnitsWithSimulatingPositions(),h=s.calculateTotalEfficiency(f);e.insert(h,n),t+=1}return e.extractMax()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(53),o=n(3),a=n(1),s=n(5),l=n(232),u=n(101),c=n(234);t.generateRandomAction=function(e){var t,n=null,l=d();if(0!==r.visibleForComputerUnits.length||l!==u.Command.MoveToNode&&l!==u.Command.Attack)if(l===u.Command.Attack)t=(n=i.getRandomUnit(r.visibleForComputerUnits)).currentNode;else if(l===u.Command.MoveToNode){h=a.getSurroundedNodes(e);t=s.getRandomNode(h)}else l===u.Command.BeCloseToUnit&&(t=(n=i.getRandomUnit(o.computerUnits)).currentNode);else{l=u.Command.MoveToNode;var f=i.getRandomUnit(o.playerUnits),h=a.getSurroundedNodes(f,3);t=s.getRandomNode(h)}return new c.default(e,t,l,n)};var d=function(){var e=l.getRandomValueInRange(0,2);return[u.Command.BeCloseToUnit,u.Command.Attack,u.Command.MoveToNode][e]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(100);t.getRandomValueInRange=r.getRandomValueInRange;var i=n(88);t.randomizeMeleeDamage=i.randomizeMeleeDamage;var o=n(233);t.getRandomValueInRangeWithProbability=o.getRandomValueInRangeWithProbability},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(100);t.getRandomValueInRangeWithProbability=function(e,t,n){if(e>=t)throw new Error("min cannot be more or equal to max");if(!n.interval)throw new Error("probability interval is required");if(2!=n.interval.length)throw new Error("invalid probability interval syntax");if(n.interval[0]<e||n.interval[1]<e)throw new Error("one of probability interval is less than min");if(n.interval[0]>t||n.interval[1]>t)throw new Error("one of probability interval is more than max");if(n.interval[0]>=n.interval[1])throw new Error("invalid probability interval");if(!n.probability)throw new Error("probabilities argument required");if(n.probability<0||n.probability>100)throw new Error("invalid probability value");if(n.probability>0&&n.probability<1)throw new Error("invalid probability value");var i=Math.random(),o=n.interval[0],a=n.interval[1],s=.01*n.probability;return i>=0&&i<=s?r.getRandomValueInRange(o,a):r.getRandomValueInRange(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t,n,r){void 0===r&&(r=null),this.unit=e,this.node=t,this.command=n,this.actionUnit=r}}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.elements=[],this.commandId=1}return e.prototype.insert=function(e,t){this.elements.push({efficiency:e,commands:t,commandId:this.commandId}),this.commandId+=1},e.prototype.extractMax=function(){for(var e=this.elements[0],t=1;t<this.elements.length;++t)this.elements[t].efficiency>e.efficiency&&(e=this.elements[t],t);return this.elements=this.elements.filter(function(t){return t.commandId!==e.commandId}),e.commands},e.prototype.isEmpty=function(){return 0===this.elements.length},e.prototype.clearElements=function(){this.elements=[]},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),i=function(){function e(){this.commands={}}return e.prototype.addCommand=function(e,t){this.commands[e]=t},e.prototype.clearCommands=function(){this.commands={}},e.prototype.getCommandsByUnitId=function(e){return this.commands[e]},e.prototype.getUnitsWithSimulatingPositions=function(){for(var e=[],t=0,n=r.computerUnits;t<n.length;t++){var i=n[t],o=Object.create(i),a=this.getCommandsByUnitId(o.id).node;o.setX(a.x),o.setY(a.y),o.setCurrentNode(a),e.push(o)}return e},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(238);t.calculateTotalEfficiency=function(e){for(var t=0,n=0,i=e;n<i.length;n++){var o=i[n];t+=r.calculateEfficiency(o,e)}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(239),i=n(1),o=n(240),a=n(9),s=n(35),l=n(36),u=n(242),c=n(103),d=n(243);t.calculateEfficiency=function(e,n){return 0===a.visibleForComputerUnits.length?t.explorationUnitEfficiency(e,n):t.unitEfficiency(e,n)},t.explorationUnitEfficiency=function(e,n){o.assignExplorationTask();var a=r.getExplorationNode(),s=i.getDistanceBetweenTwoNodesInGrids(e.currentNode,a);if("exploration"===e.task){var l=100-10*s;return l=l>0?l:0}return t.unitEfficiency(e,n)},t.unitEfficiency=function(e,t){var n=l.getSurroundedUnits(e,a.visibleForComputerUnits,5),r=l.getSurroundedUnits(e,t,5),i=Object.assign([],r);i.push(e);var o,f,h=n.length,g=r.length,y=c.calculateTotalUnitsWeight(r)+e.weight,v=c.calculateTotalUnitsWeight(n),m=e.health/e.initialHealth,p=s.getTotalUnitsInitialHealth(n),M=(s.getTotalUnitsInitialHealth(r),s.getTotalUnitsInitialHealth(i)),U=s.getTotalUnitsHealth(n),_=(s.getTotalUnitsHealth(r),s.getTotalUnitsHealth(i)),b=U/p,P=_/M;if(1===h&&0===g){var I=n[0],x=I.health/I.initialHealth;return s.isEnemyVulnerableToUnit(e,I)&&m>=.7?100:s.isEnemyDangerousForUnit(e,I)&&x>=.7?0:u.simulateFight(e,I).unitHealthRemain}if(h>1&&0===g)return b>=.6&&m>=.6?(o=(o=e.weight/v)<=2?o:2,Math.round(50*o)):(f=(f=e.health/U)<=2?f:2,Math.round(50*f));if(h>1||g>0)return b>=.6&&P>=.6?(o=(o=(y+e.weight)/v)<=2?o:2,Math.round(50*o)):(f=(f=_/U)<=2?f:2,Math.round(50*f));if(!(0===h&&g>0))return 0;var C=d.calculateTotalVulnerability(r,e)/g-(d.calculateTotalVulnerability(r)/g+1);if(C>0){var T=1.4*C;return T=T<=100?T:100}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(53),i=n(3),o=n(29),a=n(5);t.getExplorationNode=function(){var e=r.getRandomUnit(i.playerUnits),t=o.getSurroundedNodes(e,4);return a.getRandomNode(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(241),i=n(102),o=n(3);t.assignExplorationTask=function(e){void 0===e&&(e=60);var t=r.calculateUnitTypes();if(0===t.scouts&&0===t.cavalry){var n=i.getFreeUnits();if(n&&0!==n.length){var a=i.getBestUnitByProperty("speed");if(a.assignTask("exploration"),n.length>1){var s=[a];i.getBestUnitByProperty("speed",s).assignTask("exploration")}}}else for(var l=0,u=o.computerUnits;l<u.length;l++){var c=u[l],d=Math.round(0/o.computerUnits.length*100);!c.task&&("scouts"===c.type||"cavalry"===c.type)&&d<e&&c.assignTask("exploration")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(51),i=n(52),o=n(3),a=n(22),s=n(29);t.calculateUnitsToBeware=function(e){var t=0;if(0!==o.playerUnits.length)for(var n=0,r=o.playerUnits;n<r.length;n++){var i=r[n];if(0!==e.vulnerableAgainst.length)for(var a=0,s=e.vulnerableAgainst;a<s.length;a++){s[a]===i.name&&t++}}return t},t.calculateSurroundedEnemyPower=function(e){var t={health:0,speed:0,armour:0,meleeDamage:0,missileDamage:0,morale:0,condition:0},n=s.getSurroundedEnemies(e);if(0!==n.length)for(var r=0,i=n;r<i.length;r++){var o=i[r];t.health+=o.health,t.speed+=o.speed,t.armour+=o.armour,t.meleeDamage+=o.meleeDamage,t.missileDamage+=o.missileDamage,t.morale+=o.morale,t.condition+=o.condition}return t},t.calculateSurroundedAlliesPower=function(e){var t={health:0,speed:0,armour:0,meleeDamage:0,missileDamage:0,morale:0,condition:0},n=s.getSurroundedAllies(e);if(0!==n.length)for(var r=0,i=n;r<i.length;r++){var o=i[r];t.health+=o.health,t.speed+=o.speed,t.armour+=o.armour,t.meleeDamage+=o.meleeDamage,t.missileDamage+=o.missileDamage,t.morale+=o.morale,t.condition+=o.condition}return t},t.calculatePowerAdvantageInTheArea=function(e){var n=t.calculateSurroundedEnemyPower(e),r=t.calculateSurroundedAlliesPower(e);return{health:r.health-n.health,speed:r.speed-n.speed,armour:r.armour-n.armour,meleeDamage:r.meleeDamage-n.meleeDamage,missileDamage:r.missileDamage-n.missileDamage,condition:r.condition-n.condition,morale:r.morale-n.morale}},t.calculateUnitTypes=function(e){void 0===e&&(e="computer");var t,n={infantry:0,spearmen:0,lightInfantry:0,heavyInfantry:0,scouts:0,skirmishers:0,cavalry:0};if("computer"===e)t=Object.assign([],o.computerUnits);else if("revealed"===e)t=Object.assign([],a.revealedUnits);else{if("player"!==e)throw new Error("incorrect side argument");t=Object.assign([],o.playerUnits)}for(var r=0,i=t;r<i.length;r++){var s=i[r];"infantry"!==s.type&&"spearmen"!==s.type&&"scouts"!==s.type||(n.infantry+=1),"spearmen"===s.type&&(n.spearmen+=1),"infantry"===s.type&&"HeavyInfantry"!==s.name&&(n.lightInfantry+=1),"HeavyInfantry"===s.name&&(n.heavyInfantry+=1),"scouts"===s.type&&(n.scouts+=1),"skirmishers"===s.type&&(n.skirmishers+=1),"cavalry"===s.type&&(n.cavalry+=1)}return n},t.getUnitTypesInPercentage=function(){var e={infantry:0,spearmen:0,lightInfantry:0,heavyInfantry:0,scouts:0,skirmishers:0,cavalry:0},n=t.calculateUnitTypes(),r=o.computerUnits.length;return e.infantry=Math.round(n.infantry/r*100),e.spearmen=Math.round(n.spearmen/r*100),e.lightInfantry=Math.round(n.lightInfantry/r*100),e.heavyInfantry=Math.round(n.heavyInfantry/r*100),e.scouts=Math.round(n.scouts/r*100),e.skirmishers=Math.round(n.skirmishers/r*100),e.cavalry=Math.round(n.cavalry/r*100),e},t.getInitialPropeties=function(){return{initialNumberOfUnits:o.computerUnits.length,initialNumberOfEnemies:o.playerUnits.length,initialUnitsHealth:i.computerPower.totalHealth,initialEnemiesHealth:r.playerPower.totalHealth}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11);t.simulateFight=function(e,t){for(var n=1,i=e.health,o=t.health,a=e.health,s=t.health;a>=0&&s>=0;){var l=r.calculateDamage(e,e.meleeDamage),u=r.calculateDamage(t,t.meleeDamage);a-=r.armourPenetration(u,e.armour),s-=r.armourPenetration(l,t.armour),n+=1}var c=Math.round(100*a/i),d=Math.round(100*s/o);return{unitHealthRemain:c>=0?c:0,enemyHealthRemain:d>=0?d:0,unitHealth:a,enemyHealth:s,attacks:n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(54);t.calculateTotalVulnerability=function(e,t){void 0===t&&(t=null);for(var n=0,i=0,o=e;i<o.length;i++){var a=o[i];n+=r.assessVulnerability(a,t)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(103),i=n(35),o=n(36),a=n(3),s=n(22),l=n(1);t.assessVulnerability=function(e,t){void 0===t&&(t=null);var n,u,c=0;"computer"===e.controlBy?(n=Object.assign([],a.computerUnits),u=Object.assign([],s.revealedUnits)):"player"===e.controlBy&&(n=Object.assign([],a.playerUnits),u=Object.assign([],a.computerUnits)),t&&(n=l.deleteUnitFromArray(e,n));var d=o.getSurroundedUnits(e,n,5),f=o.getSurroundedUnits(e,u,5),h=r.calculateTotalUnitsWeight(d)+e.weight,g=r.calculateTotalUnitsWeight(f),y=i.getDangerousUnits(e).length,v=i.containsDangerousUnits(e,f);if(0===d.length&&0===f.length&&(e.speed>=70&&e.speed<80?c+=10:e.speed>=50&&e.speed<70?c+=30:e.speed<50&&(c+=50)),0===d.length&&1==f.length){v&&(c+=70);var m=f[0].speed;e.speed/m>1&&e.speed/m<1.5?c+=h>g?20:35:e.speed/m>=1.5?c+=h>g?5:15:g/h>1.2?c+=40:g/h>1.5&&(c+=90)}return 0===d.length&&f.length>1&&(v&&(c+=70),c+=g/h>=1.5?80:30),d.length>=1&&f.length>1&&(c+=10,v&&(c+=30),g/h>=1.5?c+=50:g/h>=1.2&&(c+=30)),y>0&&e.speed<25&&"skirmishers"!=e.type&&(c+=30),c<0?c=0:c>100&&(c=100),c}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.setCommandNumberToUnits=function(e){for(var t=0,n=r.computerUnits;t<n.length;t++){n[t].setCommandNumber(e)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(55),i=n(3),o=n(102),a=n(23),s=n(36),l=n(54),u=n(247),c=n(8),d=n(50),f=n(104);t.advance=function(e,n,h,g){if(void 0===g&&(g=!1),h===r.currentCommandNumber){if(g||!e.isMoving&&!e.isFighting)if(console.log("unit "+e.id+" commandNumber "+h),e.currentNode.x!=n.x&&e.currentNode.y!=n.y)d.moveTo(e,n.x,n.y);else if(1===i.computerUnits.length){var y=o.getClosestEnemyToUnit(e);a.attackEnemy(e,y)}else{for(var v=s.getSurroundedUnits(e,i.computerUnits,5),m=new u.default,p=0,M=v;p<M.length;p++){var U=M[p],_=l.assessVulnerability(U);m.insert(U.id,_)}for(;!m.isEmpty();){var b=m.extractMax();U=c.getUnitById(b.key);if(b.value>=80&&U.isFighting){f.beCloseTo(e,U,h,!0);break}}}setTimeout(function(){t.advance(e,n,h)},2e3)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.elements=[]}return e.prototype.insert=function(e,t){this.elements.push({key:e,value:t})},e.prototype.update=function(e,t){for(var n=0,r=this.elements;n<r.length;n++){var i=r[n];i.key==e&&(i.value=t)}},e.prototype.extractMax=function(){for(var e=this.elements[0],t=1;t<this.elements.length;++t)this.elements[t].value>e.value&&(e=this.elements[t],t);return this.elements=this.elements.filter(function(t){return t.key!==e.key}),e},e.prototype.isEmpty=function(){return 0===this.elements.length},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(249);t.launchGame=r.launchGame},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(250),i=n(66),o=n(43);t.launchGame=function(){o.mainMenuMode?r.launchMainMenu():o.battleMode&&i.launchBattle()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(0),o=n(251),a=n(40),s=n(61),l=n(63),u=n(305),c=n(307),d=n(10),f=n(21),h=n(37),g=n(124),y=n(18);t.launchMainMenu=function(){g.drawLoadingCanvas(),d.initializeMap().then(function(){f.loadUnitIcons().then(function(){r.mainMenuCtx.fillRect(0,0,i.MAP_WIDTH,i.CANVAS_HEIGHT),h.createRoster(),o.displayRoster(),a.displayChosenUnits(),s.displayInfo(),l.displayTitle(),u.dragAndDrop(),c.drawBottomLayout(),f.loadIcons(),y.loadingCanvas.style.zIndex="1"})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(252);t.isUnitSelectedInRoster=r.isUnitSelectedInRoster;var i=n(57);t.displayRoster=i.displayRoster},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(105);t.isUnitSelectedInRoster=r.isUnitSelectedInRoster},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rosterImgWidth=100,t.rosterImgHeight=100},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(2),o=n(57);t.displayRoster=function(){i.mainMenuCtx.fillStyle="#cdd1d6",i.mainMenuCtx.fillRect(0,r.titleHeight,r.unitRosterWidth,r.unitRosterHeight),o.displayRosterTitle()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(58);t.decreaseSpentGold=r.decreaseSpentGold,t.increaseSpentGold=r.increaseSpentGold;var i=n(38);t.setTotalGold=i.setTotalGold},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(257);t.armyLayoutHeight=r.armyLayoutHeight,t.armyLayoutWidth=r.armyLayoutWidth},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.armyLayoutHeight=r.CANVAS_HEIGHT-140,t.armyLayoutWidth=Math.round(r.MAP_WIDTH/3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(259);t.infoLayoutHeight=r.infoLayoutHeight,t.infoLayoutWidth=r.infoLayoutWidth},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.infoLayoutHeight=r.CANVAS_HEIGHT-140,t.infoLayoutWidth=Math.round(r.MAP_WIDTH/3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(261);t.unitRosterHeight=r.unitRosterHeight,t.unitRosterWidth=r.unitRosterWidth},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0);t.unitRosterHeight=r.CANVAS_HEIGHT-140,t.unitRosterWidth=Math.round(r.MAP_WIDTH/3)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(263);t.startBattleStartY=r.startBattleStartY,t.startBattleHeight=r.startBattleHeight,t.startBattleWidth=r.startBattleWidth},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(106),o=n(107);t.startBattleStartY=o.titleHeight+i.infoLayoutHeight,t.startBattleHeight=r.CANVAS_HEIGHT-(o.titleHeight+i.infoLayoutHeight),t.startBattleWidth=r.MAP_WIDTH},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.titleHeight=70},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(39);t.changeBattleSettingsToTrue=r.changeBattleSettingsToTrue,t.changeUnitInfoToTrue=r.changeUnitInfoToTrue,t.showBattleSettings=r.showBattleSettings,t.showUnitInfo=r.showUnitInfo},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7);t.changeToComputer=r.changeToComputer,t.changeToPlayer=r.changeToPlayer,t.side=r.side},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(59);t.disableStartBattleButton=r.disableStartBattleButton,t.enableStartBattleButton=r.enableStartBattleButton,t.startBattleAvailable=r.startBattleAvailable},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(108);t.changeHoveredUnit=r.changeHoveredUnit,t.hoveredUnit=r.hoveredUnit;var i=n(269);t.computerHasUnits=i.computerHasUnits,t.playerHasUnits=i.playerHasUnits},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.playerHasUnits=!1,t.computerHasUnits=!1},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(4),o=n(37),a=n(1),s=n(56),l=n(271);t.displayRosterUnits=function(e,n,u){void 0===e&&(e=0),void 0===n&&(n=60),void 0===u&&(u=i.titleHeight+60),e>=o.roster.length||a.loadImage(o.roster[e].imgSrc,function(i,a){r.mainMenuCtx.font="14px serif",r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.textAlign="left",r.mainMenuCtx.fillText(o.roster[e].name,n+5,u),r.mainMenuCtx.drawImage(a,n,u+5,s.rosterImgWidth,s.rosterImgHeight),l.drawCoin(n+15,u+s.rosterImgHeight+15,5),r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.fillText(o.roster[e].cost,n+25,u+s.rosterImgHeight+20),o.roster[e].x=n,o.roster[e].y=u,n=n+s.rosterImgWidth+15,2!==e&&5!==e&&8!==e&&11!==e||(n=60,u+=s.rosterImgHeight+45),e++,t.displayRosterUnits(e,n,u)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(272);t.drawCoin=r.drawCoin},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2);t.drawCoin=function(e,t,n){r.mainMenuCtx.beginPath(),r.mainMenuCtx.arc(e,t,n,0,2*Math.PI,!1),r.mainMenuCtx.fillStyle="#ffd700",r.mainMenuCtx.fill()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(2),o=n(57);t.displayRosterTitle=function(){i.mainMenuCtx.fillStyle="#000",i.mainMenuCtx.font="24px serif",i.mainMenuCtx.textAlign="left",i.mainMenuCtx.fillText("Roster",150,r.titleHeight+20),o.displayRosterUnits()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(24);t.drawRemoveIcon=function(e){var t=e.armyPosition.x+i.armyImgWidth,n=e.armyPosition.y,o=t-15,a=n+15,s=t-5,l=n+4,u=o,c=l,d=s,f=a;Math.round(i.armyImgWidth/4),Math.round(i.armyImgHeight/4);r.dragAndDropCanvasCtx.fillStyle="rgb(200, 0,0)",r.dragAndDropCanvasCtx.beginPath(),r.dragAndDropCanvasCtx.moveTo(o,a),r.dragAndDropCanvasCtx.lineTo(s,l),r.dragAndDropCanvasCtx.stroke(),r.dragAndDropCanvasCtx.beginPath(),r.dragAndDropCanvasCtx.fillStyle="red",r.dragAndDropCanvasCtx.moveTo(u,c),r.dragAndDropCanvasCtx.lineTo(d,f),r.dragAndDropCanvasCtx.stroke()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(112);t.isUnitShouldBeRemoved=r.isUnitShouldBeRemoved},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(277);t.onChooseUnitInArmy=r.onChooseUnitInArmy;var i=n(278);t.displayChosenUnits=i.displayChosenUnits,t.displayChosenUnitsTitle=i.displayChosenUnitsTitle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),i=n(2),o=n(0),a=n(60),s=n(111),l=n(14),u=n(24);t.onChooseUnitInArmy=function(e,t){for(var n=null,c=0,d="player"===r.side?l.playerArmy:l.computerArmy;c<d.length;c++){var f=d[c],h=f.armyPosition.x,g=h+u.armyImgWidth,y=f.armyPosition.y,v=y+u.armyImgHeight;e>=h&&e<g&&t>y&&t<v?n=f:a.selectedUnitInRoster||i.dragAndDropCanvasCtx.clearRect(0,0,o.MAP_WIDTH,o.CANVAS_HEIGHT)}n&&!a.selectedUnitInRoster&&s.drawRemoveIcon(n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(4),o=n(109);t.displayChosenUnits=function(){r.mainMenuCtx.clearRect(i.unitRosterWidth,i.titleHeight,i.armyLayoutWidth,i.armyLayoutHeight),r.mainMenuCtx.fillStyle="#cdd1d6",r.mainMenuCtx.fillRect(i.unitRosterWidth,i.titleHeight,i.armyLayoutWidth,i.armyLayoutHeight),r.mainMenuCtx.strokeRect(i.unitRosterWidth,i.titleHeight,i.armyLayoutWidth,i.armyLayoutHeight),t.displayChosenUnitsTitle(),o.displayArmy()},t.displayChosenUnitsTitle=function(){r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.font="24px serif",r.mainMenuCtx.textAlign="left",r.mainMenuCtx.fillText("Units",i.unitRosterWidth+150,i.titleHeight+20)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(113);t.drawMoneyBox=r.drawMoneyBox;var i=n(114);t.changeTotalGold=i.changeTotalGold,t.fillTotalGold=i.fillTotalGold,t.showTotalGold=i.showTotalGold},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(38),i=n(2),o=n(15);t.drawMoneyBox=function(e,t,n){n===r.totalGold?i.mainMenuCtx.fillStyle="#fff":i.mainMenuCtx.fillStyle="#cdd1d6",i.mainMenuCtx.fillRect(e,t,o.boxWidth,o.boxHeight),i.mainMenuCtx.fillStyle="#000",i.mainMenuCtx.strokeRect(e,t,o.boxWidth,o.boxHeight),i.mainMenuCtx.font="12px serif",i.mainMenuCtx.textAlign="left",i.mainMenuCtx.fillText(n,e+10,t+25)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);t.width=160,t.height=30,t.battleSettingsX=r.armyLayoutWidth+r.unitRosterWidth+50,t.battleSettingsY=r.titleHeight,t.unitInfoX=r.armyLayoutWidth+r.unitRosterWidth+50+t.width+20,t.unitInfoY=r.titleHeight},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),i=n(2),o=n(4),a=n(63),s=n(113),l=n(25);t.goldBoxes=[],t.changeTotalGold=function(e,n){for(var i=0,s=t.goldBoxes;i<s.length;i++){var u=s[i];e>=u.x&&e<u.x+r.boxWidth&&n>=u.y&&n<u.y+r.boxHeight&&(o.setTotalGold(u.gold),t.showTotalGold(),a.displayTitle(),l.isStartBattleAvailable())}},t.fillTotalGold=function(){t.goldBoxes=[];for(var e=r.goldBoxStartX,n=r.goldBoxStartY,i=0,o=r.goldOptions;i<o.length;i++){var a=o[i];t.goldBoxes.push({x:e,y:n,gold:a}),e+=r.boxWidth+5}},t.showTotalGold=function(){i.mainMenuCtx.fillStyle="#000",i.mainMenuCtx.font="24px serif",i.mainMenuCtx.textAlign="left",i.mainMenuCtx.fillText("Total Money:",r.startTotalMoneyTitleX,r.startTotalMoneyTitleY),i.mainMenuCtx.font="12px serif",t.fillTotalGold();for(var e=0,n=t.goldBoxes;e<n.length;e++){var o=n[e];s.drawMoneyBox(o.x,o.y,o.gold)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(284);t.onChooseComputer=r.onChooseComputer;var i=n(290);t.onChoosePlayer=i.onChoosePlayer},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(64),i=n(7),o=n(41),a=n(115);t.onChooseComputer=function(e,t){e>=r.computerSwitcherX0&&e<r.computerSwitcherX1&&t>=r.computerSwitcherY0&&t<r.computerSwitcherY1&&(i.changeToComputer(),a.displayChosenUnits(),o.displayComputer(),o.displayTitle())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);t.playerSwitcherX0=r.armyLayoutWidth,t.playerSwitcherX1=r.armyLayoutWidth+r.armyLayoutWidth/2,t.playerSwitcherY0=0,t.playerSwitcherY1=r.titleHeight/2,t.computerSwitcherX0=t.playerSwitcherX1,t.computerSwitcherX1=t.computerSwitcherX0+r.armyLayoutWidth/2,t.computerSwitcherY0=0,t.computerSwitcherY1=r.titleHeight/2,t.playerSwitcherWidth=r.armyLayoutWidth/2,t.computerSwitcherWidth=r.armyLayoutWidth/2,t.goldX=t.playerSwitcherX0+t.playerSwitcherWidth,t.goldY=r.titleHeight/2+25},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(2),o=n(7);t.displayComputer=function(){var e="#ccc";"computer"===o.side&&(e="#fff"),i.mainMenuCtx.fillStyle=e,i.mainMenuCtx.fillRect(r.unitRosterWidth+r.armyLayoutWidth/2,0,r.armyLayoutWidth/2,r.titleHeight/2),i.mainMenuCtx.strokeRect(r.unitRosterWidth+r.armyLayoutWidth/2,0,r.armyLayoutWidth/2,r.titleHeight/2),i.mainMenuCtx.fillStyle="#000",i.mainMenuCtx.font="28px serif",i.mainMenuCtx.fillText("Computer",r.armyLayoutWidth+360,r.titleHeight/2-10)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),i=n(2),o=n(7);t.displayPlayer=function(){var e="#ccc";"player"===o.side&&(e="#fff"),i.mainMenuCtx.fillStyle=e,i.mainMenuCtx.fillRect(r.unitRosterWidth,0,r.armyLayoutWidth/2,r.titleHeight/2),i.mainMenuCtx.strokeRect(r.unitRosterWidth,0,r.armyLayoutWidth/2,r.titleHeight/2),i.mainMenuCtx.fillStyle="#000",i.mainMenuCtx.font="28px serif",i.mainMenuCtx.fillText("Player",r.armyLayoutWidth+120,r.titleHeight/2-10)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(7),o=n(58),a=n(38),s=n(64);t.displayRemainGold=function(){var e;"computer"===i.side?e=o.computerSpentGold:"player"===i.side&&(e=o.playerSpentGold),e>a.totalGold?r.mainMenuCtx.fillStyle="red":r.mainMenuCtx.fillStyle="#cdd1d6",r.mainMenuCtx.font="24px serif",r.mainMenuCtx.fillText(e+"/"+a.totalGold,s.goldX,s.goldY)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(41),i=n(4),o=n(0),a=n(2);t.displayTitle=function(){a.mainMenuCtx.clearRect(0,0,o.MAP_WIDTH,i.titleHeight),a.mainMenuCtx.fillStyle="#2c2f33",a.mainMenuCtx.fillRect(0,0,o.MAP_WIDTH,i.titleHeight),a.mainMenuCtx.fillStyle="#cdd1d6",a.mainMenuCtx.font="38px serif",a.mainMenuCtx.textAlign="center",r.displayPlayer(),r.displayComputer(),r.displayRemainGold()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(64),i=n(7),o=n(41),a=n(4),s=n(115);t.onChoosePlayer=function(e,t){e>=a.unitRosterWidth&&e<r.playerSwitcherX1&&t>=r.playerSwitcherY0&&t<r.playerSwitcherY1&&(i.changeToPlayer(),s.displayChosenUnits(),o.displayPlayer(),o.displayTitle())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(14),i=n(58),o=n(38),a=n(4),s=n(116);t.isStartBattleAvailable=function(){var e=r.computerArmy.length,t=r.playerArmy.length,n=o.totalGold-i.computerSpentGold,l=o.totalGold-i.playerSpentGold;e<1||t<1?(a.disableStartBattleButton(),s.drawBottomLayout()):n<0||l<0?(a.disableStartBattleButton(),s.drawBottomLayout()):(a.enableStartBattleButton(),s.drawBottomLayout())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(117),i=n(25),o=n(25);t.drawBottomLayout=function(){r.fillLayout(),i.showStartBattleButton(),o.showText()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(65);t.isStartBattleButtonSelected=function(e,t){var n=r.startBattleButtonX,i=n+r.startBattleButtonWidth,o=r.startBattleButtonY,a=o+r.startBattleButtonHeight;return e>=n&&e<i&&t>=o&&t<a}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);t.startBattleButtonX=Math.round(r.startBattleWidth/3)+120,t.startBattleButtonY=r.startBattleStartY+15,t.startBattleButtonWidth=200,t.startBattleButtonHeight=40,t.startBattleTextX=t.startBattleButtonX+30,t.startBattleTextY=t.startBattleButtonY+30},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(59),o=n(65);t.showStartBattleButton=function(){var e;e=i.startBattleAvailable?"#fff":"#ccc",r.mainMenuCtx.fillStyle=e,r.mainMenuCtx.fillRect(o.startBattleButtonX,o.startBattleButtonY,o.startBattleButtonWidth,o.startBattleButtonHeight)},t.showText=function(){r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.font="32px serif",r.mainMenuCtx.textAlign="left",r.mainMenuCtx.fillText("Start Battle",o.startBattleTextX,o.startBattleTextY)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(297);t.onChooseBattleSettings=r.onChooseBattleSettings,t.onChooseInfo=r.onChooseInfo,t.onChooseUnitInfo=r.onChooseUnitInfo;var i=n(120);t.displayInfo=i.displayInfo;var o=n(121);t.battleSettingSwitcher=o.battleSettingSwitcher,t.showSwither=o.showSwither,t.unitInfoSwitcher=o.unitInfoSwitcher},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(118);t.onChooseBattleSettings=r.onChooseBattleSettings;var i=n(298);t.onChooseInfo=i.onChooseInfo;var o=n(119);t.onChooseUnitInfo=o.onChooseUnitInfo},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(118),i=n(4),o=n(119),a=n(120);t.onChooseInfo=function(e,t){r.onChooseBattleSettings(e,t)&&(i.changeBattleSettingsToTrue(),a.displayInfo()),o.onChooseUnitInfo(e,t)&&(i.changeUnitInfoToTrue(),a.displayInfo())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(4),o=n(121);t.displayInfo=function(){r.mainMenuCtx.clearRect(i.armyLayoutWidth+i.unitRosterWidth,i.titleHeight,i.infoLayoutWidth,i.infoLayoutHeight),r.mainMenuCtx.fillStyle="#cdd1d6",r.mainMenuCtx.fillRect(i.armyLayoutWidth+i.unitRosterWidth,i.titleHeight,i.infoLayoutWidth,i.infoLayoutHeight),o.showSwither()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(122),i=n(123),o=n(301),a=n(39),s=n(114);t.showSwither=function(){r.battleSettingSwitcher(),i.unitInfoSwitcher(),a.showBattleSettings?s.showTotalGold():o.unitInfo()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(302);t.unitInfo=r.unitInfo,t.displayUnitInfo=r.displayUnitInfo},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(62),o=n(62),a=n(108),s=n(303),l=["name","cost","type","health","speed","armour","range","mobility","meleeDamage","missileDamage","charge","visibility"];t.unitInfo=function(){s.displayTitle(),t.displayUnitInfo(a.hoveredUnit)},t.displayUnitInfo=function(e){if(o.setDefault(),r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.font="24px serif",r.mainMenuCtx.textAlign="left",a.hoveredUnit)for(var t=0,n=l;t<n.length;t++){var s=n[t];r.mainMenuCtx.fillText(s,i.propertyStartX,i.propertyStartY),r.mainMenuCtx.fillText(e[s],i.valueStartX,i.valueStartY),o.changeY()}else r.mainMenuCtx.fillText("No unit selected",i.propertyStartX,i.propertyStartY)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(304);t.displayTitle=r.displayTitle},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=n(15);t.displayTitle=function(){r.mainMenuCtx.fillStyle="#000",r.mainMenuCtx.font="24px serif",r.mainMenuCtx.textAlign="left",r.mainMenuCtx.fillText("Unit Info:",i.unitInfoTitleX,i.unitInfoTitleY)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(306);t.dragAndDrop=r.dragAndDrop},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),i=n(2),o=n(4),a=n(59),s=n(14),l=n(37),u=n(60),c=n(60),d=n(56),f=n(105),h=n(1),g=n(0),y=n(63),v=n(40),m=n(112),p=n(110),M=n(61),U=n(61),_=n(25),b=n(26);t.dragAndDrop=function(){r.dragAndDropCanvas.addEventListener("click",function(e){var n=e.offsetX,r=e.offsetY;if(U.changeTotalGold(n,r),M.onChooseInfo(n,r),y.onChoosePlayer(n,r),y.onChooseComputer(n,r),m.isUnitShouldBeRemoved(n,r)){var l=m.isUnitShouldBeRemoved(n,r);o.decreaseSpentGold(l.cost),s.removeUnitFromArmy(l),v.displayChosenUnits(),y.displayTitle(),i.dragAndDropCanvasCtx.clearRect(0,0,g.MAP_WIDTH,g.CANVAS_HEIGHT),_.isStartBattleAvailable()}if(a.startBattleAvailable&&_.isStartBattleButtonSelected(n,r)&&b.activateBattleMode(),c.selectedUnitInRoster)if(t.isUnitAddedToArmy(n,r)){l=t.isUnitAddedToArmy(n,r);s.addUnitToArmy(l),v.displayChosenUnits(),o.increaseSpentGold(l.cost),y.displayTitle(),i.dragAndDropCanvasCtx.clearRect(0,0,g.MAP_WIDTH,g.CANVAS_HEIGHT),_.isStartBattleAvailable()}else v.displayChosenUnits(),i.dragAndDropCanvasCtx.clearRect(0,0,g.MAP_WIDTH,g.CANVAS_HEIGHT);t.onChooseRoster(n,r)}),r.dragAndDropCanvas.addEventListener("mousemove",function(e){var n=e.offsetX,r=e.offsetY;if(t.onDragUnit(n,r),v.onChooseUnitInArmy(n,r),f.isUnitSelectedInRoster(n,r)){var i=f.isUnitSelectedInRoster(n,r);o.hoveredUnit?i.x!==o.hoveredUnit.x&&i.y!==o.hoveredUnit&&(o.changeHoveredUnit(i),M.displayInfo()):o.changeHoveredUnit(i),o.showUnitInfo||(o.changeUnitInfoToTrue(),M.displayInfo())}})},t.onChooseRoster=function(e,t){for(var n=null,r=d.rosterImgWidth,i=d.rosterImgHeight,a=0,s=l.roster;a<s.length;a++){var c=s[a],f=c.x,h=c.y;e>=f&&e<f+r&&t>=h&&t<h+i&&(n=c)}u.selectUnitInRoster(n),o.changeHoveredUnit(n),M.displayInfo()},t.onDragUnit=function(e,t){if(c.selectedUnitInRoster){var n=e-d.rosterImgWidth/2,r=t-d.rosterImgHeight/2;h.loadImage(c.selectedUnitInRoster.imgSrc,function(e,t){i.dragAndDropCanvasCtx.clearRect(0,0,g.MAP_WIDTH,g.CANVAS_HEIGHT),i.dragAndDropCanvasCtx.drawImage(t,n,r,d.rosterImgWidth,d.rosterImgHeight)})}},t.isUnitAddedToArmy=function(e,t){var n=v.armyImgWidth,r=v.armyImgHeight,i=p.emptyBox.x,o=p.emptyBox.y;return!p.emptyBox.filled&&e>=i&&e<i+n&&t>=o&&t<o+r?c.selectedUnitInRoster:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(25);t.isStartBattleAvailable=r.isStartBattleAvailable,t.isStartBattleButtonSelected=r.isStartBattleButtonSelected,t.showStartBattleButton=r.showStartBattleButton,t.showText=r.showText;var i=n(116);t.drawBottomLayout=i.drawBottomLayout,t.fillLayout=i.fillLayout;var o=n(65);t.startBattleButtonX=o.startBattleButtonX,t.startBattleButtonY=o.startBattleButtonY,t.startBattleButtonWidth=o.startBattleButtonWidth,t.startBattleButtonHeight=o.startBattleButtonHeight,t.startBattleTextX=o.startBattleTextX,t.startBattleTextY=o.startBattleTextY},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(309);t.activateBattleMode=r.activateBattleMode;var i=n(315);t.activateMainMenuMode=i.activateMainMenuMode},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),i=n(12),o=n(0),a=n(26),s=n(310),l=n(311),u=n(21),c=n(44),d=n(45),f=n(18),h=n(124),g=n(316);t.activateBattleMode=function(){h.drawLoadingCanvas(),o.setBattleMode().then(function(){s.clearMainMenu(),g.fillUnitToIconMap(),l.createArmy().then(function(){return u.loadUnitIcons()}).then(function(){r.dragAndDropCanvas.style.zIndex="0",r.mainMenu.style.zIndex="0",i.auxiliaryCanvas.style.zIndex="6",d.eventCanvas.style.zIndex="5",i.canvas.style.zIndex="4",c.pathCanvas.style.zIndex="3",i.terrain.style.zIndex="2",i.backgroundCanvas.style.zIndex="1",f.loadingCanvas.style.zIndex="0",a.launchGame()})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),i=n(2);t.clearMainMenu=function(){i.mainMenuCtx.clearRect(0,0,r.MAP_WIDTH,r.CANVAS_HEIGHT),i.dragAndDropCanvasCtx.clearRect(0,0,r.MAP_WIDTH,r.CANVAS_HEIGHT)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(312),i=n(314);t.createArmy=function(){return new Promise(function(e){r.createPlayerArmy().then(function(){return i.createComputerArmy()}),e()})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(14),i=n(125),o=n(5),a=n(127),s=n(11);t.createPlayerArmy=function(){return new Promise(function(e){a.initializePlayerUnitsNodes().then(function(){for(var t=0,n=r.playerArmy;t<n.length;t++){var l=n[t],u=o.getRandomNode(a.playerUnitsNodes),c=l.name,d=u.x,f=u.y;s.createUnit(c,d,f,"player"),i.deleteNodeFromPlayerNodes(u)}e()})})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(126);t.deleteNodeFromComputerNodes=r.deleteNodeFromComputerNodes;var i=n(127);t.deleteNodeFromPlayerNodes=i.deleteNodeFromPlayerNodes},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(14),i=n(125),o=n(5),a=n(126),s=n(11);t.createComputerArmy=function(){a.initializeComputerUnitsNodes().then(function(){for(var e=0,t=r.computerArmy;e<t.length;e++){var n=t[e],l=o.getRandomNode(a.computerUnitsNodes),u=n.name,c=l.x,d=l.y;s.createUnit(u,c,d,"computer"),i.deleteNodeFromComputerNodes(l)}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),i=n(20),o=n(12),a=n(0),s=n(26),l=n(45),u=n(44),c=n(18);t.activateMainMenuMode=function(){r.dragAndDropCanvas.style.zIndex="6",r.mainMenu.style.zIndex="5",o.auxiliaryCanvas.style.zIndex="4",o.canvas.style.zIndex="3",o.terrain.style.zIndex="2",l.eventCanvas.style.zIndex="1",u.pathCanvas.style.zIndex="1",o.backgroundCanvas.style.zIndex="1",c.loadingCanvas.style.zIndex="1",i.clearMap(),a.setMainMenuMode(),s.launchGame()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(21);t.fillUnitToIconMap=function(){t.unitToIconMap={Archers:r.swordIconImage,HeavyCavalry:r.swordIconImage,Hoplites:r.spearAndShieldIconImage,LightCavalry:r.swordIconImage,LightInfantry:r.swordIconImage,HeavyInfantry:r.swordIconImage,Militia:r.swordIconImage,Peltasts:r.swordIconImage,Pikemen:r.spearIconImage,Scouts:r.swordIconImage}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9jb250ZXh0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS91bml0L3VuaXRzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvdHlwZXMvVW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvZ2VuZXJhbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvdW5pdC92aXNpYmxlVW5pdHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcC9jcmVhdGVNYXAvaW5pdGlhbE1hcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2NhbnZhcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvQUkvcG93ZXIvUG93ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3Jvc3Rlci9hcm15LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvaW5mb1NldHRpbmdzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS91bml0L2N1cnJlbnRseUNob3NlblVuaXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL2JhdHRsZVVJL3VuaXRQYW5lbC9pY29uL2RyYXdVbml0SWNvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2NhbnZhcy9sb2FkaW5nLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9ub2RlL2dldC9mcm9tTWFwLnRzIiwid2VicGFjazovLy8uL3NyYy9tYXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2ltYWdlcy91bml0SWNvbkltYWdlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvQUkvZW5lbWllcy9yZXZlYWxlZEVuZW1pZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvbW92ZW1lbnQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYXJteUxheW91dC9hcm15U2V0dGluZ3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYm90dG9tTGF5b3V0L2J1dHRvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGF1bmNoL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvY29udGV4dC9jb250ZXh0LnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9BSS9lbmVtaWVzL2hpZGluZ0VuZW1pZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3N1cnJvdW5kZWQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3N1cnJvdW5kZWQvZ2V0U3Vycm91bmRlZE5vZGVzLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9iYXR0bGVVSS91bml0UGFuZWwvc2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZHJhdy9kcmF3VW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21tb24vcHVyc3VlVW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21tb24vdXBkYXRlVW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9BSS9BSV9hY3Rpb25zLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9zdXJyb3VuZGVkL2dldFN1cnJvdW5kZWRVbml0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvcm9zdGVyL3Jvc3Rlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L2dvbGQvdG90YWxHb2xkLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvc2hvdy9zaG93SW5mby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9hcm15TGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3VwcGVyTGF5b3V0L2Rpc3BsYXkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9nbG9iYWwvZ2xvYmFsQ29uZmlnLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvY2FudmFzL3BhdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9jYW52YXMvZXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3VuaXQvdW5pdElkLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL2RhbWFnZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGF0aC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGF0aC9hU3Rhci9BU3Rhci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21tb24vbW92ZVRvLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9BSS9wb3dlci9wbGF5ZXJQb3dlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvQUkvcG93ZXIvY29tcHV0ZXJQb3dlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9yYW5kb20vZ2V0UmFuZG9tVW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvcHJvY2Vzc01vZHVsZS92dWxuZXJhYmlsaXR5L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9BSS9zdHJhdGVneU1vZHVsZS9kZWNpc2lvblVuaXQvY29tbWFuZE51bWJlci9jdXJyZW50Q29tbWFuZE51bWJlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9yb3N0ZXJMYXlvdXQvcm9zdGVyU2V0dGluZ3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvcm9zdGVyTGF5b3V0L2Rpc3BsYXkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS9nb2xkL3NwZW50R29sZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L3N0YXJ0QmF0dGxlL3N0YXJ0QmF0dGxlQXZhaWxhYmxlLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9yb3N0ZXIvc2VsZWN0ZWRVbml0LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9pbmZvU2V0dGluZ3MvaW5mb1NldHRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3VwcGVyTGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3VwcGVyTGF5b3V0L3VwcGVyTGF5b3V0U2V0dGluZ3MvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYm90dG9tTGF5b3V0L2JvdHRvbVNldHRpbmdzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9sYXVuY2gvYmF0dGxlL2xhdW5jaEJhdHRsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaW1hZ2UvbG9hZEltYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9vYmplY3Qvb2JqVXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvYWN0aW9ucy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL25vZGVzL2NyZWF0ZU5vZGVzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9ub2RlL3NodWZmbGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvZ2VuZXJhbC9nZW5lcmFsVXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvY2hvb3NlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3R5cGVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2NyZWF0ZS9jcmVhdGVVbml0LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9iYXR0bGVVSS91bml0UGFuZWwvaWNvbi9pY29uU2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3VuaXQvZGVmYXVsdFVuaXRzLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2RyYXcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZmlnaHRpbmcvYXJtb3VyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL2F0dGFja1NpZGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZmlnaHRpbmcvZmlnaHRBZ2FpbnN0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL21lbGVlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3JlbW92ZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL3VuaXQvc3BvdHRlZFVuaXRzLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL21lbGVlL2NoZWNrRmlnaHRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZmlnaHRpbmcvcmVmcmVzaG1lbnQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3JhbmRvbS9tZWxlZURhbWFnZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvYmF0dGxlVUkvdW5pdFBhbmVsL2Rpc3BsYXkvZGlzcGxheVVuaXRJY29ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcGF0aC9hU3Rhci9hU3RhclV0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9wYXRoL2RyYXcvZHJhd1BhdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvbW92ZW1lbnRVdGlscy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21tb24vbW92ZVRvTmV4dE5vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvbW92ZW1lbnQvY29tbW9uL3N0b3BNb3ZpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvcHJpb3JpdHkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvc2h1ZmZsZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9pbnRlcmNlcHRpb24vZ2V0SW50ZXJjZXB0ZWRFbmVtaWVzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L3VuaXRQb3NpdGlvbi9nZXRCbG9ja2VkRW5lbWllcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvYW5hbHl6ZU1vZHVsZS9wb3dlckFuYWx5emUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3JhbmRvbS9nZXRSYW5kb21WYWx1ZUluUmFuZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FJL3N0cmF0ZWd5TW9kdWxlL2RlY2lzaW9uVW5pdC9yYW5kb21BY3Rpb24vQ29tbWFuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9BSS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvcHJvY2Vzc01vZHVsZS93ZWlnaHQvY2FsY3VsYXRlVW5pdHNXZWlnaHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvbW92ZW1lbnQvY29tcHV0ZXIvYmVDbG9zZVRvLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3Jvc3RlckxheW91dC91bml0L2lzVW5pdFNlbGVjdGVkSW5Sb3N0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS9sYXlvdXRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvbGF5b3V0cy91cHBlckxheW91dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L3VuaXQvaG92ZXJlZFVuaXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYXJteUxheW91dC9hcm15L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2FybXlMYXlvdXQvYXJteS9kaXNwbGF5QXJteS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9hcm15TGF5b3V0L2ljb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYXJteUxheW91dC9yZW1vdmUvcmVtb3ZlVW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2JhdHRsZUluZm8vbW9uZXlCb3gvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9iYXR0bGVJbmZvL3RvdGFsR29sZC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9ib3R0b21MYXlvdXQvbGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2JvdHRvbUxheW91dC9sYXlvdXQvZmlsbExheW91dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2luZm8vY2hvb3NlL2JhdHRsZVNldHRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvaW5mby9jaG9vc2UvdW5pdEluZm8udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9pbmZvL2Rpc3BsYXkvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9pbmZvL3N3aXRjaGVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvaW5mby9zd2l0Y2hlci9iYXR0bGVTZXR0aW5nU3dpdGNoZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9pbmZvL3N3aXRjaGVyL3VuaXRJbmZvU3dpdGNoZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhdW5jaC9sb2FkaW5nL2RyYXdMb2FkaW5nQ2FudmFzLnRzIiwid2VicGFjazovLy8uL3NyYy9iYXR0bGUvcm9zdGVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9iYXR0bGUvcm9zdGVyL25vZGVzL2NvbXB1dGVyTm9kZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhdHRsZS9yb3N0ZXIvbm9kZXMvcGxheWVyTm9kZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhdW5jaC9iYXR0bGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9jYW52YXMvYXV4aWxpYXJ5LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFwL21hcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21hcC9ncmlkU2l6ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2dsb2JhbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2NhbnZhcy9iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvY2FudmFzL2NhbnZhcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2NhbnZhcy90ZXJyYWluLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvY2FudmFzL2RyYWdBbmREcm9wLnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvY2FudmFzL21haW5NZW51LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9pbWFnZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbm9kZS9hZGQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvYWRkL3RvQXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL29iamVjdC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbm9kZS9kaXN0YW5jZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbm9kZS9kaXN0YW5jZS9kaXN0YW5jZUluR3JpZHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvZ2V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9ub2RlL2dldC9mcm9tQXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvZ2V0L2Nsb3Nlc3RUb0VuZW15LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L2FjdGlvbnMvdW5pdEFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvZ2V0L2ZhcnRoZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy9tYXAvY2xlYXJNYXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcC9jbGVhck1hcC9jbGVhck1hcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL2dyaWQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcC9ncmlkL2RyYXdHcmlkLnRzIiwid2VicGFjazovLy8uL3NyYy9tYXAvbmVpZ2hib3JzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tYXAvbmVpZ2hib3JzL2FkZE5laWdoYm9ycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL25vZGVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tYXAvbm9kZXMvTWFwTm9kZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL29ic3RhY2xlcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL29ic3RhY2xlcy9jcmVhdGVPYnN0YWNsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFwL29ic3RhY2xlcy9jcmVhdGVPYnN0YWNsZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcC9vYnN0YWNsZXMvdW5pdE9ic3RhY2xlLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9zZWFyY2gvYmluYXJ5U2VhcmNoLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9ub2RlL2dldC9mcm9tTm9kZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbm9kZS9yYW5kb20vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvcmFuZG9tL3JhbmRvbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbm9kZS9zaHVmZmxlL3NodWZmbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL25vZGUvc3Vycm91bmRlZC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbm9kZS9zdXJyb3VuZGVkL2dldFN1cnJvdW5kZWRCbG9ja2VkTm9kZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3N1cnJvdW5kZWQvZ2V0U3Vycm91bmRlZEVuZW1pZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3N1cnJvdW5kZWQvZ2V0U3Vycm91bmRlZEFsbGllcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9wcm9wZXJ0eS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC9wcm9wZXJ0eS9wcm9wZXJ0eS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdW5pdC91bml0UG9zaXRpb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvdW5pdFBvc2l0aW9uL3Bvc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L3VuaXRQb3NpdGlvbi9nZXRVbml0c09uVGhlTm9kZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZHJhdy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZHJhdy9kcmF3QmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZHJhdy9kcmF3T2JzdGFjbGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvY2hvb3NlL2Nob29zZVVuaXRUeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3R5cGVzL0FyY2hlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy91bml0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvdW5pdC91bml0Q29uZmlnLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3R5cGVzL0hlYXZ5Q2F2YWxyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC90eXBlcy9IZWF2eUluZmFudHJ5LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3R5cGVzL0hvcGxpdGVzLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3R5cGVzL0xpZ2h0Q2F2YWxyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC90eXBlcy9MaWdodEluZmFudHJ5LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3R5cGVzL01pbGl0aWEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvdHlwZXMvUGVsdGFzdHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvdHlwZXMvUGlrZW1lbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC90eXBlcy9TY291dHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvY2hvb3NlL29uQ2hvb3NlVW5pdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9jcmVhdGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZmlnaHRpbmcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZmlnaHRpbmcvYXJtb3VyL2FybW91clBlbmV0cmF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL2F0dGFja1NpZGUvYXR0YWNrU2lkZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9maWdodGluZy9jaGFyZ2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VuaXQvZmlnaHRpbmcvY2hhcmdlL2NoYXJnZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9maWdodGluZy9kYW1hZ2UvZGFtYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL2ZpZ2h0QWdhaW5zdC91bml0RmlnaHRBZ2FpbnN0LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL21lbGVlL2NoZWNrSGVhbHRoLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L3JlbW92ZS9yZW1vdmVVbml0LnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS91bml0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL3JlZnJlc2htZW50L3JlZnJlc2htZW50LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL21lbGVlL21lbGVlQXR0YWNrLnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L2ZpZ2h0aW5nL21lbGVlL21lbGVlQ29tYmF0LnRzIiwid2VicGFjazovLy8uL3NyYy91bml0L21vdmVtZW50L2NvbW1vbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21tb24vYXR0YWNrLnRzIiwid2VicGFjazovLy8uL3NyYy9wYXRoL2ZpbmQvZmluZFBhdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvbW92ZW1lbnRVdGlscy9vdXRPZkNvbWJhdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21tb24vbWFrZU1vdmVtZW50LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L3ByaW9yaXR5L2Fzc2Vzc1ByaW9yaXR5LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L3NodWZmbGUvc2h1ZmZsZVVuaXRzLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L3NodWZmbGUvc2h1ZmZsZUlELnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91bml0L2ludGVyY2VwdGlvbi9nZXRJbnRlcmNlcHRpb25Ob2Rlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9zcG90dGluZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9zcG90dGluZy91bml0U3BvdHRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWVMb29wLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tZXNzYWdlcy9kcmF3TWVzc2FnZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvYmF0dGxlVUkvdW5pdFBhbmVsL2ljb24vY2xpY2tJY29uLnRzIiwid2VicGFjazovLy8uL3NyYy9BSS9zdHJhdGVneU1vZHVsZS9jb250cm9sVW5pdC9jb21wdXRlckFjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvc3RyYXRlZ3lNb2R1bGUvZGVjaXNpb25Vbml0L21hcENoYW5nZXNEZXRlY3Rpb24vUHJldmlvdXNTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvQUkvcG93ZXIvaW5pdGlhbENvbXB1dGVyUG93ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL0FJL3Bvd2VyL2luaXRpYWxQbGF5ZXJQb3dlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RvcmUvQUkvcG93ZXIvdmlzaWJsZVBsYXllclVuaXRzUG93ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL0FJL3Bvd2VyL3JldmVhbGVkVW5pdHNQb3dlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvc3RyYXRlZ3lNb2R1bGUvZGVjaXNpb25Vbml0L21hcENoYW5nZXNEZXRlY3Rpb24vY2hhbmdlUG9zaXRpb25EZXRlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FJL3N0cmF0ZWd5TW9kdWxlL2NvbnRyb2xVbml0L21vdmVVbml0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvc3RyYXRlZ3lNb2R1bGUvZGVjaXNpb25Vbml0L2Jlc3RQb3NpdGlvbkFsZ29yaXRobS9iZXN0QWN0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvc3RyYXRlZ3lNb2R1bGUvZGVjaXNpb25Vbml0L3JhbmRvbUFjdGlvbi9nZW5lcmF0ZVJhbmRvbUFjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvcmFuZG9tL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9yYW5kb20vcmFuZ2VXaXRoUHJvYmFiaWxpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FJL3N0cmF0ZWd5TW9kdWxlL2RlY2lzaW9uVW5pdC9yYW5kb21BY3Rpb24vQWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9xdWV1ZXMvQ29tbWFuZFF1ZXVlLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9BSS9jb21tYW5kcy9Db21tYW5kcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvcHJvY2Vzc01vZHVsZS9lZmZpY2llbmN5L3RvdGFsRWZmaWNpZW5jeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQUkvcHJvY2Vzc01vZHVsZS9lZmZpY2llbmN5L2NhbGN1bGF0ZUVmZmljaWVuY3kudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3VuaXQvZXhwbG9yYXRpb24vZ2V0RXhwbG9yYXRpb25Ob2RlLnRzIiwid2VicGFjazovLy8uL3NyYy9BSS9wcm9jZXNzTW9kdWxlL3Rhc2tzL2Fzc2lnbkV4cGxvcmF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9BSS9hbmFseXplTW9kdWxlL3VuaXRBbmFseXplLnRzIiwid2VicGFjazovLy8uL3NyYy9BSS9wcm9jZXNzTW9kdWxlL3NpbXVsYXRpb25zL3NpbXVsYXRlRmlnaHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FJL3Byb2Nlc3NNb2R1bGUvdnVsbmVyYWJpbGl0eS90b3RhbFZ1bG5lcmFiaWxpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FJL3Byb2Nlc3NNb2R1bGUvdnVsbmVyYWJpbGl0eS9hc3Nlc3NWdWxuZXJhYmlsaXR5LnRzIiwid2VicGFjazovLy8uL3NyYy9BSS9zdHJhdGVneU1vZHVsZS9kZWNpc2lvblVuaXQvY29tbWFuZE51bWJlci9zZXRDb21tYW5kTnVtYmVyVG9Vbml0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdW5pdC9tb3ZlbWVudC9jb21wdXRlci9hZHZhbmNlLnRzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9xdWV1ZXMvUHJpb3JpdHlRdWV1ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGF1bmNoL2dhbWUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhdW5jaC9nYW1lL2xhdW5jaEdhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhdW5jaC9tYWluTWVudS9sYXVuY2hNYWluTWVudS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9yb3N0ZXJMYXlvdXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvcm9zdGVyTGF5b3V0L3VuaXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvcm9zdGVyTGF5b3V0L3Jvc3RlclNldHRpbmdzL3NldHRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3Jvc3RlckxheW91dC9kaXNwbGF5L2Rpc3BsYXlSb3N0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS9nb2xkL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvbGF5b3V0cy9hcm15TGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvbGF5b3V0cy9hcm15TGF5b3V0L2xheW91dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9sYXlvdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS9sYXlvdXRzL3Jvc3RlckxheW91dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L2xheW91dHMvcm9zdGVyTGF5b3V0L2xheW91dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L2xheW91dHMvYm90dG9tTGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvbGF5b3V0cy9ib3R0b21MYXlvdXQvbGF5b3V0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvbGF5b3V0cy91cHBlckxheW91dC9sYXlvdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS9zaG93L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvbWFpbk1lbnUvc2lkZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS9zdGFydEJhdHRsZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL21haW5NZW51L3VuaXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tYWluTWVudS91bml0L3VuaXRzLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3Jvc3RlckxheW91dC9kaXNwbGF5L2Rpc3BsYXlVbml0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9yb3N0ZXJMYXlvdXQvY29pbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9yb3N0ZXJMYXlvdXQvY29pbi9kcmF3Q29pbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9yb3N0ZXJMYXlvdXQvZGlzcGxheS9kaXNwbGF5VGl0bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYXJteUxheW91dC9pY29uL3JlbW92ZUljb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYXJteUxheW91dC9yZW1vdmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYXJteUxheW91dC91bml0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2FybXlMYXlvdXQvdW5pdC9jaG9vc2VVbml0LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2FybXlMYXlvdXQvdW5pdC9jaG9zZW5Vbml0cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2JhdHRsZUluZm8vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC9iYXR0bGVJbmZvL21vbmV5Qm94L2RyYXdNb25leUJveC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2luZm9TZXR0aW5ncy9iYXR0bGVTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2JhdHRsZUluZm8vdG90YWxHb2xkL3RvdGFsR29sZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy91cHBlckxheW91dC9jaG9vc2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvdXBwZXJMYXlvdXQvY2hvb3NlL29uQ2hvb3NlQ29tcHV0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvdXBwZXJMYXlvdXQvdXBwZXJMYXlvdXRTZXR0aW5ncy9zZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy91cHBlckxheW91dC9kaXNwbGF5L2NvbXB1dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3VwcGVyTGF5b3V0L2Rpc3BsYXkvcGxheWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3VwcGVyTGF5b3V0L2Rpc3BsYXkvcmVtYWluR29sZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy91cHBlckxheW91dC9kaXNwbGF5L3RpdGxlLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL3VwcGVyTGF5b3V0L2Nob29zZS9vbkNob29zZVBsYXllci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9ib3R0b21MYXlvdXQvYnV0dG9uL2J1dHRvbkF2YWlsYWJsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9ib3R0b21MYXlvdXQvbGF5b3V0L2RyYXdsYXlvdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYm90dG9tTGF5b3V0L2J1dHRvbi9idXR0b25TZWxlY3RlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9ib3R0b21MYXlvdXQvYm90dG9tU2V0dGluZ3MvbGF5b3V0U2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYm90dG9tTGF5b3V0L2J1dHRvbi9zaG93QnV0dG9uLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvaW5mby9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2luZm8vY2hvb3NlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvaW5mby9jaG9vc2UvaW5mby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2luZm8vZGlzcGxheS9kaXNwbGF5SW5mby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L2luZm8vc3dpdGNoZXIvc2hvd1N3aXRjaGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvdW5pdEluZm8vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dC91bml0SW5mby91bml0SW5mby50cyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvbWFpbk1lbnUvbGF5b3V0cy9pbmZvTGF5b3V0L3RpdGxlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9sYXlvdXRzL2luZm9MYXlvdXQvdGl0bGUvZGlzcGxheVRpdGxlLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9tYWluL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9tYWluL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL21haW5NZW51L2xheW91dHMvYm90dG9tTGF5b3V0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9sYXVuY2gvbW9kZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhdW5jaC9tb2Rlcy9iYXR0bGVNb2RlLnRzIiwid2VicGFjazovLy8uL3NyYy9VSS9tYWluTWVudS9zZXR0aW5ncy9jbGVhck1haW5NZW51LnRzIiwid2VicGFjazovLy8uL3NyYy9iYXR0bGUvcm9zdGVyL2FybXkvY3JlYXRlQXJteS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmF0dGxlL3Jvc3Rlci9hcm15L3BsYXllckFybXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhdHRsZS9yb3N0ZXIvbm9kZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhdHRsZS9yb3N0ZXIvYXJteS9jb21wdXRlckFybXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhdW5jaC9tb2Rlcy9tYWluTWVudU1vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2ltYWdlcy91bml0VG9JY29uTWFwLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibWFwXzEiLCJNQVBfSEVJR0hUIiwiTUFQX1dJRFRIIiwiQ0FOVkFTX0hFSUdIVCIsImdyaWRTaXplIiwiZ2xvYmFsXzEiLCJtYWluTWVudU1vZGUiLCJzZXRCYXR0bGVNb2RlIiwic2V0TWFpbk1lbnVNb2RlIiwiaW1hZ2VfMSIsImxvYWRJbWFnZSIsIm5vZGVfMSIsImdldE5vZGVGcm9tTWFwIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVW5pdEFuZE5vZGVJbkdyaWRzIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzIiwiYWRkTm9kZUludG9BcnJheSIsImdldE5vZGVGcm9tQXJyYXkiLCJnZXRNaW5WYWx1ZUZyb21Ob2RlcyIsImdldE1heFZhbHVlRnJvbU5vZGVzIiwib2JqVXRpbHNfMSIsImRlbGV0ZU9iamVjdEZyb21BcnJheSIsImlzT2JqZWN0SW5BcnJheSIsImlzT2JqZWN0RW1wdHkiLCJ1bml0XzEiLCJhZGRVbml0SW50b0FycmF5IiwiYW5vdGhlclVuaXRJc09uVGhlV2F5IiwiZGVsZXRlVW5pdEZyb21BcnJheSIsImRlbGV0ZVVuaXRGcm9tQXJteSIsImdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5HcmlkcyIsImdldFVuaXRzTWluUHJvcGVydHkiLCJnZXRVbml0c01heFByb3BlcnR5IiwiaXNVbml0SW5BcnJheSIsInN1cnJvdW5kZWRfMSIsImdldFN1cnJvdW5kZWROb2RlcyIsImdldFN1cnJvdW5kZWRFbmVtaWVzIiwiZHJhd18xIiwiZHJhd0JhY2tncm91bmQiLCJkcmF3T2JzdGFjbGUiLCJjb250ZXh0XzEiLCJjdHgiLCJhdXhpbGlhcnlDdHgiLCJiYWNrZ3JvdW5kQ3R4IiwiZHJhZ0FuZERyb3BDYW52YXNDdHgiLCJtYWluTWVudUN0eCIsInRlcnJhaW5DdHgiLCJ1dGlsc18xIiwiZ2VuZXJhbF8xIiwidW5pdHMiLCJwbGF5ZXJVbml0cyIsImNvbXB1dGVyVW5pdHMiLCJhZGRUb1VuaXRzIiwidW5pdCIsIkVycm9yIiwiY29udHJvbEJ5IiwiYWRkVG9Db21wdXRlclVuaXRzIiwicHVzaCIsImFkZFRvUGxheWVyVW5pdHMiLCJyZW1vdmVGcm9tVW5pdHMiLCJyZW1vdmVGcm9tQ29tcHV0ZXJVbml0cyIsInJlbW92ZUZyb21QbGF5ZXJVbml0cyIsInJlbW92ZUFsbENvbXB1dGVyVW5pdHMiLCJyZW1vdmVBbGxQbGF5ZXJVbml0cyIsInJlbW92ZUFsbFVuaXRzIiwiZ29sZF8xIiwiZGVjcmVhc2VTcGVudEdvbGQiLCJpbmNyZWFzZVNwZW50R29sZCIsInNldFRvdGFsR29sZCIsImxheW91dHNfMSIsImFybXlMYXlvdXRIZWlnaHQiLCJhcm15TGF5b3V0V2lkdGgiLCJpbmZvTGF5b3V0SGVpZ2h0IiwiaW5mb0xheW91dFdpZHRoIiwidW5pdFJvc3RlckhlaWdodCIsInVuaXRSb3N0ZXJXaWR0aCIsInN0YXJ0QmF0dGxlU3RhcnRZIiwic3RhcnRCYXR0bGVIZWlnaHQiLCJzdGFydEJhdHRsZVdpZHRoIiwidGl0bGVIZWlnaHQiLCJzaG93XzEiLCJjaGFuZ2VCYXR0bGVTZXR0aW5nc1RvVHJ1ZSIsImNoYW5nZVVuaXRJbmZvVG9UcnVlIiwic2hvd0JhdHRsZVNldHRpbmdzIiwic2hvd1VuaXRJbmZvIiwic2lkZXNfMSIsImNoYW5nZVRvQ29tcHV0ZXIiLCJjaGFuZ2VUb1BsYXllciIsInNpZGUiLCJzdGFydEJhdHRsZV8xIiwiZGlzYWJsZVN0YXJ0QmF0dGxlQnV0dG9uIiwiZW5hYmxlU3RhcnRCYXR0bGVCdXR0b24iLCJzdGFydEJhdHRsZUF2YWlsYWJsZSIsImNoYW5nZUhvdmVyZWRVbml0IiwiaG92ZXJlZFVuaXQiLCJjb21wdXRlckhhc1VuaXRzIiwicGxheWVySGFzVW5pdHMiLCJhZGRfMSIsImRpc3RhbmNlXzEiLCJnZXRfMSIsInJhbmRvbV8xIiwiZ2V0UmFuZG9tTm9kZSIsInNodWZmbGVfMSIsInNodWZmbGVOb2RlcyIsImdldFN1cnJvdW5kZWRCbG9ja2VkTm9kZXMiLCJjb25maWdfMSIsIlVuaXQiLCJpZCIsIngiLCJ5IiwidGhpcyIsInJhZGl1cyIsImlzQ3VycmVudGx5Q2hvc2VuIiwiaW1nU3JjIiwiaXNNb3ZpbmciLCJpc1Zpc2libGUiLCJ1bml0VG9QdXJzdWUiLCJpc0ZpZ2h0aW5nIiwiZmlndGhBZ2FpbnN0IiwiZnJvbnQiLCJmbGFuayIsInJlYXIiLCJhbGwiLCJoZWFsdGgiLCJzcGVlZCIsImFybW91ciIsInJhbmdlIiwibW9iaWxpdHkiLCJtZWxlZURhbWFnZSIsIm1pc3NpbGVEYW1hZ2UiLCJzaG90c1JlbWFpbmVkIiwiY2hhcmdlIiwiZGlzY2lwbGluZSIsIndlaWdodCIsInZpc2liaWxpdHkiLCJtb3JhbGUiLCJjb25kaXRpb24iLCJiYXNlTm9kZSIsImlzVW5pdFVuZGVyUHJvdGVjdGlvbiIsImlzVW5pdE5lZWRIZWxwIiwiYmVDbG9zZVRvIiwiZnJvemVuIiwiY2VudGVyWCIsImNlbnRlclkiLCJjdXJyZW50Tm9kZSIsIm5leHROb2RlIiwic2V0WCIsInNldFkiLCJzZXRJc01vdmluZ1RvRmFsc2UiLCJzZXRJc01vdmluZ1RvVHJ1ZSIsInNldFVuaXRUb1B1cnN1ZSIsIm9wcG9uZW50c1VuaXQiLCJzZXRVbml0VG9QdXJzdWVUb051bGwiLCJzZXRJc0ZpZ2h0aW5nVG9UcnVlIiwic2V0SXNGaWdodGluZ1RvRmFsc2UiLCJhc3NpZ25Nb3ZlVG9Qb3NpdGlvbiIsIm5vZGUiLCJtb3ZlVG9Ob2RlIiwicmVtb3ZlRW5lbXlGcm9tRmxhbmsiLCJvcHBvbmVudCIsImxlbmd0aCIsImluY3JlYXNlQ29uZGl0aW9uIiwiZGVjcmVhc2VDb25kaXRpb24iLCJzZXRDdXJyZW50Tm9kZSIsImZvdW5kTm9kZSIsInNldE5leHROb2RlIiwiYXNzaWduRW5lbXkiLCJlbmVteSIsImZyb250RW5lbXlOb2RlIiwibmV3RW5lbXlOb2RlIiwidW5pdE5vZGUiLCJmcm9udEVuZW15RGlmZlgiLCJmcm9udEVuZW15RGlmZlkiLCJuZXdFbmVteURpZmZYIiwibmV3RW5lbXlEaWZmWSIsImluY3JlYXNlV2VpZ2h0SW5QZXJjZW50YWdlIiwicGVyY2VudGFnZSIsIm5ld1dlaWdodCIsIk1hdGgiLCJyb3VuZCIsInJlbW92ZUVuZW15RnJvbUZpZ2h0QWdhaW5zdCIsImFycmFuZ2VGaWdodEFnYWluc3QiLCJfaSIsIl9hIiwidXBkYXRlZEZsYW5rIiwiYXNzaWduIiwidXBkYXRlZFJlYXIiLCJ1cGRhdGVkRmxhbmtfMSIsImNsZWFyRmlnaHRBZ2FpbnN0IiwiYXNzaWduVGFzayIsInRhc2siLCJjb25zb2xlIiwiZXJyb3IiLCJjbGVhclRhc2siLCJzZXRJc1VuaXRVbmRlclByb3RlY3Rpb25Ub1RydWUiLCJzZXRJc1VuaXRVbmRlclByb3RlY3Rpb25Ub0ZhbHNlIiwiYXNzaWduVW5pdFRvUHJvdGVjdCIsInVuaXRJZCIsInVuaXRUb1Byb3RlY3QiLCJjbGVhclVuaXRUb1Byb3RlY3QiLCJzZXRJc1VuaXROZWVkSGVscFRvVHJ1ZSIsInNldElzVW5pdE5lZWRIZWxwVG9GYWxzZSIsImFzc2lnblVuaXRUb0hlbHAiLCJ1bml0VG9IZWxwIiwiY2xlYXJVbml0VG9IZWxwIiwiYXNzaWduQmFzZU5vZGUiLCJyZW1vdmVCYXNlTm9kZSIsInNldENvbW1hbmROdW1iZXIiLCJjb21tYW5kTnVtYmVyIiwiZGVmYXVsdCIsImdlbmVyYWxVdGlsc18xIiwiZ2V0VW5pdEJ5SWQiLCJ2aXNpYmxlRm9yUGxheWVyVW5pdHMiLCJ2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyIsImFkZFVuaXRJbnRvVmlzaWJsZVVuaXRzIiwicmVtb3ZlVW5pdEZyb21WaXNpYmxlVW5pdHMiLCJfXzEiLCJjcmVhdGVOb2Rlc18xIiwiaW5pdGlhbE1hcCIsInNlYXJjaE1hcCIsImNyZWF0ZU1hcCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY3JlYXRlTm9kZXMiLCJpbml0aWFsaXplU2VhcmNoTWFwIiwibWFwIiwiY3JlYXRlU2VhcmNoTWFwIiwiYWRkT2JzdGFjbGVzVG9NYXAiLCJjcmVhdGVPYnN0YWNsZXMiLCJjcmVhdGVPbmVPYnN0YWNsZSIsImluaXRpYWxpemVNYXAiLCJ0aGVuIiwiYWRkTmVpZ2hib3JzIiwiY2hvb3NlXzEiLCJvbkNob29zZVVuaXQiLCJjaG9vc2VVbml0VHlwZSIsImNyZWF0ZV8xIiwiY3JlYXRlVW5pdCIsImRyYXdVbml0IiwicmVkcmF3VW5pdHMiLCJmaWdodGluZ18xIiwiYXJtb3VyUGVuZXRyYXRpb24iLCJjaGVja0F0dGFja1NpZGUiLCJjYWxjdWxhdGVDaGFyZ2UiLCJjYWxjdWxhdGVEYW1hZ2UiLCJjYWxjdWxhdGVEYW1hZ2VCYXNlT25FbmVteVBvc2l0aW9uIiwiY2FsY3VsYXRlRGFtYWdlV2hlbkl0c0xlc3NUaGFuT25lIiwicmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0IiwiZmluZFVuaXRJbkZpZ2h0QWdhaW5zdCIsImlzVW5pdEZpZ2h0aW5nIiwiY2hlY2tIZWFsdGgiLCJtZWxlZUF0dGFjayIsIm1lbGVlQ29tYmF0IiwicmVmcmVzaG1lbnQiLCJtb3ZlbWVudF8xIiwidXBkYXRlVW5pdCIsInB1cnN1ZVVuaXQiLCJzcG90dGluZ18xIiwic3BvdEVuZW15IiwiaXNVbml0U3BvdHRlZEJ5RW5lbXkiLCJzcG90VW5pdHMiLCJ0eXBlc18xIiwiQXJjaGVycyIsIkhlYXZ5SW5mYW50cnkiLCJIZWF2eUNhdmFscnkiLCJIb3BsaXRlcyIsIkxpZ2h0SW5mYW50cnkiLCJMaWdodENhdmFscnkiLCJNaWxpdGlhIiwiUGVsdGFzdHMiLCJQaWtlbWVuIiwiU2NvdXRzIiwiYXV4aWxpYXJ5XzEiLCJhdXhpbGlhcnlDYW52YXMiLCJiYWNrZ3JvdW5kXzEiLCJiYWNrZ3JvdW5kQ2FudmFzIiwiY2FudmFzXzEiLCJjYW52YXMiLCJ0ZXJyYWluXzEiLCJ0ZXJyYWluIiwiZHJhZ0FuZERyb3BfMSIsImRyYWdBbmREcm9wQ2FudmFzIiwibWFpbk1lbnVfMSIsIm1haW5NZW51IiwiUG93ZXIiLCJxdWFudGl0eSIsInRvdGFsSGVhbHRoIiwidG90YWxTcGVlZCIsInRvdGFsQXJtb3VyIiwidG90YWxNZWxlZURhbWFnZSIsInRvdGFsTWlzc2lsZURhbWFnZSIsInRvdGFsRGlzY2lwbGluZSIsInRvdGFsTW9yYWxlIiwidG90YWxDb25kaXRpb24iLCJpbmNyZW1lbnRRdWFudGl0eSIsImRlY3JlbWVudFF1YW50aXR5IiwiYWRkSGVhbHRoIiwiYWRkU3BlZWQiLCJhZGRBcm1vdXIiLCJhZGRNZWxlZURhbWFnZSIsImFkZE1pc3NpbGVEYW1hZ2UiLCJhZGREaXNjaXBsaW5lIiwiYWRkTW9yYWxlIiwiYWRkQ29uZGl0aW9uIiwicmVzZXRBbGxQcm9wZXJ0aWVzIiwic2lkZV8xIiwiYXJteUxheW91dF8xIiwiY29tcHV0ZXJBcm15IiwiY29tcHV0ZXJBcm15UG9zaXRpb25YIiwiY29tcHV0ZXJBcm15UG9zaXRpb25ZIiwicGxheWVyQXJteSIsInBsYXllckFybXlQb3NpdGlvblgiLCJwbGF5ZXJBcm15UG9zaXRpb25ZIiwiYWRkVW5pdFRvQXJteSIsImFybXkiLCJ1cGRhdGVkVW5pdCIsImFybXlQb3NpdGlvbiIsImNoYW5nZVBsYXllckFybXlQb3NpdGlvbiIsImNoYW5nZUNvbXB1dGVyQXJteVBvc2l0aW9uIiwicmVtb3ZlVW5pdEZyb21Bcm15IiwicmVhcnJhbmdlUGxheWVyQXJteVBvc2l0aW9uIiwicmVhcnJhbmdlQ29tcHV0ZXJBcm15UG9zaXRpb24iLCJtYXJnaW5XaWR0aCIsImFybXlJbWdXaWR0aCIsIm1hcmdpbkhlaWdodCIsImFybXlJbWdIZWlnaHQiLCJkZWZhdWx0V2lkdGgiLCJwbGF5ZXJBcm15XzEiLCJwcmV2WCIsInByZXZZIiwiY29tcHV0ZXJBcm15XzEiLCJpbmZvU2V0dGluZ3NfMSIsImdvbGRCb3hTdGFydFgiLCJnb2xkQm94U3RhcnRZIiwic3RhcnRUb3RhbE1vbmV5VGl0bGVYIiwic3RhcnRUb3RhbE1vbmV5VGl0bGVZIiwiYm94V2lkdGgiLCJib3hIZWlnaHQiLCJnb2xkT3B0aW9ucyIsInVuaXRJbmZvVGl0bGVYIiwidW5pdEluZm9UaXRsZVkiLCJwcm9wZXJ0eVN0YXJ0WCIsInByb3BlcnR5U3RhcnRZIiwidmFsdWVTdGFydFgiLCJ2YWx1ZVN0YXJ0WSIsImJhdHRsZVNldHRpbmdzXzEiLCJ3aWR0aCIsImhlaWdodCIsImJhdHRsZVNldHRpbmdzWCIsImJhdHRsZVNldHRpbmdzWSIsInVuaXRJbmZvWCIsInVuaXRJbmZvWSIsImN1cnJlbnRseUNob3NlblVuaXQiLCJhc3NpZ25DdXJyZW50bHlDaG9zZW5Vbml0Iiwic2V0dGluZ3NfMSIsImljb25TZXR0aW5nc18xIiwidW5pdHNfMSIsInVuaXRJY29uSW1hZ2VzXzEiLCJjdXJyZW50bHlDaG9zZW5Vbml0XzEiLCJkcmF3VW5pdEljb24iLCJoYWxmIiwidW5pdEluZGV4IiwiZ2V0VW5pdFBvc2l0aW9uSW5BcnJheSIsIlVOSVRfTEVGVF9QQU5FTF9XSURUSCIsIlVOSVRfSUNPTl9XSURUSCIsIlVOSVRfUEFORUxfSEVJR0hUIiwiY2xlYXJSZWN0IiwiVU5JVF9JQ09OX0hFSUdIVCIsImsiLCJpbml0aWFsWCIsImljb25XaWR0aCIsInN0cm9rZVJlY3QiLCJkcmF3TW92ZW1lbnRJY29uIiwibW92ZW1lbnRJY29uIiwiZHJhd0ZpZ2h0SWNvbiIsImZpZ2h0SWNvbiIsImRyYXdBcnJvd0ljb24iLCJhdHRyaWJ1dGVzSGVpZ2h0IiwiZmlsbEhlYWx0aFBvaW50cyIsImhlYWx0aFBvaW50c0hlaWdodCIsImRyYXdJY29uIiwiZHJhd0ltYWdlIiwibW92ZW1lbnRJY29uSW1hZ2UiLCJmaWdodEljb25JbWFnZSIsImluaXRpYWxIZWFsdGgiLCJoZWFsdGhQZXJjZW50YWdlIiwiaGVhbHRoUG9pbnRzV2lkdGgiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInNhdmUiLCJmaWx0ZXIiLCJ1bml0SWNvbkltYWdlcyIsImljb25IZWlnaHQiLCJyZXN0b3JlIiwibG9hZGluZ0NhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbml0aWFsTWFwXzEiLCJiaW5hcnlTZWFyY2hfMSIsIm5vZGVzSW5YIiwibm9kZXNJblkiLCJ4Tm9kZXMiLCJmaW5kWEluU2VhcmNoTWFwIiwiY29vcmRpbmF0ZVlCaW5hcnlTZWFyY2giLCJjbGVhck1hcF8xIiwiY2xlYXJNYXAiLCJncmlkXzEiLCJkcmF3R3JpZCIsIm5laWdoYm9yc18xIiwibmVpZ2hib3JzIiwibm9kZXNfMSIsIm9ic3RhY2xlc18xIiwiY3JlYXRlVW5pdE9ic3RhY2xlIiwiZGVmYXVsdFVuaXRzXzEiLCJsb2FkSWNvbnMiLCJsb2FkRmlnaHRJY29uSW1hZ2UiLCJsb2FkTW92ZW1lbnRJY29uSW1hZ2UiLCJsb2FkU3dvcmRJY29uSW1hZ2UiLCJsb2FkU3BlYXJJY29uSW1hZ2UiLCJsb2FkU3BlYXJBbmRTaGllbGRJY29uSW1hZ2UiLCJsb2FkVW5pdEljb25zIiwiY3JlYXRlRGVmYXVsdFVuaXRzIiwibG9hZERlZmF1bHRVbml0cyIsImxvYWRVbml0SWNvbkltYWdlcyIsIm1vdmVJY29uU3JjIiwiZXJyIiwiaW1nIiwiZmlnaHRJY29uU3JjIiwiZGVmYXVsdFVuaXRzIiwic3dvcmRJY29uU3JjIiwic3dvcmRJY29uSW1hZ2UiLCJzcGVhckljb25TcmMiLCJzcGVhckljb25JbWFnZSIsInNwZWFyQW5kU2hpZWxkU3JjIiwic3BlYXJBbmRTaGllbGRJY29uSW1hZ2UiLCJyZXZlYWxlZFVuaXRzIiwiYWRkVG9SZXZlYWxlZFVuaXRzIiwicmVtb3ZlRnJvbVJldmVhbGVkVW5pdHMiLCJjb21tb25fMSIsImF0dGFja0VuZW15IiwibW92ZVRvIiwiYnV0dG9uQXZhaWxhYmxlXzEiLCJpc1N0YXJ0QmF0dGxlQXZhaWxhYmxlIiwiYnV0dG9uU2VsZWN0ZWRfMSIsImlzU3RhcnRCYXR0bGVCdXR0b25TZWxlY3RlZCIsInNob3dCdXR0b25fMSIsInNob3dTdGFydEJhdHRsZUJ1dHRvbiIsInNob3dUZXh0IiwiYmF0dGxlXzEiLCJsYXVuY2hCYXR0bGUiLCJnYW1lXzEiLCJsYXVuY2hHYW1lIiwibW9kZXNfMSIsImFjdGl2YXRlQmF0dGxlTW9kZSIsImFjdGl2YXRlTWFpbk1lbnVNb2RlIiwicGF0aF8xIiwiZXZlbnRfMSIsImxvYWRpbmdfMSIsImdldENvbnRleHQiLCJwYXRoQ2FudmFzIiwicGF0aEN0eCIsImV2ZW50Q2FudmFzIiwiZXZlbnRDdHgiLCJsb2FkaW5nQ3R4IiwidmlzaWJsZVVuaXRzXzEiLCJoaWRpbmdFbmVtaWVzIiwiYWRkVG9IaWRpbmdFbmVtaWVzIiwicmVtb3ZlRnJvbUhpZGluZ0VuZW1pZXMiLCJnZXRTdXJyb3VuZGVkTm9kZXNfMSIsImdldFN1cnJvdW5kZWRFbmVtaWVzXzEiLCJnZXRTdXJyb3VuZGVkQWxsaWVzXzEiLCJnZXRTdXJyb3VuZGVkQWxsaWVzIiwiZGlzdGFuY2UiLCJub2RlcyIsInN0YXJ0WCIsImZpbmlzaFgiLCJzdGFydFkiLCJmaW5pc2hZIiwiVU5JVF9QQU5FTF9XSURUSCIsIlVOSVRfUklHSFRfUEFORUxfV0lEVEgiLCJVTklUX0lDT05TX1BBTkVMX1dJRFRIIiwidW5pdFRvSWNvbk1hcF8xIiwiY29sb3IiLCJyYWRpdXNPZmZzZXQiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJjbG9zZVBhdGgiLCJ1bml0VG9JY29uTWFwIiwiY2xlYXJVbml0SW1hZ2UiLCJ1bml0c18yIiwicmVkcmF3UGxheWVyVW5pdHMiLCJ1dGlsc18yIiwibW92ZW1lbnRVdGlsc18xIiwibW92ZVRvTmV4dE5vZGVfMSIsInVwZGF0ZVVuaXRfMSIsInN0b3BNb3ZpbmdfMSIsInByaW9yaXR5XzEiLCJnZXRJbnRlcmNlcHRlZEVuZW1pZXNfMSIsImdldEJsb2NrZWRFbmVtaWVzXzEiLCJkcmF3VW5pdEljb25fMSIsInB1cnN1ZWRVbml0IiwiY3VycmVudE1vdmVUb1giLCJjdXJyZW50TW92ZVRvWSIsInBhdGgiLCJuZXdNb3ZlbWVudCIsInRyaWVzIiwidW5pdENhbkdldE91dE9mQ29tYmF0IiwiY3VycmVudE5vZGVfMSIsInN0YXJ0Tm9kZV8xIiwiZmluaXNoTm9kZV8xIiwibmV3UGF0aCIsImFTdGFyIiwic3RhcnROb2RlXzIiLCJmaW5pc2hOb2RlXzIiLCJnZXRJbnRlcmNlcHRlZEVuZW1pZXMiLCJ1cGRhdGVkUGF0aCIsInN0YXJ0Tm9kZSIsImZpbmlzaE5vZGUiLCJsb2ciLCJzdG9wTW92aW5nIiwicHVyc3VlZFVuaXRDdXJyZW50Tm9kZSIsImdldEJsb2NrZWRFbmVtaWVzIiwiX2IiLCJfYyIsInBlcm1pc3Npb24iLCJ1bml0Q2FuTW92ZVRvVGhlTm9kZSIsInVwZGF0ZWRNYXAiLCJfZCIsImJsb2NrZWROb2Rlc18xIiwiYmxvY2tlZE5vZGUiLCJzdGFydE5vZGVfMyIsImZpbmlzaE5vZGVfMyIsIm1vdmVUb05leHROb2RlSW5QdXJzdWVVbml0IiwicHVyc3VlVW5pdF8xIiwiY2hhc2VuVW5pdCIsImN1cnJlbnROb2RlXzIiLCJfZSIsIl9mIiwibm9kZVRvQ2xlYXIiLCJtb3ZlVG9OZXh0Tm9kZUluVXBkYXRlVW5pdCIsImN1cnJlbnROb2RlXzMiLCJnZXRDbG9zZXN0VW5pdFRvTm9kZSIsImNsb3Nlc3RVbml0IiwiY2xvc2VzdFVuaXREaXN0YW5jZSIsImdldENsb3Nlc3RVbml0VG9PdGhlclVuaXQiLCJ1cGRhdGVkQ29tcHV0ZXJzVW5pdHMiLCJnZXRCZXN0VW5pdEJ5UHJvcGVydHkiLCJleGNsdXNpb24iLCJleGNsdXNpb25fMSIsImJlc3RVbml0IiwiZ2V0V29yc3RVbml0QnlQcm9wZXJ0eSIsImV4Y2x1c2lvbl8yIiwid29yc3RVbml0IiwiZ2V0QmVzdEVuZW15QnlQcm9wZXJ0eSIsInVwZGF0ZWRQbGF5ZXJVbml0cyIsImV4Y2x1c2lvbl8zIiwiZ2V0V29yc3RFbmVteUJ5UHJvcGVydHkiLCJleGNsdXNpb25fNCIsImdldE5vdEZpZ2h0aW5nVW5pdHMiLCJ1cGRhdGVkQ29tcHV0ZXJVbml0cyIsImV4Y2x1c2lvbl81Iiwibm90RmlnaHRpbmdVbml0cyIsInVwZGF0ZWRDb21wdXRlclVuaXRzXzEiLCJnZXRGaWdodGluZ1VuaXRzIiwiZmlnaHRpbmdVbml0cyIsImdldFRvdGFsVW5pdHNIZWFsdGgiLCJ1bml0c18zIiwiZ2V0VG90YWxVbml0c0luaXRpYWxIZWFsdGgiLCJ0b3RhbEluaXRpYWxIZWFsdGgiLCJ1bml0c180IiwiZ2V0Q2xvc2VzdEVuZW15VG9Vbml0IiwiZ2V0RnJlZVVuaXRzIiwiZXhjbHVzaW9uXzYiLCJmcmVlVW5pdHMiLCJ1cGRhdGVkQ29tcHV0ZXJzVW5pdHNfMSIsImdldFVuaXRzQnlUYXNrIiwiZXhjbHVzaW9uXzciLCJ1cGRhdGVkQ29tcHV0ZXJzVW5pdHNfMiIsImdldFVuaXRzQnlQcm9wZXJ0eVZhbHVlIiwiZXhjbHVzaW9uXzgiLCJ1cGRhdGVkQ29tcHV0ZXJzVW5pdHNfMyIsImdldFVuaXRzV2hlcmVWYWx1ZSIsIm9wZXJhdG9yIiwiZXhjbHVzaW9uXzkiLCJ1cGRhdGVkQ29tcHV0ZXJzVW5pdHNfNCIsInRvTG93ZXJDYXNlIiwiZ2V0RGFuZ2Vyb3VzVW5pdHMiLCJlbmVtaWVzIiwiZGFuZ2Vyb3VzRW5lbWllcyIsImVuZW1pZXNfMSIsInZ1bG5lcmFibGVBZ2FpbnN0IiwiZGFuZ2Vyb3VzRW5lbXkiLCJjb250YWluc0Rhbmdlcm91c1VuaXRzIiwidW5pdHNfNSIsImlzRW5lbXlEYW5nZXJvdXNGb3JVbml0IiwiaXNFbmVteVZ1bG5lcmFibGVUb1VuaXQiLCJhZHZhbnRhZ2VPdmVyIiwidnVsbmVyYWJsZUVuZW15IiwiZ2V0U2NvdXRzTnVtYmVyIiwiY29tcHV0ZXJVbml0c18xIiwiaXNVbml0c0NoYW5nZWQiLCJjdXJyZW50VW5pdHMiLCJwcmV2aW91c1VuaXRzIiwiY29tcGFyZSIsInVuaXQxIiwidW5pdDIiLCJ1cGRhdGVkQ3VycmVudFVuaXRzIiwidXBkYXRlZFByZXZpb3VzVW5pdHMiLCJzb3J0IiwiZnJvbU1hcF8xIiwiZ2V0U3Vycm91bmRlZFVuaXRzIiwiY291bnRPbmVzZWxmIiwic3Vycm91bmRlZFVuaXRzIiwidXBkYXRlZFVuaXRzIiwidXBkYXRlZFVuaXRzXzEiLCJjdXJyZW50VW5pdCIsImN1cnJlbnRVbml0Tm9kZSIsInJvc3RlciIsImNyZWF0ZVJvc3RlciIsImRlZmF1bHRVbml0c18yIiwicm9zdGVyXzEiLCJzZWxlY3RlZCIsInRvdGFsR29sZCIsImdvbGQiLCJhcm15XzEiLCJkaXNwbGF5QXJteSIsImljb25fMSIsImRyYXdSZW1vdmVJY29uIiwicmVtb3ZlXzEiLCJpc1VuaXRTaG91bGRCZVJlbW92ZWQiLCJhcm15U2V0dGluZ3NfMSIsImRpc3BsYXlDaG9zZW5Vbml0cyIsImRpc3BsYXlDaG9zZW5Vbml0c1RpdGxlIiwib25DaG9vc2VVbml0SW5Bcm15IiwiY29tcHV0ZXJfMSIsImRpc3BsYXlDb21wdXRlciIsInBsYXllcl8xIiwiZGlzcGxheVBsYXllciIsInJlbWFpbkdvbGRfMSIsImRpc3BsYXlSZW1haW5Hb2xkIiwidGl0bGVfMSIsImRpc3BsYXlUaXRsZSIsImdyaWRTaXplXzEiLCJiYXR0bGVNb2RlIiwiYmF0dGxlRmluaXNoIiwiZmluaXNoQmF0dGxlIiwiaW5jVW5pdElkIiwiZGFtYWdlXzEiLCJBU3Rhcl8xIiwiZHJhd1BhdGhfMSIsImRyYXdQYXRoIiwiZmluZFBhdGhfMSIsImZpbmRQYXRoRnJvbU9uZU5vZGVUb0Fub3RoZXIiLCJhU3RhclV0aWxzXzEiLCJnZXRNaW5GU2NvcmUiLCJ1bmNsb3NlZE5laWdib3JzIiwiaXNPYmplY3RJbk1hcEtleXMiLCJvcGVuIiwiY2xvc2VkIiwiZ1Njb3JlIiwiZlNjb3JlIiwiaCIsImZyb20iLCJNYXAiLCJjdXJyZW50IiwicmVjb25zdHJ1Y3RQYXRoIiwibmVpZ2hib3IiLCJnZXROZWlnaGJvckRpc3RhbmNlIiwidGVtcEciLCJzZXQiLCJub2RlTmVpZ2hib3JzIiwiZHgiLCJhYnMiLCJkeSIsIm1pbiIsInJldmVyc2VQYXRoIiwidG90YWxQYXRoIiwibW92ZVRvWCIsIm1vdmVUb1kiLCJQb3dlcl8xIiwicGxheWVyUG93ZXIiLCJjb21wdXRlclBvd2VyIiwiZ2V0UmFuZG9tVW5pdCIsInNodWZmbGVVbml0cyIsImFzc2Vzc1Z1bG5lcmFiaWxpdHlfMSIsImFzc2Vzc1Z1bG5lcmFiaWxpdHkiLCJnZW5lcmF0ZUN1cnJlbnRDb21tYW5kTnVtYmVyIiwicmFuZG9tTnVtYmVyIiwicmFuZG9tIiwiY3VycmVudENvbW1hbmROdW1iZXIiLCJyb3N0ZXJJbWdXaWR0aCIsInJvc3RlckltZ0hlaWdodCIsImRpc3BsYXlSb3N0ZXJfMSIsImRpc3BsYXlSb3N0ZXIiLCJkaXNwbGF5VW5pdHNfMSIsImRpc3BsYXlSb3N0ZXJVbml0cyIsImRpc3BsYXlUaXRsZV8xIiwiZGlzcGxheVJvc3RlclRpdGxlIiwicGxheWVyU3BlbnRHb2xkIiwiY29tcHV0ZXJTcGVudEdvbGQiLCJzZWxlY3RlZFVuaXRJblJvc3RlciIsInNlbGVjdFVuaXRJblJvc3RlciIsImJhdHRsZUluZm9fMSIsImNoYW5nZVRvdGFsR29sZCIsImluZm9fMSIsIm9uQ2hvb3NlSW5mbyIsImRpc3BsYXlJbmZvIiwiY2hhbmdlWSIsInNldERlZmF1bHQiLCJvbkNob29zZVBsYXllciIsIm9uQ2hvb3NlQ29tcHV0ZXIiLCJkaXNwbGF5XzEiLCJwbGF5ZXJTd2l0Y2hlclgwIiwicGxheWVyU3dpdGNoZXJYMSIsInBsYXllclN3aXRjaGVyWTAiLCJwbGF5ZXJTd2l0Y2hlclkxIiwiY29tcHV0ZXJTd2l0Y2hlclgwIiwiY29tcHV0ZXJTd2l0Y2hlclgxIiwiY29tcHV0ZXJTd2l0Y2hlclkwIiwiY29tcHV0ZXJTd2l0Y2hlclkxIiwicGxheWVyU3dpdGNoZXJXaWR0aCIsImNvbXB1dGVyU3dpdGNoZXJXaWR0aCIsImdvbGRYIiwiZ29sZFkiLCJsYXlvdXRTZXR0aW5nc18xIiwic3RhcnRCYXR0bGVCdXR0b25YIiwic3RhcnRCYXR0bGVCdXR0b25ZIiwic3RhcnRCYXR0bGVCdXR0b25XaWR0aCIsInN0YXJ0QmF0dGxlQnV0dG9uSGVpZ2h0Iiwic3RhcnRCYXR0bGVUZXh0WCIsInN0YXJ0QmF0dGxlVGV4dFkiLCJkaXNwbGF5VW5pdEljb25zXzEiLCJnYW1lTG9vcF8xIiwiZHJhd1VuaXRfMSIsImNsaWNrSWNvbl8xIiwiY29tcHV0ZXJBY3Rpb25fMSIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwibW91c2VYIiwib2Zmc2V0WCIsIm1vdXNlWSIsIm9mZnNldFkiLCJwb2ludGVkVW5pdCIsImZvbnQiLCJmaWxsVGV4dCIsImRpc3BsYXlVbml0SWNvbnMiLCJjbGVhclBhdGgiLCJwcmV2ZW50RGVmYXVsdCIsImNvbXB1dGVyVW5pdHNfMiIsImNvbXB1dGVyVW5pdCIsImJvdHRvbVJpZ2h0WCIsImJvdHRvbVJpZ2h0WSIsImRyYXdDbGlja2VkSWNvbiIsImJhdHRsZUxpc3RlbmVyIiwiY29tcHV0ZXJNb3ZlbWVudCIsInNldEludGVydmFsIiwiaXNCYXR0bGVFbmQiLCJpbWdQYXRoIiwiY2FsbGJhY2siLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzcmMiLCJhcnIiLCJlbCIsImFycl8xIiwib2JqIiwidW5pdEFjdGlvbnNfMSIsImZpbmRDbG9zZXN0VW5pdHNUb1RoZU5vZGVDZW50ZXIiLCJnZXRDbG9zZXN0Tm9kZVRvVW5pdCIsImdldEJlc3RVbml0c0J5UHJvcGVydHkiLCJNYXBOb2RlXzEiLCJtYXBOb2RlIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInVwZGF0ZWRBcnIiLCJ1bml0MVgiLCJ1bml0MVkiLCJ1bml0MlgiLCJ1bml0MlkiLCJjaGVja2VkVW5pdCIsImFycl8yIiwiY2hvb3NlVW5pdFR5cGVfMSIsIm9uQ2hvb3NlVW5pdF8xIiwiQXJjaGVyc18xIiwiSGVhdnlDYXZhbHJ5XzEiLCJIZWF2eUluZmFudHJ5XzEiLCJIb3BsaXRlc18xIiwiTGlnaHRDYXZhbHJ5XzEiLCJMaWdodEluZmFudHJ5XzEiLCJNaWxpdGlhXzEiLCJQZWx0YXN0c18xIiwiUGlrZW1lbl8xIiwiU2NvdXRzXzEiLCJVbml0XzEiLCJ1bml0SWRfMSIsInR5cGUiLCJjcmVhdGVEZWZhdWx0VW5pdCIsImFycm93SWNvbiIsImNyZWF0ZVVuaXRfMSIsInJlbGVhc2VkVW5pdFR5cGVzIiwicmVsZWFzZWRVbml0VHlwZXNfMSIsImFybW91clBlbmV0cmF0aW9uXzEiLCJhdHRhY2tTaWRlXzEiLCJ1bml0RmlnaHRBZ2FpbnN0XzEiLCJjaGVja0hlYWx0aF8xIiwiY2hlY2tGaWdodGluZ18xIiwibWVsZWVBdHRhY2tfMSIsIm1lbGVlQ29tYmF0XzEiLCJyZW1vdmVVbml0XzEiLCJyZW1vdmVVbml0IiwiYWRkVW5pdFRvU3BvdHRlZFVuaXRzIiwicmVtb3ZlVW5pdEZyb21TcG90dGVkVW5pdHMiLCJzcG90dGVkVW5pdHMiLCJyZWZyZXNobWVudF8xIiwicmFuZG9taXplTWVsZWVEYW1hZ2UiLCJtYXgiLCJjZWlsIiwiZmxvb3IiLCJwbGF5ZXJVbml0c18xIiwibmVpZ2hib3JzTm90SW5DbG9zZWQiLCJpc0luQ2xvc2VkIiwiY2xvc2VkXzEiLCJBcnJheSIsInJlc3VsdCIsInN0YXJ0SW5kZXgiLCJmaXJzdE5vZGUiLCJjdXJyZW50Tm9kZUNlbnRlclgiLCJjdXJyZW50Tm9kZUNlbnRlclkiLCJuZXh0Tm9kZUNlbnRlclgiLCJuZXh0Tm9kZUNlbnRlclkiLCJzdHJva2VTdHlsZSIsImxpbmVUbyIsInN0cm9rZSIsImNsZWFyQ3VycmVudE5vZGUiLCJvdXRPZkNvbWJhdF8xIiwiY2FsY3VsYXRlQ2hhbmNlVG9HZXRPdXRPZkNvbWJhdCIsIm1ha2VNb3ZlbWVudF8xIiwiY3VyclgiLCJjdXJyWSIsImFsbFBhdGgiLCJub2RlSSIsIm1ha2VNb3ZlbWVudEluUHVyc3VlVW5pdCIsIm1ha2VNb3ZlbWVudEluVXBkYXRlVW5pdCIsImFzc2Vzc1ByaW9yaXR5XzEiLCJnZXRQcmlvcml0eVVuaXQiLCJzaHVmZmxlVW5pdHNfMSIsInNodWZmbGVJRF8xIiwic2h1ZmZsZUlEIiwiZ2V0SW50ZXJjZXB0aW9uTm9kZXNfMSIsImludGVyY2VwdGlvbkVuZW1pZXMiLCJpbnRlcmNlcHRpb25Ob2RlcyIsImdldEludGVyY2VwdGlvbk5vZGVzIiwiaW50ZXJjZXB0aW9uTm9kZXNfMSIsImJsb2NrZWRFbmVtaWVzIiwiaW5pdGlhbENvbXB1dGVyUG93ZXJfMSIsImluaXRpYWxQbGF5ZXJQb3dlcl8xIiwicGxheWVyUG93ZXJfMSIsImNvbXB1dGVyUG93ZXJfMSIsInJldmVhbGVkRW5lbWllc18xIiwidmlzaWJsZVBsYXllclVuaXRzUG93ZXJfMSIsInJldmVhbGVkVW5pdHNQb3dlcl8xIiwiY2FsY3VsYXRlVG90YWxDb21wdXRlclBvd2VyIiwibG9jYWxQb3dlciIsImRlY29tcG9zZVVuaXRQcm9wcyIsImRlY29tcG9zZVBvd2VyIiwiY2FsY3VsYXRlVG90YWxQbGF5ZXJQb3dlciIsImNhbGN1bGF0ZVJldmVhbGVkVW5pdHNQb3dlciIsInJldmVhbGVkVW5pdHNQb3dlciIsInJldmVhbGVkVW5pdHNfMSIsImNhbGN1bGF0ZVZpc2libGVQbGF5ZXJQb3dlciIsInZpc2libGVQbGF5ZXJVbml0c1Bvd2VyIiwidmlzaWJsZUZvckNvbXB1dGVyVW5pdHNfMSIsImNhbGN1bGF0ZUluaXRpYWxDb21wdXRlclBvd2VyIiwiaW5pdGlhbENvbXB1dGVyUG93ZXIiLCJjYWxjdWxhdGVJbml0aWFsUGxheWVyUG93ZXIiLCJpbml0aWFsUGxheWVyUG93ZXIiLCJwbGF5ZXJVbml0c18yIiwiY2FsY3VsYXRlVG90YWxQb3dlciIsImNhbGN1bGF0ZUluaXRpYWxQb3dlciIsInBvd2VyIiwiZ2V0UmFuZG9tVmFsdWVJblJhbmdlIiwibmV3TWluIiwibmV3TWF4IiwiQ29tbWFuZCIsIkFJX2FjdGlvbnNfMSIsImNhbGN1bGF0ZVRvdGFsVW5pdHNXZWlnaHQiLCJnZXRSYW5kb21Vbml0XzEiLCJnZXRTdXJyb3VuZGVkVW5pdHNfMSIsImN1cnJlbnRDb21tYW5kTnVtYmVyXzEiLCJtb3ZlVG9fMSIsImFjdGlvblVuaXQiLCJwcm90ZWN0aW9uIiwibmV3Q29tbWFuZCIsImRpc3RhbmNlQmV0d2VlblVuaXRzIiwidW5pdFRvQXR0YWNrIiwic2V0VGltZW91dCIsInJvc3RlclNldHRpbmdzXzEiLCJpc1VuaXRTZWxlY3RlZEluUm9zdGVyIiwicm9zdGVyXzIiLCJ4MCIsIngxIiwieTAiLCJ5MSIsImluZm9MYXlvdXRfMSIsInJvc3RlckxheW91dF8xIiwiYm90dG9tTGF5b3V0XzEiLCJ1cHBlckxheW91dF8xIiwibGF5b3V0XzEiLCJkaXNwbGF5QXJteV8xIiwidW5pdE51bWJlciIsImVtcHR5Qm94IiwiZmlsbGVkIiwicmVtb3ZlSWNvbl8xIiwiYXJteV8yIiwiZHJhd01vbmV5Qm94XzEiLCJkcmF3TW9uZXlCb3giLCJ0b3RhbEdvbGRfMSIsImZpbGxUb3RhbEdvbGQiLCJzaG93VG90YWxHb2xkIiwiZHJhd2xheW91dF8xIiwiZHJhd0JvdHRvbUxheW91dCIsImZpbGxMYXlvdXRfMSIsImZpbGxMYXlvdXQiLCJvbkNob29zZUJhdHRsZVNldHRpbmdzIiwib25DaG9vc2VVbml0SW5mbyIsImRpc3BsYXlJbmZvXzEiLCJiYXR0bGVTZXR0aW5nU3dpdGNoZXJfMSIsImJhdHRsZVNldHRpbmdTd2l0Y2hlciIsInNob3dTd2l0Y2hlcl8xIiwic2hvd1N3aXRoZXIiLCJ1bml0SW5mb1N3aXRjaGVyXzEiLCJ1bml0SW5mb1N3aXRjaGVyIiwic2hvd0luZm9fMSIsInRleHRBbGlnbiIsImRyYXdMb2FkaW5nQ2FudmFzIiwic3R5bGUiLCJ6SW5kZXgiLCJkZWxldGVOb2RlRnJvbUNvbXB1dGVyTm9kZXMiLCJkZWxldGVOb2RlRnJvbVBsYXllck5vZGVzIiwiY29tcHV0ZXJVbml0c05vZGVzIiwiaW5pdGlhbGl6ZUNvbXB1dGVyVW5pdHNOb2RlcyIsImNvbXB1dGVyWDAiLCJjb21wdXRlclgxIiwiY29tcHV0ZXJZMSIsInBsYXllclVuaXRzTm9kZXMiLCJpbml0aWFsaXplUGxheWVyVW5pdHNOb2RlcyIsInBsYXllclgxIiwicGxheWVyWTEiLCJsYXVuY2hCYXR0bGVfMSIsImdsb2JhbENvbmZpZ18xIiwiYm9yZGVyIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9sb2FkSW1hZ2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInRvQXJyYXlfMSIsIm9iamVjdF8xIiwiZGlzdGFuY2VJbkdyaWRzXzEiLCJub2RlWCIsIm5vZGVZIiwidW5pdFgiLCJ1bml0WSIsIm5vZGUxIiwibm9kZTIiLCJub2RlMVgiLCJub2RlMVkiLCJub2RlMlgiLCJub2RlMlkiLCJmcm9tQXJyYXlfMSIsImNsb3Nlc3RUb0VuZW15XzEiLCJnZXRDbG9zZXN0VG9FbmVteVNpZGVOb2RlcyIsImdldENsb3Nlc3RUb0VuZW15Tm9kZXMiLCJmYXJ0aGVzdF8xIiwiZ2V0RmFydGhlc3ROb2RlRnJvbUVuZW15IiwiZ2V0RmFydGhlc3RYTm9kZXMiLCJmcm9tTm9kZV8xIiwiYWN0aW9uc18xIiwiaGlkaW5nRW5lbWllc18xIiwiY2xvc2VzdE5vZGVzIiwibWluVmFsdWUiLCJoaWRpbmdFbmVtaWVzXzIiLCJoaWRpbmdFbmVteSIsImNsb3Nlc3ROb2RlIiwiY2xvc2VzdE5vZGVEaXN0YW5jZSIsImJlc3RVbml0cyIsImNsb3Nlc3REaXN0YW5jZSIsImNsb3Nlc3RVbml0cyIsImNsb3Nlc3RVbml0WCIsImNsb3Nlc3RVbml0WSIsImN1cnJlbnRVbml0WCIsImN1cnJlbnRVbml0WSIsImNsb3Nlc3RVbml0RFgiLCJjbG9zZXN0VW5pdERZIiwiY3VycmVudFVuaXREWCIsImN1cnJlbnRVbml0RFkiLCJjbG9zZXN0VW5pdERpc3QiLCJzcXJ0IiwicG93IiwiY3VycmVudFVuaXREaXN0IiwidXBkYXRlZFVuaXRzXzIiLCJmYXJ0aGVzdE5vZGUiLCJmYXJ0aGVzdE5vZGVEaXN0YW5jZSIsImZhcnRoZXN0Tm9kZXMiLCJtYXhWYWx1ZSIsImRyYXdHcmlkXzEiLCJhZGROZWlnaGJvcnNfMSIsImRpcnNfMSIsImRpciIsIm1hcF8yIiwiTWFwTm9kZSIsImNyZWF0ZU9ic3RhY2xlXzEiLCJjcmVhdGVPYnN0YWNsZXNfMSIsInVuaXRPYnN0YWNsZV8xIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwibmV3TWFwIiwibGVmdCIsInJpZ2h0Iiwic2VhcmNoQ29vcmRpbmF0ZSIsIm1lZGl1bSIsImNvb3JkaW5hdGUiLCJzZWFyY2hWYWx1ZSIsInN3YXAiLCJhIiwiYiIsInRlbXAiLCJhc3NpZ25SYW5kb21WYWx1ZSIsInJhbmRvbVZhbHVlIiwidXBkYXRlZE5vZGVzIiwicmFuZG9tVmFsdWVOb2RlcyIsImoiLCJzaHVmZmxlZE5vZGVzIiwicmFuZG9tVmFsdWVOb2Rlc18xIiwiZ2V0U3Vycm91bmRlZEJsb2NrZWROb2Rlc18xIiwiYWxsaWVkVW5pdHMiLCJzdXJyb3VuZGVkTm9kZXMiLCJzdXJyb3VuZGVkQmxvY2tlZE5vZGVzIiwic3Vycm91bmRlZE5vZGVzXzEiLCJhbGxpZWRVbml0Iiwic3Vycm91bmRlZEVuZW1pZXMiLCJ1cGRhdGVkQWxsaWVzIiwic3Vycm91bmRlZEFsbGllcyIsImFsbGllcyIsInVwZGF0ZWRBbGxpZXNfMSIsImFsbHkiLCJhbGx5Tm9kZSIsInByb3BlcnR5XzEiLCJ1bml0UG9zaXRpb25fMSIsIm1pblByb3BlcnR5IiwibWF4UHJvcGVydHkiLCJwb3NpdGlvbl8xIiwiZ2V0VW5pdHNPblRoZU5vZGVfMSIsImdldFVuaXRzT25UaGVOb2RlIiwib3RoZXJVbml0cyIsImN1cnJlbnRVbml0TmV4dE5vZGUiLCJvdGhlclVuaXRzXzEiLCJvdGhlclVuaXQiLCJ1bml0c09uVGhlTm9kZSIsIm90aGVyVW5pdEN1cnJlbnROb2RlWCIsIm90aGVyVW5pdEN1cnJlbnROb2RlWSIsIm90aGVyVW5pdE5leHROb2RlWCIsIm90aGVyVW5pdE5leHROb2RlWSIsImRyYXdCYWNrZ3JvdW5kXzEiLCJkcmF3T2JzdGFjbGVfMSIsIl9zdXBlciIsIl90aGlzIiwiZGVzY3JpcHRpb24iLCJjb3N0IiwiX19leHRlbmRzIiwidW5pdENvbmZpZ18xIiwiaW5pdGlhbFdlaWdodCIsImFtbXVuaXRpb24iLCJmb3VuZFVuaXQiLCJhcm1vdXJfMSIsImNoYXJnZV8xIiwiZmlnaHRBZ2FpbnN0XzEiLCJtZWxlZV8xIiwiZGFtYWdlIiwiZW5lbXlDdXJyTm9kZSIsImVuZW15TmV4dE5vZGUiLCJmcm9udFVuaXROb2RlIiwiYXR0YWNrVW5pdCIsImRlZmVuZFVuaXQiLCJhdHRhY2tBbmdsZSIsImNoYXJnZVBvc2l0aW9uIiwiaW5pdGlhbENoYXJnZSIsImVuZW15UG9zaXRpb24iLCJpbml0aWFsRGFtYWdlIiwiZmluZGVkVW5pdHMiLCJlbmVtaWVzXzIiLCJzcG90dGVkVW5pdHNfMSIsInN0b3JlXzEiLCJtZWxlZURhbWFnZV8xIiwiXzEiLCJhdHRhY2tfMSIsImVuZW15WCIsImVuZW15WSIsIngyIiwieTIiLCJjaGFuY2UiLCJudW1iZXJPZkVuZW15IiwidW5pdE1vYmlsaXR5IiwidG90YWxFbmVteVNwZWVkIiwidW5pdEhhc0VuZW15SW5UaGVCYWNrIiwiY2xlYXJYIiwiY2xlYXJZIiwidW5pdERpYW1ldGVyIiwiZmFzdGVzdFVuaXRzIiwicHJpb3JpdHlVbml0Iiwib3JpZ2luYWxVbml0cyIsInNldFJhbmRvbVZhbHVlIiwiaWRzIiwiaW50ZXJjZXB0ZWROb2RlcyIsImludGVyY2VwdGVkTm9kZSIsInVuaXRTcG90dGluZ18xIiwidmlzaWJpbGl0eVJhbmdlIiwiZW5lbXlOb2RlIiwiaXNTcG90dGVkIiwiZHJhd01lc3NhZ2VfMSIsImNvbXB1dGVyTnVtYmVyIiwicGxheWVyTnVtYmVyIiwiY2hlY2tXaW5uZXIiLCJkcmF3TWVzc2FnZSIsIm1lc3NhZ2UiLCJub2RlQ2VudGVyWCIsIm5vZGVDZW50ZXJZIiwiUHJldmlvdXNTdGF0ZV8xIiwiY2hhbmdlUG9zaXRpb25EZXRlY3Rpb25fMSIsIm1vdmVVbml0c18xIiwicG93ZXJBbmFseXplXzEiLCJjb21wdXRlckFjdGlvbiIsInByZXZpb3VzU3RhdGUiLCJuZWVkVG9DaGFuZ2VQb3NpdGlvbiIsIm1vdmVVbml0cyIsInNldFByZXZpb3VzU3RhdGUiLCJQcmV2aW91c1N0YXRlIiwicGxheWVyVG90YWxIZWFsdGgiLCJjb21wdXRlclRvdGFsSGVhbHRoIiwiYmVzdEFjdGlvbnNfMSIsIkNvbW1hbmRfMSIsInZ1bG5lcmFiaWxpdHlfMSIsImJlQ2xvc2VUb18xIiwic2V0Q29tbWFuZE51bWJlclRvVW5pdHNfMSIsImFkdmFuY2VfMSIsInNldENvbW1hbmROdW1iZXJUb1VuaXRzIiwiY29tbWFuZHMiLCJiZXN0QWN0aW9uQWxnb3JpdGhtIiwiZ2V0Q29tbWFuZHNCeVVuaXRJZCIsImNvbW1hbmQiLCJhY3Rpb24iLCJBdHRhY2siLCJNb3ZlVG9Ob2RlIiwiYWR2YW5jZSIsIkJlQ2xvc2VUb1VuaXQiLCJnZW5lcmF0ZVJhbmRvbUFjdGlvbl8xIiwiQ29tbWFuZFF1ZXVlXzEiLCJDb21tYW5kc18xIiwidG90YWxFZmZpY2llbmN5XzEiLCJjb21tYW5kUXVldWUiLCJnZW5lcmF0ZVJhbmRvbUFjdGlvbiIsImFkZENvbW1hbmQiLCJ1bml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zIiwiZ2V0VW5pdHNXaXRoU2ltdWxhdGluZ1Bvc2l0aW9ucyIsImVmZmljaWVuY3kiLCJjYWxjdWxhdGVUb3RhbEVmZmljaWVuY3kiLCJpbnNlcnQiLCJleHRyYWN0TWF4IiwiQWN0aW9uXzEiLCJhY3Rpb25Ob2RlIiwiY2hvb3NlUmFuZG9tQ29tbWFuZCIsImdldFJhbmRvbVZhbHVlSW5SYW5nZV8xIiwicmFuZ2VXaXRoUHJvYmFiaWxpdHlfMSIsImdldFJhbmRvbVZhbHVlSW5SYW5nZVdpdGhQcm9iYWJpbGl0eSIsInByb2JhYmlsaXRpZXMiLCJpbnRlcnZhbCIsInByb2JhYmlsaXR5IiwiaW50ZXJ2YWxNaW4iLCJpbnRlcnZhbE1heCIsIkFjdGlvbiIsIkNvbW1hbmRRdWV1ZSIsImVsZW1lbnRzIiwiY29tbWFuZElkIiwiaXNFbXB0eSIsImNsZWFyRWxlbWVudHMiLCJDb21tYW5kcyIsImNsZWFyQ29tbWFuZHMiLCJjYWxjdWxhdGVFZmZpY2llbmN5XzEiLCJjYWxjdWxhdGVFZmZpY2llbmN5IiwiZ2V0RXhwbG9yYXRpb25Ob2RlXzEiLCJhc3NpZ25FeHBsb3JhdGlvbl8xIiwic2ltdWxhdGVGaWdodF8xIiwiY2FsY3VsYXRlVW5pdHNXZWlnaHRfMSIsInRvdGFsVnVsbmVyYWJpbGl0eV8xIiwiY29tcHV0ZXJVbml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zIiwiZXhwbG9yYXRpb25Vbml0RWZmaWNpZW5jeSIsInVuaXRFZmZpY2llbmN5IiwiYXNzaWduRXhwbG9yYXRpb25UYXNrIiwiZXhwbG9yYXRpb25Ob2RlIiwiZ2V0RXhwbG9yYXRpb25Ob2RlIiwiY2xvc2VFbmVtaWVzIiwiY2xvc2VBbGxpZXMiLCJjbG9zZUFsbGllc1dpdGhVbml0Iiwid2VpZ2h0UmF0aW8iLCJoZWFsdGhSYXRpbyIsImNsb3NlRW5lbWllc051bWJlciIsImNsb3NlQWxsaWVzTnVtYmVyIiwiY2xvc2VBbGxpZXNXZWlnaHQiLCJjbG9zZUVuZW1pZXNXZWlnaHQiLCJ1bml0SGVhbHRoUGVyY2VudGFnZSIsImVuZW1pZXNJbml0aWFsSGVhbHRoIiwiY2xvc2VBbGxpZXNJbml0aWFsSGVhbHRoV2l0aFVuaXQiLCJlbmVtaWVzSGVhbHRoIiwiY2xvc2VBbGxpZXNIZWFsdGhXaXRoVW5pdCIsImVuZW1pZXNIZWFsdGhQZXJjZW50YWdlIiwiY2xvc2VBbGxpZXNIZWFsdGhXaXRoVW5pdFBlcmNlbnRhZ2UiLCJlbmVteWVuZW1pZXNIZWFsdGhQZXJjZW50YWdlIiwic2ltdWxhdGVGaWdodCIsInVuaXRIZWFsdGhSZW1haW4iLCJ2dWxuZXJhYmlsaXR5RGlmZmVyZW5jZSIsImNhbGN1bGF0ZVRvdGFsVnVsbmVyYWJpbGl0eSIsInJhbmRvbVVuaXQiLCJ1bml0QW5hbHl6ZV8xIiwiQUlfMSIsInVuaXRUeXBlcyIsImNhbGN1bGF0ZVVuaXRUeXBlcyIsInNjb3V0cyIsImNhdmFscnkiLCJmYXN0ZXN0VW5pdCIsInBlcmNlbnRhZ2VPZlNjb3V0cyIsImNhbGN1bGF0ZVVuaXRzVG9CZXdhcmUiLCJ1bml0c1RvQmV3YXJlIiwiY2FsY3VsYXRlU3Vycm91bmRlZEVuZW15UG93ZXIiLCJzdXJyb3VuZGVkRW5lbWllc18xIiwiY2FsY3VsYXRlU3Vycm91bmRlZEFsbGllc1Bvd2VyIiwic3Vycm91bmRlZEFsbGllc18xIiwiY2FsY3VsYXRlUG93ZXJBZHZhbnRhZ2VJblRoZUFyZWEiLCJ0eXBlcyIsImluZmFudHJ5Iiwic3BlYXJtZW4iLCJsaWdodEluZmFudHJ5IiwiaGVhdnlJbmZhbnRyeSIsInNraXJtaXNoZXJzIiwiZ2V0VW5pdFR5cGVzSW5QZXJjZW50YWdlIiwidG90YWxVbml0cyIsImdldEluaXRpYWxQcm9wZXRpZXMiLCJpbml0aWFsTnVtYmVyT2ZVbml0cyIsImluaXRpYWxOdW1iZXJPZkVuZW1pZXMiLCJpbml0aWFsVW5pdHNIZWFsdGgiLCJpbml0aWFsRW5lbWllc0hlYWx0aCIsImF0dGFja3MiLCJ1bml0SGVhbHRoQmVmb3JlRmlnaHQiLCJlbmVteUhlYWx0aEJlZm9yZUZpZ2h0IiwidW5pdEhlYWx0aCIsImVuZW15SGVhbHRoIiwidW5pdERhbWFnZSIsImVuZW15RGFtYWdlIiwidW5pdFBlcmNlbnRhZ2VSZW1haW4iLCJlbmVteVBlcmNlbnRhZ2VSZW1haW4iLCJlbmVteUhlYWx0aFJlbWFpbiIsInRvdGFsVnVsbmVyYWJpbGl0eSIsImV4bHVzaW9uIiwidnVsbmVyYWJpbGl0eSIsIm5lYXJlc3RBbGxpZXMiLCJuZWFyZXN0RW5lbWllcyIsIm5lYXJlc3RBbGxpZXNXZWlnaHQiLCJuZWFyZXN0RW5lbWllc1dlaWdodCIsIm51bWJlck9mRGFuZ2Vyb3VzVW5pdHMiLCJjb250YWluc0Rhbmdlcm91c1VuaXRzTmVhcmJ5IiwibmVhcmVzdEVuZW15U3BlZWQiLCJQcmlvcml0eVF1ZXVlXzEiLCJwcmlvcml0eVF1ZXVlIiwiZWxlbWVudCIsIlByaW9yaXR5UXVldWUiLCJwcmlvcml0eSIsInVwZGF0ZSIsIm5ld1ByaW9yaXR5IiwibGF1bmNoR2FtZV8xIiwibGF1bmNoTWFpbk1lbnVfMSIsImxhdW5jaE1haW5NZW51IiwibWFpbl8xIiwiZHJhd0xvYWRpbmdDYW52YXNfMSIsImRyYWdBbmREcm9wIiwiaXNVbml0U2VsZWN0ZWRJblJvc3Rlcl8xIiwic3BlbnRHb2xkXzEiLCJfXzIiLCJzdGFydEJhdHRsZUF2YWlsYWJsZV8xIiwiaG92ZXJlZFVuaXRfMSIsImNvaW5fMSIsImRyYXdDb2luIiwiZHJhd0NvaW5fMSIsInJpZ2h0VG9wWCIsInJpZ2h0VG9wWSIsImxpbmUxWDAiLCJsaW5lMVkwIiwibGluZTFYMSIsImxpbmUxWTEiLCJsaW5lMlgwIiwibGluZTJZMCIsImxpbmUyWDEiLCJsaW5lMlkxIiwiY2hvb3NlVW5pdF8xIiwiY2hvc2VuVW5pdHNfMSIsInNlbGVjdGVkVW5pdF8xIiwic2VsZWN0ZWRVbml0IiwibW9uZXlCb3hfMSIsImFtb3VudCIsImJ1dHRvbl8xIiwiZ29sZEJveGVzIiwiZ29sZEJveGVzXzEiLCJib3giLCJnb2xkT3B0aW9uc18xIiwiZ29sZEJveGVzXzIiLCJvbkNob29zZUNvbXB1dGVyXzEiLCJvbkNob29zZVBsYXllcl8xIiwidXBwZXJMYXlvdXRTZXR0aW5nc18xIiwic3BlbmRlZEdvbGQiLCJjb21wdXRlclVuaXRzTnVtYmVyIiwicGxheWVyVW5pdHNOdW1iZXIiLCJjb21wdXRlclJlbWFpbkdvbGQiLCJwbGF5ZXJSZW1haW5Hb2xkIiwiYnV0dG9uXzIiLCJib3R0b21TZXR0aW5nc18xIiwic3dpdGNoZXJfMSIsInVuaXRJbmZvXzEiLCJ1bml0SW5mbyIsImRpc3BsYXlVbml0SW5mbyIsImluZm9TZXR0aW5nc18yIiwicHJvcGVydHlMaXN0IiwicHJvcGVydHlMaXN0XzEiLCJzZWxlY3RlZFVuaXRfMiIsImluZm9MYXlvdXRfMiIsImxhdW5jaF8xIiwiaXNVbml0QWRkZWRUb0FybXkiLCJvbkNob29zZVJvc3RlciIsIm9uRHJhZ1VuaXQiLCJ4XzEiLCJ5XzEiLCJiYXR0bGVNb2RlXzEiLCJtYWluTWVudU1vZGVfMSIsImNhbnZhc18yIiwiY2xlYXJNYWluTWVudV8xIiwiY3JlYXRlQXJteV8xIiwiY2xlYXJNYWluTWVudSIsImZpbGxVbml0VG9JY29uTWFwIiwiY3JlYXRlQXJteSIsImNyZWF0ZVBsYXllckFybXkiLCJjcmVhdGVDb21wdXRlckFybXkiLCJwbGF5ZXJOb2Rlc18xIiwiY29tcHV0ZXJOb2Rlc18xIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFB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b0IsV0FDN0JoMkMsRUFBQXlnQixlQUNJbk8sUUFBVytGLEVBQUF5RSxlQUNYdEssYUFBZ0I2RixFQUFBeUUsZUFDaEJySyxTQUFZNEYsRUFBQTZFLHdCQUNadkssYUFBZ0IwRixFQUFBeUUsZUFDaEJwSyxjQUFpQjJGLEVBQUF5RSxlQUNqQnZLLGNBQWlCOEYsRUFBQXlFLGVBQ2pCbEssUUFBV3lGLEVBQUF5RSxlQUNYakssU0FBWXdGLEVBQUF5RSxlQUNaaEssUUFBV3VGLEVBQUEyRSxlQUNYakssT0FBVXNGLEVBQUF5RSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTI4KTtcbiIsImltcG9ydCB7XHJcbiAgTUFQX0hFSUdIVCxcclxuICBNQVBfV0lEVEgsXHJcbiAgQ0FOVkFTX0hFSUdIVCxcclxuICBncmlkU2l6ZVxyXG59IGZyb20gJy4vbWFwJztcclxuXHJcbmltcG9ydCB7XHJcbiAgbWFpbk1lbnVNb2RlLFxyXG4gIHNldEJhdHRsZU1vZGUsXHJcbiAgc2V0TWFpbk1lbnVNb2RlXHJcbn0gZnJvbSAnLi9nbG9iYWwnO1xyXG5cclxuZXhwb3J0IHtcclxuICBNQVBfSEVJR0hULFxyXG4gIE1BUF9XSURUSCxcclxuICBDQU5WQVNfSEVJR0hULFxyXG4gIGdyaWRTaXplLFxyXG4gIG1haW5NZW51TW9kZSxcclxuICBzZXRCYXR0bGVNb2RlLFxyXG4gIHNldE1haW5NZW51TW9kZVxyXG59XHJcbiIsImltcG9ydCB7bG9hZEltYWdlfSBmcm9tICcuL2ltYWdlJztcclxuaW1wb3J0IHtcclxuICBnZXROb2RlRnJvbU1hcCxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHMsXHJcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzLFxyXG4gIGFkZE5vZGVJbnRvQXJyYXksXHJcbiAgZ2V0Tm9kZUZyb21BcnJheSxcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRNYXhWYWx1ZUZyb21Ob2Rlc1xyXG59IGZyb20gJy4vbm9kZSc7XHJcbmltcG9ydCB7XHJcbiAgZGVsZXRlT2JqZWN0RnJvbUFycmF5LFxyXG4gIGlzT2JqZWN0SW5BcnJheSxcclxuICBpc09iamVjdEVtcHR5XHJcbn0gZnJvbSAnLi9vYmplY3Qvb2JqVXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGFkZFVuaXRJbnRvQXJyYXksXHJcbiAgYW5vdGhlclVuaXRJc09uVGhlV2F5LFxyXG4gIGRlbGV0ZVVuaXRGcm9tQXJyYXksXHJcbiAgZGVsZXRlVW5pdEZyb21Bcm15LFxyXG4gIGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5HcmlkcyxcclxuICBnZXRVbml0c01pblByb3BlcnR5LFxyXG4gIGdldFVuaXRzTWF4UHJvcGVydHksXHJcbiAgaXNVbml0SW5BcnJheVxyXG59IGZyb20gJy4vdW5pdCc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0U3Vycm91bmRlZE5vZGVzLFxyXG4gIGdldFN1cnJvdW5kZWRFbmVtaWVzXHJcbn0gZnJvbSAnLi9zdXJyb3VuZGVkJztcclxuXHJcbmltcG9ydCB7XHJcbiAgZHJhd0JhY2tncm91bmQsXHJcbiAgZHJhd09ic3RhY2xlXHJcbn0gZnJvbSAnLi9kcmF3JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZ2V0Tm9kZUZyb21NYXAsXHJcbiAgbG9hZEltYWdlLFxyXG4gIGdldERpc3RhbmNlQmV0d2VlblVuaXRBbmROb2RlSW5HcmlkcyxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Ud29Ob2Rlc0luR3JpZHMsXHJcbiAgZGVsZXRlT2JqZWN0RnJvbUFycmF5LFxyXG4gIGlzT2JqZWN0SW5BcnJheSxcclxuICBhZGROb2RlSW50b0FycmF5LFxyXG4gIGdldE5vZGVGcm9tQXJyYXksXHJcbiAgaXNPYmplY3RFbXB0eSxcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRNYXhWYWx1ZUZyb21Ob2RlcyxcclxuICBkZWxldGVVbml0RnJvbUFycmF5LFxyXG4gIGRlbGV0ZVVuaXRGcm9tQXJteSxcclxuICBhZGRVbml0SW50b0FycmF5LFxyXG4gIGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5HcmlkcyxcclxuICBpc1VuaXRJbkFycmF5LFxyXG4gIGFub3RoZXJVbml0SXNPblRoZVdheSxcclxuICBnZXRVbml0c01pblByb3BlcnR5LFxyXG4gIGdldFVuaXRzTWF4UHJvcGVydHksXHJcbiAgZ2V0U3Vycm91bmRlZE5vZGVzLFxyXG4gIGdldFN1cnJvdW5kZWRFbmVtaWVzLFxyXG4gIGRyYXdCYWNrZ3JvdW5kLFxyXG4gIGRyYXdPYnN0YWNsZVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgY3R4LFxyXG4gIGF1eGlsaWFyeUN0eCxcclxuICBiYWNrZ3JvdW5kQ3R4LFxyXG4gIGRyYWdBbmREcm9wQ2FudmFzQ3R4LFxyXG4gIG1haW5NZW51Q3R4LFxyXG4gIHRlcnJhaW5DdHhcclxufSBmcm9tICcuL2NvbnRleHQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjdHgsXHJcbiAgYXV4aWxpYXJ5Q3R4LFxyXG4gIGJhY2tncm91bmRDdHgsXHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHgsXHJcbiAgbWFpbk1lbnVDdHgsXHJcbiAgdGVycmFpbkN0eFxyXG59XHJcbiIsImltcG9ydCB7IGlzVW5pdEluQXJyYXkgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IGRlbGV0ZVVuaXRGcm9tQXJyYXkgfSBmcm9tICcuLi8uLi91dGlscy91bml0L2dlbmVyYWwnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5pbXBvcnQgeyByZW1vdmVVbml0RnJvbVZpc2libGVVbml0cywgcmVtb3ZlVW5pdEZyb21TcG90dGVkVW5pdHMgfSBmcm9tICcuLic7XHJcbmltcG9ydCB7IHJlbW92ZVVuaXQgfSBmcm9tICcuLi8uLi91bml0L3JlbW92ZSc7XHJcblxyXG5leHBvcnQgbGV0IHVuaXRzOlVuaXRbXSA9IFtdO1xyXG5leHBvcnQgbGV0IHBsYXllclVuaXRzOlVuaXRbXSA9IFtdO1xyXG5leHBvcnQgbGV0IGNvbXB1dGVyVW5pdHM6VW5pdFtdID0gW107XHJcblxyXG5leHBvcnQgY29uc3QgYWRkVG9Vbml0cyA9ICh1bml0OlVuaXQpID0+IHtcclxuICBpZih1bml0KSB7XHJcbiAgICBpZighaXNVbml0SW5BcnJheSh1bml0LCB1bml0cykpIHtcclxuICAgICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgICAgICBhZGRUb0NvbXB1dGVyVW5pdHModW5pdCk7XHJcbiAgICAgICAgdW5pdHMucHVzaCh1bml0KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgICAgIGFkZFRvUGxheWVyVW5pdHModW5pdCk7XHJcbiAgICAgICAgdW5pdHMucHVzaCh1bml0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZGVmaW5lZCB1bml0IGNvbnRyb2wnKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bml0IGlzIGFscmVhZHkgYWRkZWQnKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRUb0NvbXB1dGVyVW5pdHMgPSAodW5pdDpVbml0KSA9PiB7XHJcbiAgaWYodW5pdCkge1xyXG4gICAgaWYoIWlzVW5pdEluQXJyYXkodW5pdCwgY29tcHV0ZXJVbml0cykpIHtcclxuICAgICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgICAgICBjb21wdXRlclVuaXRzLnB1c2godW5pdCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZGRUb1BsYXllclVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQpIHtcclxuICAgIGlmKCFpc1VuaXRJbkFycmF5KHVuaXQsIHBsYXllclVuaXRzKSkge1xyXG4gICAgICBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ3BsYXllcicpIHtcclxuICAgICAgICBwbGF5ZXJVbml0cy5wdXNoKHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbVVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQpIHtcclxuICAgIHVuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1bml0cyk7IFxyXG4gICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgICAgcmVtb3ZlRnJvbUNvbXB1dGVyVW5pdHModW5pdCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgICByZW1vdmVGcm9tUGxheWVyVW5pdHModW5pdCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbVBsYXllclVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQgJiYgdW5pdC5jb250cm9sQnkgPT09ICdwbGF5ZXInKSB7XHJcbiAgICBwbGF5ZXJVbml0cyA9IGRlbGV0ZVVuaXRGcm9tQXJyYXkodW5pdCwgcGxheWVyVW5pdHMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUZyb21Db21wdXRlclVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQgJiYgdW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGNvbXB1dGVyVW5pdHMgPSBkZWxldGVVbml0RnJvbUFycmF5KHVuaXQsIGNvbXB1dGVyVW5pdHMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUFsbENvbXB1dGVyVW5pdHMgPSAoKTp2b2lkID0+IHtcclxuICBjb21wdXRlclVuaXRzID0gW107XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVBbGxQbGF5ZXJVbml0cyA9ICgpOnZvaWQgPT4ge1xyXG4gIHBsYXllclVuaXRzID0gW107XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVBbGxVbml0cyA9ICgpOnZvaWQgPT4ge1xyXG4gIHJlbW92ZUFsbENvbXB1dGVyVW5pdHMoKTtcclxuICByZW1vdmVBbGxQbGF5ZXJVbml0cygpO1xyXG4gIHVuaXRzID0gW107XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkZWNyZWFzZVNwZW50R29sZCxcclxuICBpbmNyZWFzZVNwZW50R29sZCxcclxuICBzZXRUb3RhbEdvbGRcclxufSBmcm9tICcuL2dvbGQnO1xyXG5pbXBvcnQge1xyXG4gIGFybXlMYXlvdXRIZWlnaHQsXHJcbiAgYXJteUxheW91dFdpZHRoLFxyXG4gIGluZm9MYXlvdXRIZWlnaHQsXHJcbiAgaW5mb0xheW91dFdpZHRoLFxyXG4gIHVuaXRSb3N0ZXJIZWlnaHQsXHJcbiAgdW5pdFJvc3RlcldpZHRoLFxyXG4gIHN0YXJ0QmF0dGxlU3RhcnRZLFxyXG4gIHN0YXJ0QmF0dGxlSGVpZ2h0LFxyXG4gIHN0YXJ0QmF0dGxlV2lkdGgsXHJcbiAgdGl0bGVIZWlnaHRcclxufSBmcm9tICcuL2xheW91dHMnO1xyXG5pbXBvcnQge1xyXG4gIGNoYW5nZUJhdHRsZVNldHRpbmdzVG9UcnVlLFxyXG4gIGNoYW5nZVVuaXRJbmZvVG9UcnVlLFxyXG4gIHNob3dCYXR0bGVTZXR0aW5ncyxcclxuICBzaG93VW5pdEluZm9cclxufSBmcm9tICcuL3Nob3cnO1xyXG5pbXBvcnQge1xyXG4gIGNoYW5nZVRvQ29tcHV0ZXIsXHJcbiAgY2hhbmdlVG9QbGF5ZXIsXHJcbiAgc2lkZVxyXG59IGZyb20gJy4vc2lkZXMnO1xyXG5pbXBvcnQge1xyXG4gIGRpc2FibGVTdGFydEJhdHRsZUJ1dHRvbixcclxuICBlbmFibGVTdGFydEJhdHRsZUJ1dHRvbixcclxuICBzdGFydEJhdHRsZUF2YWlsYWJsZVxyXG59IGZyb20gJy4vc3RhcnRCYXR0bGUnO1xyXG5pbXBvcnQge1xyXG4gIGNoYW5nZUhvdmVyZWRVbml0LFxyXG4gIGhvdmVyZWRVbml0LFxyXG4gIGNvbXB1dGVySGFzVW5pdHMsXHJcbiAgcGxheWVySGFzVW5pdHNcclxufSBmcm9tICcuL3VuaXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkZWNyZWFzZVNwZW50R29sZCxcclxuICBpbmNyZWFzZVNwZW50R29sZCxcclxuICBzZXRUb3RhbEdvbGQsXHJcbiAgYXJteUxheW91dEhlaWdodCxcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgaW5mb0xheW91dEhlaWdodCxcclxuICBpbmZvTGF5b3V0V2lkdGgsXHJcbiAgdW5pdFJvc3RlckhlaWdodCxcclxuICB1bml0Um9zdGVyV2lkdGgsXHJcbiAgc3RhcnRCYXR0bGVTdGFydFksXHJcbiAgc3RhcnRCYXR0bGVIZWlnaHQsXHJcbiAgc3RhcnRCYXR0bGVXaWR0aCxcclxuICB0aXRsZUhlaWdodCxcclxuICBjaGFuZ2VCYXR0bGVTZXR0aW5nc1RvVHJ1ZSxcclxuICBjaGFuZ2VVbml0SW5mb1RvVHJ1ZSxcclxuICBzaG93QmF0dGxlU2V0dGluZ3MsXHJcbiAgc2hvd1VuaXRJbmZvLFxyXG4gIGNoYW5nZVRvQ29tcHV0ZXIsXHJcbiAgY2hhbmdlVG9QbGF5ZXIsXHJcbiAgc2lkZSxcclxuICBkaXNhYmxlU3RhcnRCYXR0bGVCdXR0b24sXHJcbiAgZW5hYmxlU3RhcnRCYXR0bGVCdXR0b24sXHJcbiAgc3RhcnRCYXR0bGVBdmFpbGFibGUsXHJcbiAgY2hhbmdlSG92ZXJlZFVuaXQsXHJcbiAgaG92ZXJlZFVuaXQsXHJcbiAgY29tcHV0ZXJIYXNVbml0cyxcclxuICBwbGF5ZXJIYXNVbml0c1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYWRkTm9kZUludG9BcnJheVxyXG59IGZyb20gJy4vYWRkJztcclxuaW1wb3J0IHtcclxuICBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHMsXHJcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzXHJcbn0gZnJvbSAnLi9kaXN0YW5jZSc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0Tm9kZUZyb21BcnJheSxcclxuICBnZXROb2RlRnJvbU1hcCxcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRNYXhWYWx1ZUZyb21Ob2Rlc1xyXG59IGZyb20gJy4vZ2V0JztcclxuaW1wb3J0IHtcclxuXHJcbn0gZnJvbSAnLi9tYXAnO1xyXG5pbXBvcnQge1xyXG4gIGdldFJhbmRvbU5vZGVcclxufSBmcm9tICcuL3JhbmRvbSc7XHJcbmltcG9ydCB7XHJcbiAgc2h1ZmZsZU5vZGVzXHJcbn0gZnJvbSAnLi9zaHVmZmxlJztcclxuaW1wb3J0IHtnZXRTdXJyb3VuZGVkQmxvY2tlZE5vZGVzfSBmcm9tICcuL3N1cnJvdW5kZWQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBhZGROb2RlSW50b0FycmF5LFxyXG4gIGdldERpc3RhbmNlQmV0d2VlblVuaXRBbmROb2RlSW5HcmlkcyxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Ud29Ob2Rlc0luR3JpZHMsXHJcbiAgZ2V0Tm9kZUZyb21BcnJheSxcclxuICBnZXROb2RlRnJvbU1hcCxcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRNYXhWYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRSYW5kb21Ob2RlLFxyXG4gIGdldFN1cnJvdW5kZWRCbG9ja2VkTm9kZXMsXHJcbiAgc2h1ZmZsZU5vZGVzXHJcbn1cclxuIiwiaW1wb3J0IHtncmlkU2l6ZX0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHtcclxuICBpc09iamVjdEVtcHR5LFxyXG4gIGdldE5vZGVGcm9tTWFwXHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGRlbGV0ZVVuaXRGcm9tQXJyYXksIGlzVW5pdEluQXJyYXlcclxufSBmcm9tICcuLi8uLi91dGlscy91bml0L2dlbmVyYWwnO1xyXG5pbXBvcnQge3JhZGl1c30gZnJvbSAnLi4vLi4vY29uZmlnL3VuaXQnO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tICcuLi8uLi9tYXAvbm9kZXMvTWFwTm9kZSc7XHJcblxyXG5jbGFzcyBVbml0IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB4OiBudW1iZXI7XHJcbiAgeTogbnVtYmVyO1xyXG4gIGNlbnRlclg6IG51bWJlcjtcclxuICBjZW50ZXJZOiBudW1iZXI7XHJcbiAgcmFkaXVzOiBudW1iZXIgPSByYWRpdXM7XHJcbiAgbW92ZVRvTm9kZTogTWFwTm9kZTtcclxuICBjdXJyZW50Tm9kZTogTWFwTm9kZTtcclxuICBuZXh0Tm9kZTogTWFwTm9kZTtcclxuICBpc0N1cnJlbnRseUNob3NlbjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIGNvbnRyb2xCeTogc3RyaW5nO1xyXG4gIGltZ1NyYzogc3RyaW5nID0gJy4vc3JjL2ltZy91bml0cy9waWtlbWVuLmpwZyc7XHJcbiAgaXNNb3Zpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBpc1Zpc2libGU6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gIHVuaXRUb1B1cnN1ZTogYW55ID0gbnVsbDtcclxuICBpc0ZpZ2h0aW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgZmlndGhBZ2FpbnN0OiBhbnkgPSB7XHJcbiAgICBmcm9udDoge30sXHJcbiAgICBmbGFuazogW10sXHJcbiAgICByZWFyOiB7fSxcclxuICAgIGFsbDogW11cclxuICB9O1xyXG5cclxuICAvLyBnZW5lcmFsXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICBjb3N0OiBudW1iZXI7XHJcbiAgYWR2YW50YWdlT3Zlcjogc3RyaW5nW107XHJcbiAgdnVsbmVyYWJsZUFnYWluc3Q6IHN0cmluZ1tdO1xyXG5cclxuICAvLyBDaGFyYWN0ZXJpc3RpY3NcclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgaGVhbHRoOiBudW1iZXIgPSAxMDA7XHJcbiAgc3BlZWQ6IG51bWJlciA9IDEwO1xyXG4gIGFybW91cjogbnVtYmVyID0gMTtcclxuICByYW5nZTogbnVtYmVyID0gMDtcclxuICBtb2JpbGl0eTogbnVtYmVyID0gMTtcclxuICBtZWxlZURhbWFnZTogbnVtYmVyID0gMTtcclxuICBtaXNzaWxlRGFtYWdlOiBudW1iZXIgPSAwO1xyXG4gIHNob3RzUmVtYWluZWQ6bnVtYmVyID0gMDtcclxuICBjaGFyZ2U6bnVtYmVyID0gMjtcclxuICBkaXNjaXBsaW5lOiBudW1iZXIgPSA1O1xyXG4gIHdlaWdodDogbnVtYmVyID0gMDtcclxuICB2aXNpYmlsaXR5Om51bWJlciA9IDU7XHJcbiAgbW9yYWxlOiBudW1iZXIgPSAxMDA7XHJcbiAgY29uZGl0aW9uOiBudW1iZXIgPSAxMDA7XHJcbiAgaW5pdGlhbEhlYWx0aDogbnVtYmVyO1xyXG5cclxuICAvLyBBSSBhdHRyaWJ1dGVzXHJcbiAgcG9zaXRpb246c3RyaW5nOyAvLyBwb3NpdGlvbiBpbiBmb3JtYXRpb25cclxuICB0YXNrOnN0cmluZztcclxuICB1bml0VG9Qcm90ZWN0Om51bWJlcjtcclxuICBiYXNlTm9kZTphbnkgPSB7fTtcclxuICBpc1VuaXRVbmRlclByb3RlY3Rpb246Ym9vbGVhbiA9IGZhbHNlO1xyXG4gIHVuaXRUb0hlbHA6bnVtYmVyO1xyXG4gIGlzVW5pdE5lZWRIZWxwOmJvb2xlYW4gPSBmYWxzZTtcclxuICBiZUNsb3NlVG86YW55W10gPSBbXTtcclxuICBjb21tYW5kTnVtYmVyOiBudW1iZXI7XHJcbiAgZnJvemVuOmJvb2xlYW4gPSBmYWxzZTsgLy8gdG8gcHJldmVudCB0b28gbWFueSBvcmRlcnMgaW4gc2hvcnQgcGVyaW9kIG9mIHRpbWVcclxuICBcclxuICBjb25zdHJ1Y3RvcihpZDpudW1iZXIsIHg6bnVtYmVyLCB5Om51bWJlciwgY29udHJvbEJ5OnN0cmluZz0ncGxheWVyJykge1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy54ID0geDtcclxuICAgIHRoaXMueSA9IHk7XHJcbiAgICB0aGlzLmNlbnRlclggPSB4ICsgKGdyaWRTaXplIC8gMik7XHJcbiAgICB0aGlzLmNlbnRlclkgPSB5ICsgKGdyaWRTaXplIC8gMik7XHJcbiAgICB0aGlzLmNvbnRyb2xCeSA9IGNvbnRyb2xCeTtcclxuICAgIHRoaXMuY3VycmVudE5vZGUgPSBnZXROb2RlRnJvbU1hcCh4LCB5KTtcclxuICAgIHRoaXMubmV4dE5vZGUgPSBnZXROb2RlRnJvbU1hcCh4LCB5KTtcclxuICB9XHJcblxyXG4gIHNldFgoeDpudW1iZXIpIHtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLmNlbnRlclggPSB4ICsgKGdyaWRTaXplIC8gMik7XHJcbiAgfVxyXG5cclxuICBzZXRZKHk6bnVtYmVyKSB7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy5jZW50ZXJZID0geSArIChncmlkU2l6ZSAvIDIpO1xyXG4gIH1cclxuXHJcbiAgc2V0SXNNb3ZpbmdUb0ZhbHNlKCkge1xyXG4gICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc2V0SXNNb3ZpbmdUb1RydWUoKSB7XHJcbiAgICB0aGlzLmlzTW92aW5nID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldFVuaXRUb1B1cnN1ZShvcHBvbmVudHNVbml0OlVuaXQpIHtcclxuICAgIHRoaXMudW5pdFRvUHVyc3VlID0gb3Bwb25lbnRzVW5pdDtcclxuICB9XHJcblxyXG4gIHNldFVuaXRUb1B1cnN1ZVRvTnVsbCgpIHtcclxuICAgIHRoaXMudW5pdFRvUHVyc3VlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIHNldElzRmlnaHRpbmdUb1RydWUoKSB7XHJcbiAgICB0aGlzLmlzRmlnaHRpbmcgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0SXNGaWdodGluZ1RvRmFsc2UoKSB7XHJcbiAgICB0aGlzLmlzRmlnaHRpbmcgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGFzc2lnbk1vdmVUb1Bvc2l0aW9uKHg6bnVtYmVyLCB5Om51bWJlcikge1xyXG4gICAgbGV0IG5vZGU6IE1hcE5vZGUgPSBnZXROb2RlRnJvbU1hcCh4LCB5KTtcclxuICAgIGlmKG5vZGUpIHtcclxuICAgICAgdGhpcy5tb3ZlVG9Ob2RlID0gbm9kZTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICByZW1vdmVFbmVteUZyb21GbGFuayhvcHBvbmVudDpVbml0KSB7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5maWd0aEFnYWluc3QuZmxhbmsubGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYodGhpcy5maWd0aEFnYWluc3QuZmxhbmtbaV0uaWQgPT09IG9wcG9uZW50LmlkKSB7XHJcbiAgICAgICAgdGhpcy5maWd0aEFnYWluc3QuZmxhbmsgPSBkZWxldGVVbml0RnJvbUFycmF5KG9wcG9uZW50LCB0aGlzLmZpZ3RoQWdhaW5zdC5mbGFuayk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluY3JlYXNlQ29uZGl0aW9uKHZhbHVlOm51bWJlcikge1xyXG4gICAgaWYodGhpcy5jb25kaXRpb24gPCAxMDApIHsgLy8gY29uZGl0aW9uIGNhbm5vdCBiZSBtb3JlIHRoYW4gMTAwXHJcbiAgICAgIHRoaXMuY29uZGl0aW9uICs9IHZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVjcmVhc2VDb25kaXRpb24odmFsdWU6bnVtYmVyKSB7XHJcbiAgICBpZih0aGlzLmNvbmRpdGlvbiA+IDApIHsgLy8gY29uZGl0aW9uIGNhbm5vdCBiZSBsZXNzIHRoYW4gMFxyXG4gICAgICB0aGlzLmNvbmRpdGlvbiAtPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBzZXRDdXJyZW50Tm9kZShub2RlOiBNYXBOb2RlKSB7XHJcbiAgICBsZXQgZm91bmROb2RlOiBNYXBOb2RlID0gZ2V0Tm9kZUZyb21NYXAobm9kZS54LCBub2RlLnkpO1xyXG4gICAgaWYoZm91bmROb2RlKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBmb3VuZE5vZGU7XHJcbiAgICB9IFxyXG4gICAgLy8gZWxzZSB7XHJcbiAgICAvLyAgIHRocm93IGBFcnJvcjogTm9kZSAke25vZGV9IG5vdCBmb3VuZCBpbiB0aGUgbWFwYDtcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIHNldE5leHROb2RlKG5vZGU6IE1hcE5vZGUpIHtcclxuICAgIGxldCBmb3VuZE5vZGU6IE1hcE5vZGUgPSBnZXROb2RlRnJvbU1hcChub2RlLngsIG5vZGUueSk7XHJcbiAgICBpZihmb3VuZE5vZGUpIHtcclxuICAgICAgdGhpcy5uZXh0Tm9kZSA9IGZvdW5kTm9kZTtcclxuICAgIH1cclxuICAgIC8vIGVsc2Uge1xyXG4gICAgLy8gICB0aHJvdyBgRXJyb3I6IE5vZGUgJHtub2RlfSBub3QgZm91bmQgaW4gdGhlIG1hcGA7XHJcbiAgICAvLyB9XHJcbiAgfVxyXG5cclxuICBhc3NpZ25FbmVteShlbmVteTpVbml0KSB7XHJcbiAgICBpZihpc09iamVjdEVtcHR5KHRoaXMuZmlndGhBZ2FpbnN0LmZyb250KSkgeyAvLyBkb24ndCBoYXZlIGZyb250IGVuZW15XHJcbiAgICAgIHRoaXMuZmlndGhBZ2FpbnN0LmZyb250ID0gZW5lbXk7XHJcbiAgICB9IGVsc2UgeyAvLyB1bml0IGlzIGFscmVhZHkgaGF2ZSBmcm9udCBsaW5lIGVuZW15XHJcbiAgICAgIGxldCBmcm9udEVuZW15Tm9kZSA9IHRoaXMuZmlndGhBZ2FpbnN0LmZyb250LmN1cnJlbnROb2RlO1xyXG4gICAgICBsZXQgbmV3RW5lbXlOb2RlID0gZW5lbXkuY3VycmVudE5vZGU7XHJcbiAgICAgIGxldCB1bml0Tm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XHJcbiAgICAgIGxldCBmcm9udEVuZW15RGlmZlggPSAodW5pdE5vZGUueCAtIGZyb250RW5lbXlOb2RlLngpIC8gZ3JpZFNpemU7XHJcbiAgICAgIGxldCBmcm9udEVuZW15RGlmZlkgPSAodW5pdE5vZGUueSAtIGZyb250RW5lbXlOb2RlLnkpIC8gZ3JpZFNpemU7XHJcbiAgICAgIGxldCBuZXdFbmVteURpZmZYID0gKHVuaXROb2RlLnggLSBuZXdFbmVteU5vZGUueCkgLyBncmlkU2l6ZTtcclxuICAgICAgbGV0IG5ld0VuZW15RGlmZlkgPSAodW5pdE5vZGUueSAtIG5ld0VuZW15Tm9kZS55KSAvIGdyaWRTaXplO1xyXG4gICAgICBpZihmcm9udEVuZW15RGlmZlggPT09IC1uZXdFbmVteURpZmZYICYmIGZyb250RW5lbXlEaWZmWSA9PT0gLW5ld0VuZW15RGlmZlkpIHsgLy8gZW5lbXkgaXMgcmVhclxyXG4gICAgICAgIHRoaXMuZmlndGhBZ2FpbnN0LnJlYXIgPSBlbmVteTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGZyb250RW5lbXlEaWZmWCA9PT0gbmV3RW5lbXlEaWZmWCAmJiBmcm9udEVuZW15RGlmZlkgPT09IC1uZXdFbmVteURpZmZZKSB7IC8vIGVuZW15IGlzIHJlYXJcclxuICAgICAgICB0aGlzLmZpZ3RoQWdhaW5zdC5yZWFyID0gZW5lbXk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihmcm9udEVuZW15RGlmZlggPT09IC1uZXdFbmVteURpZmZYICYmIGZyb250RW5lbXlEaWZmWSA9PT0gbmV3RW5lbXlEaWZmWSkgeyAvLyBlbmVteSBpcyByZWFyXHJcbiAgICAgICAgdGhpcy5maWd0aEFnYWluc3QucmVhciA9IGVuZW15O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZmlndGhBZ2FpbnN0LmZsYW5rLnB1c2goZW5lbXkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZighaXNVbml0SW5BcnJheShlbmVteSwgdGhpcy5maWd0aEFnYWluc3QuYWxsKSkge1xyXG4gICAgICB0aGlzLmZpZ3RoQWdhaW5zdC5hbGwucHVzaChlbmVteSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmlzRmlnaHRpbmcgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgaW5jcmVhc2VXZWlnaHRJblBlcmNlbnRhZ2UocGVyY2VudGFnZTogbnVtYmVyKSB7XHJcbiAgICBsZXQgbmV3V2VpZ2h0ID0gdGhpcy53ZWlnaHQgKyAodGhpcy53ZWlnaHQgKiAocGVyY2VudGFnZSAqIDAuMDEpKTtcclxuICAgIGlmKG5ld1dlaWdodCA8IDApIG5ld1dlaWdodCA9IDA7XHJcbiAgICBlbHNlIGlmKG5ld1dlaWdodCA+IDEwMCkgbmV3V2VpZ2h0ID0gMTAwO1xyXG4gICAgdGhpcy53ZWlnaHQgPSBNYXRoLnJvdW5kKG5ld1dlaWdodCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVFbmVteUZyb21GaWdodEFnYWluc3QoZW5lbXk6VW5pdCkge1xyXG4gICAgaWYoZW5lbXkuaWQgPT09IHRoaXMuZmlndGhBZ2FpbnN0LmZyb250LmlkKSB7XHJcbiAgICAgIHRoaXMuZmlndGhBZ2FpbnN0LmZyb250ID0ge307XHJcbiAgICAgIHRoaXMuYXJyYW5nZUZpZ2h0QWdhaW5zdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGVsc2UgaWYoZW5lbXkuaWQgPT09IHRoaXMuZmlndGhBZ2FpbnN0LnJlYXIuaWQpIHtcclxuICAgICAgdGhpcy5maWd0aEFnYWluc3QucmVhciA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGVsc2UgaWYodGhpcy5maWd0aEFnYWluc3QuZmxhbmsubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgIGZvcihsZXQgdW5pdCBvZiB0aGlzLmZpZ3RoQWdhaW5zdC5mbGFuaykge1xyXG4gICAgICAgIGlmKHVuaXQuaWQgPT09IGVuZW15LmlkKSB7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUVuZW15RnJvbUZsYW5rKGVuZW15KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZpZ3RoQWdhaW5zdC5hbGwgPSBkZWxldGVVbml0RnJvbUFycmF5KGVuZW15LCB0aGlzLmZpZ3RoQWdhaW5zdC5hbGwpO1xyXG5cclxuICAgIGlmKHRoaXMuZmlndGhBZ2FpbnN0LmFsbC5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5pc0ZpZ2h0aW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhcnJhbmdlRmlnaHRBZ2FpbnN0KCkge1xyXG4gICAgbGV0IHVwZGF0ZWRGbGFuazpVbml0W10gPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLmZpZ3RoQWdhaW5zdC5mbGFuayk7XHJcbiAgICBsZXQgdXBkYXRlZFJlYXI6VW5pdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZmlndGhBZ2FpbnN0LnJlYXIpO1xyXG5cclxuICAgIHRoaXMuZmlndGhBZ2FpbnN0LmZsYW5rID0gW107XHJcbiAgICB0aGlzLmZpZ3RoQWdhaW5zdC5yZWFyID0ge307XHJcblxyXG4gICAgaWYodXBkYXRlZEZsYW5rLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yKGxldCBlbmVteSBvZiB1cGRhdGVkRmxhbmspIHtcclxuICAgICAgICAgIHRoaXMuYXNzaWduRW5lbXkoZW5lbXkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZighaXNPYmplY3RFbXB0eSh1cGRhdGVkUmVhcikpIHtcclxuICAgICAgdGhpcy5hc3NpZ25FbmVteSh1cGRhdGVkUmVhcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbGVhckZpZ2h0QWdhaW5zdCgpIHtcclxuICAgIHRoaXMuZmlndGhBZ2FpbnN0LmZyb250ID0ge307XHJcbiAgICB0aGlzLmZpZ3RoQWdhaW5zdC5yZWFyID0ge307XHJcbiAgICB0aGlzLmZpZ3RoQWdhaW5zdC5mbGFuayA9IFtdO1xyXG4gICAgdGhpcy5maWd0aEFnYWluc3QuYWxsID0gW107XHJcbiAgICB0aGlzLmlzRmlnaHRpbmcgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIEFJIG1ldGhvZHNcclxuICBhc3NpZ25UYXNrKHRhc2s6c3RyaW5nKSB7XHJcbiAgICBpZih0YXNrID09PSAnZXhwbG9yYXRpb24nKSB7XHJcbiAgICAgIHRoaXMudGFzayA9IHRhc2s7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRhc2sgPT09ICdwcm90ZWN0aW9uJykge1xyXG4gICAgICB0aGlzLnRhc2sgPSB0YXNrO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0YXNrID09PSAncGF0cm9sJykge1xyXG4gICAgICB0aGlzLnRhc2sgPSB0YXNrO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0YXNrID09PSAnaG9sZFBvc2l0aW9uJykge1xyXG4gICAgICB0aGlzLnRhc2sgPSB0YXNrO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFzc2lnbiB0YXNrIGZvciB1bml0ICcgKyB0aGlzLm5hbWUpO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5lcnJvcignIG5ldyB0YXNrIGZvciB1bml0JywgdGhpcy5uYW1lLCAnaXMnLCB0YXNrKTtcclxuICB9XHJcblxyXG4gIGNsZWFyVGFzaygpIHtcclxuICAgIHRoaXMudGFzayA9ICcnO1xyXG4gIH1cclxuXHJcbiAgc2V0SXNVbml0VW5kZXJQcm90ZWN0aW9uVG9UcnVlKCkge1xyXG4gICAgdGhpcy5pc1VuaXRVbmRlclByb3RlY3Rpb24gPSB0cnVlO1xyXG4gIH1cclxuICBzZXRJc1VuaXRVbmRlclByb3RlY3Rpb25Ub0ZhbHNlKCkge1xyXG4gICAgdGhpcy5pc1VuaXRVbmRlclByb3RlY3Rpb24gPSBmYWxzZTtcclxuICB9XHJcbiAgYXNzaWduVW5pdFRvUHJvdGVjdCh1bml0SWQ6bnVtYmVyKSB7XHJcbiAgICB0aGlzLnVuaXRUb1Byb3RlY3QgPSB1bml0SWQ7XHJcbiAgfVxyXG4gIGNsZWFyVW5pdFRvUHJvdGVjdCgpIHtcclxuICAgIHRoaXMudW5pdFRvUHJvdGVjdCA9IG51bGw7XHJcbiAgfVxyXG4gIHNldElzVW5pdE5lZWRIZWxwVG9UcnVlKCkge1xyXG4gICAgdGhpcy5pc1VuaXROZWVkSGVscCA9IHRydWU7XHJcbiAgfVxyXG4gIHNldElzVW5pdE5lZWRIZWxwVG9GYWxzZSgpIHtcclxuICAgIHRoaXMuaXNVbml0TmVlZEhlbHAgPSBmYWxzZTtcclxuICB9XHJcbiAgYXNzaWduVW5pdFRvSGVscChpZDpudW1iZXIpIHtcclxuICAgIHRoaXMudW5pdFRvSGVscCA9IGlkO1xyXG4gIH1cclxuICBjbGVhclVuaXRUb0hlbHAoKSB7XHJcbiAgICB0aGlzLnVuaXRUb0hlbHAgPSBudWxsO1xyXG4gIH1cclxuICBhc3NpZ25CYXNlTm9kZShub2RlOmFueSkge1xyXG4gICAgaWYobm9kZSkge1xyXG4gICAgICB0aGlzLmJhc2VOb2RlID0gbm9kZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmVtb3ZlQmFzZU5vZGUoKSB7XHJcbiAgICB0aGlzLmJhc2VOb2RlID0ge307XHJcbiAgfVxyXG5cclxuICBzZXRDb21tYW5kTnVtYmVyKGNvbW1hbmROdW1iZXI6IG51bWJlcikge1xyXG4gICAgdGhpcy5jb21tYW5kTnVtYmVyID0gY29tbWFuZE51bWJlcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVuaXQ7XHJcbiIsImV4cG9ydCBsZXQgc2lkZTpzdHJpbmcgPSAncGxheWVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VUb1BsYXllciA9ICgpID0+IHtcclxuICBzaWRlID0gJ3BsYXllcic7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VUb0NvbXB1dGVyID0gKCkgPT4ge1xyXG4gIHNpZGUgPSAnY29tcHV0ZXInO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYWRkVW5pdEludG9BcnJheSxcclxuICBkZWxldGVVbml0RnJvbUFycmF5LFxyXG4gIGRlbGV0ZVVuaXRGcm9tQXJteSxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Ud29Vbml0c0luR3JpZHMsXHJcbiAgZ2V0VW5pdEJ5SWQsXHJcbiAgaXNVbml0SW5BcnJheVxyXG59IGZyb20gJy4vZ2VuZXJhbFV0aWxzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYWRkVW5pdEludG9BcnJheSxcclxuICBkZWxldGVVbml0RnJvbUFycmF5LFxyXG4gIGRlbGV0ZVVuaXRGcm9tQXJteSxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Ud29Vbml0c0luR3JpZHMsXHJcbiAgZ2V0VW5pdEJ5SWQsXHJcbiAgaXNVbml0SW5BcnJheVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZGVsZXRlT2JqZWN0RnJvbUFycmF5LFxyXG4gIGlzT2JqZWN0SW5BcnJheVxyXG59IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuXHJcbmV4cG9ydCBsZXQgdmlzaWJsZUZvclBsYXllclVuaXRzOlVuaXRbXSA9IFtdO1xyXG5leHBvcnQgbGV0IHZpc2libGVGb3JDb21wdXRlclVuaXRzOlVuaXRbXSA9IFtdO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZFVuaXRJbnRvVmlzaWJsZVVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgaWYoIWlzT2JqZWN0SW5BcnJheSh1bml0LCB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cykpIHtcclxuICAgICAgdmlzaWJsZUZvckNvbXB1dGVyVW5pdHMucHVzaCh1bml0KTtcclxuICAgIH1cclxuICB9XHJcbiAgZWxzZSBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ2NvbXB1dGVyJykge1xyXG4gICAgaWYoIWlzT2JqZWN0SW5BcnJheSh1bml0LCB2aXNpYmxlRm9yUGxheWVyVW5pdHMpKSB7XHJcbiAgICAgIHZpc2libGVGb3JQbGF5ZXJVbml0cy5wdXNoKHVuaXQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVVuaXRGcm9tVmlzaWJsZVVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgaWYoaXNPYmplY3RJbkFycmF5KHVuaXQsIHZpc2libGVGb3JDb21wdXRlclVuaXRzKSkge1xyXG4gICAgICB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyA9IGRlbGV0ZU9iamVjdEZyb21BcnJheSh1bml0LCB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2UgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGlmKGlzT2JqZWN0SW5BcnJheSh1bml0LCB2aXNpYmxlRm9yUGxheWVyVW5pdHMpKSB7XHJcbiAgICAgIHZpc2libGVGb3JQbGF5ZXJVbml0cyA9IGRlbGV0ZU9iamVjdEZyb21BcnJheSh1bml0LCB2aXNpYmxlRm9yUGxheWVyVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNyZWF0ZU5vZGVzLFxyXG4gIGNyZWF0ZU9uZU9ic3RhY2xlLFxyXG4gIGNyZWF0ZU9ic3RhY2xlcyxcclxuICBhZGROZWlnaGJvcnNcclxufSBmcm9tICcuLic7XHJcbmltcG9ydCBNYXBOb2RlIGZyb20gJy4uL25vZGVzL01hcE5vZGUnO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWFyY2hNYXAgfSBmcm9tICcuLi9ub2Rlcy9jcmVhdGVOb2Rlcyc7XHJcblxyXG5leHBvcnQgbGV0IGluaXRpYWxNYXA6TWFwTm9kZVtdID0gW107XHJcbmV4cG9ydCBsZXQgc2VhcmNoTWFwOiBhbnkgPSB7fTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVNYXAgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgaW5pdGlhbE1hcCA9IGNyZWF0ZU5vZGVzKCk7XHJcbiAgICByZXNvbHZlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplU2VhcmNoTWFwID0gKG1hcDogTWFwTm9kZVtdKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICBzZWFyY2hNYXAgPSBjcmVhdGVTZWFyY2hNYXAobWFwKTtcclxuICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBsZXQgYWRkT2JzdGFjbGVzVG9NYXAgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgaW5pdGlhbE1hcCA9IGNyZWF0ZU9ic3RhY2xlcygxMjAsIDIyMCwgMTIwLCAxNjAsICdyaXZlcicpO1xyXG4gICAgaW5pdGlhbE1hcCA9IGNyZWF0ZU9ic3RhY2xlcyg2NDAsIDgwMCwgMTYwLCAxNjAsICdyaXZlcicpO1xyXG4gICAgaW5pdGlhbE1hcCA9IGNyZWF0ZU9ic3RhY2xlcyg4ODAsIDExMjAsIDE2MCwgMTYwLCAncml2ZXInKTtcclxuICAgIGluaXRpYWxNYXAgPSBjcmVhdGVPbmVPYnN0YWNsZShpbml0aWFsTWFwLCAzMjAsIDI4MCwgJ21vdW50YWluJyk7XHJcbiAgICBpbml0aWFsTWFwID0gY3JlYXRlT2JzdGFjbGVzKDI0MCwgMzQwLCAzMjAsIDM2MCwgJ21vdW50YWluJyk7XHJcbiAgICBpbml0aWFsTWFwID0gY3JlYXRlT2JzdGFjbGVzKDQ4MCwgNTgwLCA0MDAsIDQ0MCwgJ2ZvcmVzdCcpO1xyXG4gICAgaW5pdGlhbE1hcCA9IGNyZWF0ZU9ic3RhY2xlcyg5NjAsIDEwMDAsIDM2MCwgNDAwLCAnZm9yZXN0Jyk7XHJcbiAgICBpbml0aWFsTWFwID0gY3JlYXRlT2JzdGFjbGVzKDkyMCwgMTAwMCwgNDAwLCA0NDAsICdmb3Jlc3QnKTtcclxuICAgIHJlc29sdmUoKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVNYXAgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcignaW5pdGlhbGl6ZU1hcCcpO1xyXG4gICAgY3JlYXRlTWFwKClcclxuICAgIC50aGVuKCgpID0+IGFkZE9ic3RhY2xlc1RvTWFwKCkpXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIGFkZE5laWdoYm9ycyhpbml0aWFsTWFwKS50aGVuKCgpID0+IGluaXRpYWxpemVTZWFyY2hNYXAoaW5pdGlhbE1hcCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIG9uQ2hvb3NlVW5pdCxcclxuICBjaG9vc2VVbml0VHlwZVxyXG59IGZyb20gJy4vY2hvb3NlJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVVbml0XHJcbn0gZnJvbSAnLi9jcmVhdGUnO1xyXG5pbXBvcnQge1xyXG4gIGRyYXdVbml0LFxyXG4gIHJlZHJhd1VuaXRzXHJcbn0gZnJvbSAnLi9kcmF3JztcclxuaW1wb3J0IHtcclxuICBhcm1vdXJQZW5ldHJhdGlvbixcclxuICBjaGVja0F0dGFja1NpZGUsXHJcbiAgY2hhcmdlLFxyXG4gIGNhbGN1bGF0ZUNoYXJnZSxcclxuICBjYWxjdWxhdGVEYW1hZ2UsXHJcbiAgY2FsY3VsYXRlRGFtYWdlQmFzZU9uRW5lbXlQb3NpdGlvbixcclxuICBjYWxjdWxhdGVEYW1hZ2VXaGVuSXRzTGVzc1RoYW5PbmUsXHJcbiAgcmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0LFxyXG4gIGZpbmRVbml0SW5GaWdodEFnYWluc3QsXHJcbiAgaXNVbml0RmlnaHRpbmcsXHJcbiAgY2hlY2tIZWFsdGgsXHJcbiAgbWVsZWVBdHRhY2ssXHJcbiAgbWVsZWVDb21iYXQsXHJcbiAgcmVmcmVzaG1lbnRcclxufSBmcm9tICcuL2ZpZ2h0aW5nJztcclxuaW1wb3J0IHtcclxuICB1cGRhdGVVbml0LFxyXG4gIHB1cnN1ZVVuaXRcclxufSBmcm9tICcuL21vdmVtZW50JztcclxuaW1wb3J0IHtcclxuICBzcG90RW5lbXksXHJcbiAgaXNVbml0U3BvdHRlZEJ5RW5lbXksXHJcbiAgc3BvdFVuaXRzXHJcbn0gZnJvbSAnLi9zcG90dGluZyc7XHJcbmltcG9ydCB7XHJcbiAgQXJjaGVycyxcclxuICBIZWF2eUluZmFudHJ5LFxyXG4gIEhlYXZ5Q2F2YWxyeSxcclxuICBIb3BsaXRlcyxcclxuICBMaWdodEluZmFudHJ5LFxyXG4gIExpZ2h0Q2F2YWxyeSxcclxuICBNaWxpdGlhLFxyXG4gIFBlbHRhc3RzLFxyXG4gIFBpa2VtZW4sXHJcbiAgU2NvdXRzLFxyXG4gIFVuaXRcclxufSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgb25DaG9vc2VVbml0LFxyXG4gIGNob29zZVVuaXRUeXBlLFxyXG4gIGNyZWF0ZVVuaXQsXHJcbiAgZHJhd1VuaXQsXHJcbiAgcmVkcmF3VW5pdHMsXHJcbiAgYXJtb3VyUGVuZXRyYXRpb24sXHJcbiAgY2hlY2tBdHRhY2tTaWRlLFxyXG4gIGNoYXJnZSxcclxuICBjYWxjdWxhdGVDaGFyZ2UsXHJcbiAgY2FsY3VsYXRlRGFtYWdlLFxyXG4gIGNhbGN1bGF0ZURhbWFnZUJhc2VPbkVuZW15UG9zaXRpb24sXHJcbiAgY2FsY3VsYXRlRGFtYWdlV2hlbkl0c0xlc3NUaGFuT25lLFxyXG4gIHJlbW92ZVVuaXRGcm9tRW5lbWllc0ZpZ2h0QWdhaW5zdCxcclxuICBmaW5kVW5pdEluRmlnaHRBZ2FpbnN0LFxyXG4gIGlzVW5pdEZpZ2h0aW5nLFxyXG4gIGNoZWNrSGVhbHRoLFxyXG4gIG1lbGVlQXR0YWNrLFxyXG4gIG1lbGVlQ29tYmF0LFxyXG4gIHJlZnJlc2htZW50LFxyXG4gIHVwZGF0ZVVuaXQsXHJcbiAgcHVyc3VlVW5pdCxcclxuICBzcG90RW5lbXksXHJcbiAgaXNVbml0U3BvdHRlZEJ5RW5lbXksXHJcbiAgc3BvdFVuaXRzLFxyXG4gIEFyY2hlcnMsXHJcbiAgSGVhdnlJbmZhbnRyeSxcclxuICBIZWF2eUNhdmFscnksXHJcbiAgSG9wbGl0ZXMsXHJcbiAgTGlnaHRJbmZhbnRyeSxcclxuICBMaWdodENhdmFscnksXHJcbiAgTWlsaXRpYSxcclxuICBQZWx0YXN0cyxcclxuICBQaWtlbWVuLFxyXG4gIFNjb3V0cyxcclxuICBVbml0XHJcbn1cclxuIiwiaW1wb3J0IHthdXhpbGlhcnlDYW52YXN9IGZyb20gJy4vYXV4aWxpYXJ5JztcclxuaW1wb3J0IHtiYWNrZ3JvdW5kQ2FudmFzfSBmcm9tICcuL2JhY2tncm91bmQnO1xyXG5pbXBvcnQge2NhbnZhc30gZnJvbSAnLi9jYW52YXMnO1xyXG5pbXBvcnQge3RlcnJhaW59IGZyb20gJy4vdGVycmFpbic7XHJcbmltcG9ydCB7ZHJhZ0FuZERyb3BDYW52YXN9IGZyb20gJy4vZHJhZ0FuZERyb3AnO1xyXG5pbXBvcnQge21haW5NZW51fSBmcm9tICcuL21haW5NZW51JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYXV4aWxpYXJ5Q2FudmFzLFxyXG4gIGJhY2tncm91bmRDYW52YXMsXHJcbiAgY2FudmFzLFxyXG4gIGRyYWdBbmREcm9wQ2FudmFzLFxyXG4gIG1haW5NZW51LFxyXG4gIHRlcnJhaW5cclxufVxyXG4iLCJjbGFzcyBQb3dlciB7XHJcbiAgcXVhbnRpdHkgPSAwO1xyXG4gIHRvdGFsSGVhbHRoID0gMDtcclxuICB0b3RhbFNwZWVkID0gMDtcclxuICB0b3RhbEFybW91ciA9IDA7XHJcbiAgdG90YWxNZWxlZURhbWFnZSA9IDA7XHJcbiAgdG90YWxNaXNzaWxlRGFtYWdlID0gMDtcclxuICB0b3RhbERpc2NpcGxpbmUgPSAwO1xyXG4gIHRvdGFsTW9yYWxlID0gMDtcclxuICB0b3RhbENvbmRpdGlvbiA9IDA7XHJcblxyXG4gIGluY3JlbWVudFF1YW50aXR5KCkge1xyXG4gICAgdGhpcy5xdWFudGl0eSArPSAxO1xyXG4gIH1cclxuXHJcbiAgZGVjcmVtZW50UXVhbnRpdHkoKSB7XHJcbiAgICB0aGlzLnF1YW50aXR5IC09IDE7XHJcbiAgfVxyXG5cclxuICBhZGRIZWFsdGgoaGVhbHRoOm51bWJlcikge1xyXG4gICAgdGhpcy50b3RhbEhlYWx0aCArPSBoZWFsdGg7XHJcbiAgfVxyXG5cclxuICBhZGRTcGVlZChzcGVlZDpudW1iZXIpIHtcclxuICAgIHRoaXMudG90YWxTcGVlZCArPSBzcGVlZDtcclxuICB9XHJcblxyXG4gIGFkZEFybW91cihhcm1vdXI6bnVtYmVyKSB7XHJcbiAgICB0aGlzLnRvdGFsQXJtb3VyICs9IGFybW91cjtcclxuICB9XHJcblxyXG4gIGFkZE1lbGVlRGFtYWdlKG1lbGVlRGFtYWdlOm51bWJlcikge1xyXG4gICAgdGhpcy50b3RhbE1lbGVlRGFtYWdlICs9IG1lbGVlRGFtYWdlO1xyXG4gIH1cclxuXHJcbiAgYWRkTWlzc2lsZURhbWFnZShtaXNzaWxlRGFtYWdlOm51bWJlcikge1xyXG4gICAgdGhpcy50b3RhbE1pc3NpbGVEYW1hZ2UgKz0gbWlzc2lsZURhbWFnZTtcclxuICB9XHJcblxyXG4gIGFkZERpc2NpcGxpbmUoZGlzY2lwbGluZTpudW1iZXIpIHtcclxuICAgIHRoaXMudG90YWxEaXNjaXBsaW5lICs9IGRpc2NpcGxpbmU7XHJcbiAgfVxyXG5cclxuICBhZGRNb3JhbGUobW9yYWxlOm51bWJlcikge1xyXG4gICAgdGhpcy50b3RhbE1vcmFsZSArPSBtb3JhbGU7XHJcbiAgfVxyXG5cclxuICBhZGRDb25kaXRpb24oY29uZGl0aW9uOm51bWJlcikge1xyXG4gICAgdGhpcy50b3RhbENvbmRpdGlvbiArPSBjb25kaXRpb247XHJcbiAgfVxyXG5cclxuICByZXNldEFsbFByb3BlcnRpZXMoKSB7XHJcbiAgICB0aGlzLnF1YW50aXR5ID0gMDtcclxuICAgIHRoaXMudG90YWxIZWFsdGggPSAwO1xyXG4gICAgdGhpcy50b3RhbFNwZWVkID0gMDtcclxuICAgIHRoaXMudG90YWxBcm1vdXIgPSAwO1xyXG4gICAgdGhpcy50b3RhbE1lbGVlRGFtYWdlID0gMDtcclxuICAgIHRoaXMudG90YWxNaXNzaWxlRGFtYWdlID0gMDtcclxuICAgIHRoaXMudG90YWxEaXNjaXBsaW5lID0gMDtcclxuICAgIHRoaXMudG90YWxNb3JhbGUgPSAwO1xyXG4gICAgdGhpcy50b3RhbENvbmRpdGlvbiA9IDA7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG93ZXI7XHJcbiIsImltcG9ydCB7c2lkZX0gZnJvbSAnLi4vLi4vY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUnO1xyXG5pbXBvcnQge1xyXG4gIHVuaXRSb3N0ZXJXaWR0aCxcclxuICB0aXRsZUhlaWdodFxyXG59IGZyb20gJy4uLy4uL2NvbmZpZy9tYWluTWVudSc7XHJcbmltcG9ydCB7XHJcbiAgYXJteUltZ0hlaWdodCxcclxuICBhcm15SW1nV2lkdGhcclxufSBmcm9tICcuLi8uLi9VSS9tYWluTWVudS9sYXlvdXRzL2FybXlMYXlvdXQnO1xyXG5pbXBvcnQge1xyXG4gIGlzVW5pdEluQXJyYXksXHJcbiAgZGVsZXRlVW5pdEZyb21Bcm15XHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGxldCBjb21wdXRlckFybXk6YW55W10gPSBbXTtcclxuZXhwb3J0IGxldCBjb21wdXRlckFybXlQb3NpdGlvblg6bnVtYmVyID0gdW5pdFJvc3RlcldpZHRoICsgMjA7XHJcbmV4cG9ydCBsZXQgY29tcHV0ZXJBcm15UG9zaXRpb25ZOm51bWJlciA9IHRpdGxlSGVpZ2h0ICsgNjA7XHJcbmV4cG9ydCBsZXQgcGxheWVyQXJteTphbnlbXSA9IFtdO1xyXG5leHBvcnQgbGV0IHBsYXllckFybXlQb3NpdGlvblg6bnVtYmVyID0gdW5pdFJvc3RlcldpZHRoICsgMjA7XHJcbmV4cG9ydCBsZXQgcGxheWVyQXJteVBvc2l0aW9uWTpudW1iZXIgPSB0aXRsZUhlaWdodCArIDYwO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZFVuaXRUb0FybXkgPSAodW5pdDphbnkpID0+IHtcclxuICBsZXQgdXBkYXRlZFVuaXQgPSBPYmplY3QuYXNzaWduKHt9LCB1bml0KTtcclxuICBsZXQgYXJteTphbnlbXTtcclxuICBpZihzaWRlID09PSAncGxheWVyJykge1xyXG4gICAgYXJteSA9IHBsYXllckFybXk7XHJcbiAgICB1cGRhdGVkVW5pdC5hcm15UG9zaXRpb24gPSB7IC8vIGFzc2lnbiBhcm15UG9zaXRpb25cclxuICAgICAgeDogcGxheWVyQXJteVBvc2l0aW9uWCxcclxuICAgICAgeTogcGxheWVyQXJteVBvc2l0aW9uWSxcclxuICAgIH07XHJcblxyXG4gIH0gZWxzZSB7XHJcbiAgICBhcm15ID0gY29tcHV0ZXJBcm15O1xyXG4gICAgdXBkYXRlZFVuaXQuYXJteVBvc2l0aW9uID0geyAvLyBhc3NpZ24gYXJteVBvc2l0aW9uXHJcbiAgICAgIHg6IGNvbXB1dGVyQXJteVBvc2l0aW9uWCxcclxuICAgICAgeTogY29tcHV0ZXJBcm15UG9zaXRpb25ZXHJcbiAgICB9O1xyXG4gIH1cclxuICBpZih1bml0KSB7XHJcbiAgICAgIGFybXkucHVzaCh1cGRhdGVkVW5pdCk7XHJcbiAgfVxyXG4gIGlmKHNpZGUgPT09ICdwbGF5ZXInKSB7XHJcbiAgICBjaGFuZ2VQbGF5ZXJBcm15UG9zaXRpb24oKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY2hhbmdlQ29tcHV0ZXJBcm15UG9zaXRpb24oKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVVbml0RnJvbUFybXkgPSAodW5pdDphbnkpID0+IHtcclxuICBsZXQgYXJteTphbnlbXTtcclxuICBpZihzaWRlID09PSAncGxheWVyJykge1xyXG4gICAgYXJteSA9IHBsYXllckFybXk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGFybXkgPSBjb21wdXRlckFybXk7XHJcbiAgfVxyXG4gIGlmKHVuaXQgJiYgaXNVbml0SW5BcnJheSh1bml0LCBhcm15KSkge1xyXG4gICAgaWYoc2lkZSA9PT0gJ3BsYXllcicpIHtcclxuICAgICAgcGxheWVyQXJteSA9IGRlbGV0ZVVuaXRGcm9tQXJteSh1bml0LCBwbGF5ZXJBcm15KTtcclxuICAgICAgcmVhcnJhbmdlUGxheWVyQXJteVBvc2l0aW9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb21wdXRlckFybXkgPSBkZWxldGVVbml0RnJvbUFybXkodW5pdCwgY29tcHV0ZXJBcm15KTtcclxuICAgICAgcmVhcnJhbmdlQ29tcHV0ZXJBcm15UG9zaXRpb24oKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VQbGF5ZXJBcm15UG9zaXRpb24gPSAoKSA9PiB7XHJcbiAgbGV0IGkgPSBwbGF5ZXJBcm15Lmxlbmd0aDtcclxuICBsZXQgbWFyZ2luV2lkdGggPSBhcm15SW1nV2lkdGggKyAxMDtcclxuICBsZXQgbWFyZ2luSGVpZ2h0ID0gYXJteUltZ0hlaWdodCArIDE1O1xyXG4gIGxldCBkZWZhdWx0V2lkdGggPSB1bml0Um9zdGVyV2lkdGggKyAyMDtcclxuICBpZihpICUgNSA9PT0gMCkge1xyXG4gICAgcGxheWVyQXJteVBvc2l0aW9uWCA9IGRlZmF1bHRXaWR0aDtcclxuICAgIHBsYXllckFybXlQb3NpdGlvblkgKz0gbWFyZ2luSGVpZ2h0O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwbGF5ZXJBcm15UG9zaXRpb25YICs9IG1hcmdpbldpZHRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNoYW5nZUNvbXB1dGVyQXJteVBvc2l0aW9uID0gKCkgPT4ge1xyXG4gIGxldCBpID0gY29tcHV0ZXJBcm15Lmxlbmd0aDtcclxuICBsZXQgbWFyZ2luV2lkdGggPSBhcm15SW1nV2lkdGggKyAxMDtcclxuICBsZXQgbWFyZ2luSGVpZ2h0ID0gYXJteUltZ0hlaWdodCArIDE1O1xyXG4gIGxldCBkZWZhdWx0V2lkdGggPSB1bml0Um9zdGVyV2lkdGggKyAyMDtcclxuICBpZihpICUgNSA9PT0gMCkge1xyXG4gICAgY29tcHV0ZXJBcm15UG9zaXRpb25YID0gZGVmYXVsdFdpZHRoO1xyXG4gICAgY29tcHV0ZXJBcm15UG9zaXRpb25ZICs9IG1hcmdpbkhlaWdodDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29tcHV0ZXJBcm15UG9zaXRpb25YICs9IG1hcmdpbldpZHRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlYXJyYW5nZVBsYXllckFybXlQb3NpdGlvbiA9ICgpID0+IHtcclxuICBsZXQgbWFyZ2luV2lkdGggPSBhcm15SW1nV2lkdGggKyAxMDtcclxuICBsZXQgbWFyZ2luSGVpZ2h0ID0gYXJteUltZ0hlaWdodCArIDE1O1xyXG4gIGxldCBkZWZhdWx0V2lkdGggPSB1bml0Um9zdGVyV2lkdGggKyAyMDtcclxuICBsZXQgeDpudW1iZXI9IHVuaXRSb3N0ZXJXaWR0aCArIDIwO1xyXG4gIGxldCB5Om51bWJlcj0gdGl0bGVIZWlnaHQgKyA2MDtcclxuICBsZXQgaSA9IDE7XHJcbiAgZm9yKGxldCB1bml0IG9mIHBsYXllckFybXkpIHtcclxuICAgIHVuaXQuYXJteVBvc2l0aW9uID0geyAvLyBhc3NpZ24gYXJteVBvc2l0aW9uXHJcbiAgICAgIHgsXHJcbiAgICAgIHlcclxuICAgIH07XHJcbiAgICBpZihpICUgNSA9PT0gMCkge1xyXG4gICAgICB4ID0gZGVmYXVsdFdpZHRoO1xyXG4gICAgICB5ICs9IG1hcmdpbkhlaWdodDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHggKz0gbWFyZ2luV2lkdGg7XHJcbiAgICB9XHJcbiAgICBpKys7XHJcbiAgfVxyXG4gIGlmKHBsYXllckFybXkubGVuZ3RoICE9PSAwKSB7XHJcbiAgICBsZXQgcHJldlggPSBwbGF5ZXJBcm15W3BsYXllckFybXkubGVuZ3RoIC0gMV0uYXJteVBvc2l0aW9uLng7IC8vIHggYW5kIHkgbGFzdCB1bml0J3NcclxuICAgIGxldCBwcmV2WSA9IHBsYXllckFybXlbcGxheWVyQXJteS5sZW5ndGggLSAxXS5hcm15UG9zaXRpb24ueTsgLy8gYXJteSBwb3NpdGlvbiB4IGFuZFxyXG4gICAgaWYoaSAlIDUgPT09IDApIHtcclxuICAgICAgcGxheWVyQXJteVBvc2l0aW9uWCA9IGRlZmF1bHRXaWR0aDtcclxuICAgICAgcGxheWVyQXJteVBvc2l0aW9uWSA9IHByZXZZICsgbWFyZ2luSGVpZ2h0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcGxheWVyQXJteVBvc2l0aW9uWCA9IHByZXZYICsgbWFyZ2luV2lkdGg7XHJcbiAgICAgIHBsYXllckFybXlQb3NpdGlvblkgPSBwcmV2WTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcGxheWVyQXJteVBvc2l0aW9uWCA9IHVuaXRSb3N0ZXJXaWR0aCArIDIwO1xyXG4gICAgcGxheWVyQXJteVBvc2l0aW9uWSA9IHRpdGxlSGVpZ2h0ICsgNjA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVhcnJhbmdlQ29tcHV0ZXJBcm15UG9zaXRpb24gPSAoKSA9PiB7XHJcbiAgbGV0IG1hcmdpbldpZHRoID0gYXJteUltZ1dpZHRoICsgMTA7XHJcbiAgbGV0IG1hcmdpbkhlaWdodCA9IGFybXlJbWdIZWlnaHQgKyAxNTtcclxuICBsZXQgZGVmYXVsdFdpZHRoID0gdW5pdFJvc3RlcldpZHRoICsgMjA7XHJcbiAgbGV0IHg6bnVtYmVyPSB1bml0Um9zdGVyV2lkdGggKyAyMDtcclxuICBsZXQgeTpudW1iZXI9IHRpdGxlSGVpZ2h0ICsgNjA7XHJcbiAgbGV0IGkgPSAxO1xyXG4gIGZvcihsZXQgdW5pdCBvZiBjb21wdXRlckFybXkpIHtcclxuICAgIHVuaXQuYXJteVBvc2l0aW9uID0geyAvLyBhc3NpZ24gYXJteVBvc2l0aW9uXHJcbiAgICAgIHgsXHJcbiAgICAgIHlcclxuICAgIH07XHJcbiAgICBpZihpICUgNSA9PT0gMCkge1xyXG4gICAgICB5ICs9IG1hcmdpbkhlaWdodDtcclxuICAgICAgeCA9IGRlZmF1bHRXaWR0aDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHggKz0gbWFyZ2luV2lkdGg7XHJcbiAgICB9XHJcbiAgICBpKys7XHJcbiAgfVxyXG4gIGlmKGNvbXB1dGVyQXJteS5sZW5ndGggIT09IDApIHtcclxuICAgIGxldCBwcmV2WCA9IGNvbXB1dGVyQXJteVtjb21wdXRlckFybXkubGVuZ3RoIC0gMV0uYXJteVBvc2l0aW9uLng7IC8vIHggYW5kIHkgbGFzdCB1bml0J3NcclxuICAgIGxldCBwcmV2WSA9IGNvbXB1dGVyQXJteVtjb21wdXRlckFybXkubGVuZ3RoIC0gMV0uYXJteVBvc2l0aW9uLnk7IC8vIGFybXkgcG9zaXRpb24geCBhbmRcclxuICAgIGlmKGkgJSA1ID09PSAwKSB7XHJcbiAgICAgIGNvbXB1dGVyQXJteVBvc2l0aW9uWCA9IGRlZmF1bHRXaWR0aDtcclxuICAgICAgY29tcHV0ZXJBcm15UG9zaXRpb25ZID0gcHJldlkgKyBtYXJnaW5IZWlnaHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb21wdXRlckFybXlQb3NpdGlvblggPSBwcmV2WCArIG1hcmdpbldpZHRoO1xyXG4gICAgICBjb21wdXRlckFybXlQb3NpdGlvblkgPSBwcmV2WTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29tcHV0ZXJBcm15UG9zaXRpb25YID0gdW5pdFJvc3RlcldpZHRoICsgMjA7O1xyXG4gICAgY29tcHV0ZXJBcm15UG9zaXRpb25ZID0gdGl0bGVIZWlnaHQgKyA2MDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBnb2xkQm94U3RhcnRYLFxyXG4gIGdvbGRCb3hTdGFydFksXHJcbiAgc3RhcnRUb3RhbE1vbmV5VGl0bGVYLFxyXG4gIHN0YXJ0VG90YWxNb25leVRpdGxlWSxcclxuICBib3hXaWR0aCxcclxuICBib3hIZWlnaHQsXHJcbiAgZ29sZE9wdGlvbnMsXHJcbiAgdW5pdEluZm9UaXRsZVgsXHJcbiAgdW5pdEluZm9UaXRsZVksXHJcbiAgcHJvcGVydHlTdGFydFgsXHJcbiAgcHJvcGVydHlTdGFydFksXHJcbiAgdmFsdWVTdGFydFgsXHJcbiAgdmFsdWVTdGFydFlcclxufSBmcm9tICcuL2luZm9TZXR0aW5ncyc7XHJcbmltcG9ydCB7XHJcbiAgd2lkdGgsXHJcbiAgaGVpZ2h0LFxyXG4gIGJhdHRsZVNldHRpbmdzWCxcclxuICBiYXR0bGVTZXR0aW5nc1ksXHJcbiAgdW5pdEluZm9YLFxyXG4gIHVuaXRJbmZvWVxyXG59IGZyb20gJy4vYmF0dGxlU2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IHtcclxuICBnb2xkQm94U3RhcnRYLFxyXG4gIGdvbGRCb3hTdGFydFksXHJcbiAgc3RhcnRUb3RhbE1vbmV5VGl0bGVYLFxyXG4gIHN0YXJ0VG90YWxNb25leVRpdGxlWSxcclxuICBib3hXaWR0aCxcclxuICBib3hIZWlnaHQsXHJcbiAgZ29sZE9wdGlvbnMsXHJcbiAgdW5pdEluZm9UaXRsZVgsXHJcbiAgdW5pdEluZm9UaXRsZVksXHJcbiAgcHJvcGVydHlTdGFydFgsXHJcbiAgcHJvcGVydHlTdGFydFksXHJcbiAgdmFsdWVTdGFydFgsXHJcbiAgdmFsdWVTdGFydFksXHJcbiAgLy8gYmF0dGxlU2V0dGluZ3NcclxuICB3aWR0aCxcclxuICBoZWlnaHQsXHJcbiAgYmF0dGxlU2V0dGluZ3NYLFxyXG4gIGJhdHRsZVNldHRpbmdzWSxcclxuICB1bml0SW5mb1gsXHJcbiAgdW5pdEluZm9ZXHJcbn1cclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuXHJcbmV4cG9ydCBsZXQgY3VycmVudGx5Q2hvc2VuVW5pdDpVbml0ID0gbnVsbDtcclxuXHJcbmV4cG9ydCBjb25zdCBhc3NpZ25DdXJyZW50bHlDaG9zZW5Vbml0ID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQgJiYgdW5pdC5jb250cm9sQnkgPT09IFwicGxheWVyXCIpIHtcclxuICAgICAgY3VycmVudGx5Q2hvc2VuVW5pdCA9IHVuaXQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIGN1cnJlbnRseUNob3NlblVuaXQgPSBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVTklUX0lDT05fV0lEVEgsIFVOSVRfSUNPTl9IRUlHSFQsIFVOSVRfTEVGVF9QQU5FTF9XSURUSCwgVU5JVF9QQU5FTF9IRUlHSFQgfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgY3R4IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0XCI7XHJcbmltcG9ydCB7IG1vdmVtZW50SWNvbiwgZmlnaHRJY29uLCBmaWdodEljb25TcmMsIGFycm93SWNvbiwgYXR0cmlidXRlc0hlaWdodCwgaGVhbHRoUG9pbnRzSGVpZ2h0LCBpY29uSGVpZ2h0IH0gZnJvbSBcIi4vaWNvblNldHRpbmdzXCI7XHJcbmltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdW5pdFwiO1xyXG5pbXBvcnQgeyBnZXRVbml0UG9zaXRpb25JbkFycmF5IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3VuaXQvZ2VuZXJhbC9nZW5lcmFsVXRpbHNcIjtcclxuaW1wb3J0IHsgcGxheWVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0c1wiO1xyXG5pbXBvcnQgeyBDQU5WQVNfSEVJR0hUIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBtb3ZlbWVudEljb25JbWFnZSwgZmlnaHRJY29uSW1hZ2UsIHVuaXRJY29uSW1hZ2VzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N0b3JlL2ltYWdlcy91bml0SWNvbkltYWdlc1wiO1xyXG5pbXBvcnQgeyBjdXJyZW50bHlDaG9zZW5Vbml0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N0b3JlL3VuaXQvY3VycmVudGx5Q2hvc2VuVW5pdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdVbml0SWNvbiA9ICh1bml0OiBVbml0LCBoYWxmOiBib29sZWFuID0gZmFsc2UpID0+IHtcclxuICAgIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgICAgIGxldCB1bml0SW5kZXggPSBnZXRVbml0UG9zaXRpb25JbkFycmF5KHVuaXQuaWQsIHBsYXllclVuaXRzKSArIDE7XHJcbiAgICAgICAgbGV0IHN0YXJ0WCA9IFVOSVRfTEVGVF9QQU5FTF9XSURUSDtcclxuICAgICAgICBsZXQgeCA9IHN0YXJ0WCArIChVTklUX0lDT05fV0lEVEggKiB1bml0SW5kZXgpO1xyXG4gICAgICAgIGxldCB5ID0gQ0FOVkFTX0hFSUdIVCAtIFVOSVRfUEFORUxfSEVJR0hUO1xyXG4gICAgICAgIGN0eC5jbGVhclJlY3QoeCwgeSwgVU5JVF9JQ09OX1dJRFRILCBVTklUX0lDT05fSEVJR0hUKTtcclxuICAgICAgICBsZXQgayA9IChoYWxmKSA/IDAuNSA6IDE7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFggPSB4O1xyXG4gICAgICAgIGxldCBpY29uV2lkdGggPSBVTklUX0lDT05fV0lEVEggKiBrO1xyXG4gICAgICAgIGN0eC5zdHJva2VSZWN0KHgsIHksIGljb25XaWR0aCwgVU5JVF9JQ09OX0hFSUdIVCk7XHJcbiAgICAgICAgZHJhd01vdmVtZW50SWNvbih4LCB5LCB1bml0LCBoYWxmKTtcclxuICAgICAgICB4ICs9IG1vdmVtZW50SWNvbi53aWR0aCAqIGs7XHJcbiAgICAgICAgZHJhd0ZpZ2h0SWNvbih4LCB5LCB1bml0LCBoYWxmKTtcclxuICAgICAgICB4ICs9IGZpZ2h0SWNvbi53aWR0aCAqIGs7XHJcbiAgICAgICAgZHJhd0Fycm93SWNvbih4LCB5LCBoYWxmKTtcclxuICAgICAgICB4ID0gaW5pdGlhbFg7XHJcbiAgICAgICAgeSArPSBhdHRyaWJ1dGVzSGVpZ2h0O1xyXG4gICAgICAgIGZpbGxIZWFsdGhQb2ludHMoeCwgeSwgdW5pdCwgaGFsZik7XHJcbiAgICAgICAgeSArPSBoZWFsdGhQb2ludHNIZWlnaHQ7XHJcbiAgICAgICAgZHJhd0ljb24oeCwgeSwgdW5pdCwgaGFsZik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkcmF3TW92ZW1lbnRJY29uID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCB1bml0OiBVbml0LCBoYWxmOiBib29sZWFuID0gZmFsc2UpID0+IHtcclxuICAgIGlmKHVuaXQuaXNNb3ZpbmcpIHtcclxuICAgICAgICBsZXQgayA9IChoYWxmKSA/IDAuNSA6IDE7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShtb3ZlbWVudEljb25JbWFnZSwgeCwgeSwgIG1vdmVtZW50SWNvbi53aWR0aCAqIGssIG1vdmVtZW50SWNvbi5oZWlnaHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZHJhd0ZpZ2h0SWNvbiA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgdW5pdDogVW5pdCwgaGFsZjogYm9vbGVhbiA9IGZhbHNlKSA9PiB7XHJcbiAgICBpZih1bml0LmlzRmlnaHRpbmcpIHtcclxuICAgICAgICBsZXQgayA9IChoYWxmKSA/IDAuNSA6IDE7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShmaWdodEljb25JbWFnZSwgeCwgeSwgIGZpZ2h0SWNvbi53aWR0aCAqIGssIGZpZ2h0SWNvbi5oZWlnaHQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZHJhd0Fycm93SWNvbiA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgaGFsZjogYm9vbGVhbiA9IGZhbHNlKSA9PiB7XHJcbiAgIC8vIHRvZG8gYWRkIGFycm93IGljb25cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZpbGxIZWFsdGhQb2ludHMgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHVuaXQ6IFVuaXQsIGhhbGY6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgbGV0IGsgPSAoaGFsZikgPyAwLjUgOiAxO1xyXG4gICAgbGV0IHdpZHRoID0gVU5JVF9JQ09OX1dJRFRIICogaztcclxuICAgIGxldCBpbml0aWFsSGVhbHRoID0gdW5pdC5pbml0aWFsSGVhbHRoO1xyXG4gICAgbGV0IGhlYWx0aFBlcmNlbnRhZ2UgPSBNYXRoLnJvdW5kKCh1bml0LmhlYWx0aCAvIGluaXRpYWxIZWFsdGgpICogMTAwKSAqIDAuMDE7XHJcbiAgICBsZXQgaGVhbHRoUG9pbnRzV2lkdGggPSB3aWR0aCAqIGhlYWx0aFBlcmNlbnRhZ2U7XHJcbiAgICBpZihoZWFsdGhQZXJjZW50YWdlID49IDAuNykgY3R4LmZpbGxTdHlsZSA9IFwiZ3JlZW5cIjtcclxuICAgIGVsc2UgaWYoaGVhbHRoUGVyY2VudGFnZSA+PSAwLjQgJiYgaGVhbHRoUGVyY2VudGFnZSA8IDAuNykgY3R4LmZpbGxTdHlsZSA9IFwieWVsbG93XCI7XHJcbiAgICBlbHNlIGlmKGhlYWx0aFBlcmNlbnRhZ2UgPiAwICYmIGhlYWx0aFBlcmNlbnRhZ2UgPCAwLjQpIGN0eC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgaWYoaGVhbHRoUG9pbnRzV2lkdGggPCAwKSBoZWFsdGhQb2ludHNXaWR0aCA9IDA7XHJcbiAgICBjdHguZmlsbFJlY3QoeCwgeSwgaGVhbHRoUG9pbnRzV2lkdGgsIGhlYWx0aFBvaW50c0hlaWdodCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkcmF3SWNvbiA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgdW5pdDogVW5pdCwgaGFsZjogYm9vbGVhbiA9IGZhbHNlKSA9PiB7XHJcbiAgICBjdHguc2F2ZSgpO1xyXG4gICAgaWYoIWN1cnJlbnRseUNob3NlblVuaXQgfHwgKGN1cnJlbnRseUNob3NlblVuaXQgJiYgY3VycmVudGx5Q2hvc2VuVW5pdC5pZCAhPT0gdW5pdC5pZCkpIHtcclxuICAgICAgICBjdHguZmlsdGVyID0gJ2JyaWdodG5lc3MoMC44KSc7XHJcbiAgICB9XHJcbiAgICBsZXQgayA9IChoYWxmKSA/IDAuNSA6IDE7XHJcbiAgICBjdHguZHJhd0ltYWdlKHVuaXRJY29uSW1hZ2VzW3VuaXQubmFtZV0sIHgsIHksIFVOSVRfSUNPTl9XSURUSCAqIGssIGljb25IZWlnaHQpO1xyXG4gICAgY3R4LnJlc3RvcmUoKTtcclxufSIsImltcG9ydCB7XHJcbiAgICBNQVBfV0lEVEgsXHJcbiAgICBDQU5WQVNfSEVJR0hUXHJcbiAgfSBmcm9tICcuLic7XHJcbiAgXHJcbiAgZXhwb3J0IGNvbnN0IGxvYWRpbmdDYW52YXM6YW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmdDYW52YXMnKTtcclxuICBcclxuICBpZihsb2FkaW5nQ2FudmFzKSB7XHJcbiAgICBsb2FkaW5nQ2FudmFzLndpZHRoID0gTUFQX1dJRFRIO1xyXG4gICAgbG9hZGluZ0NhbnZhcy5oZWlnaHQgPSBDQU5WQVNfSEVJR0hUO1xyXG4gIH0iLCJpbXBvcnQgeyBncmlkU2l6ZSwgTUFQX1dJRFRILCBNQVBfSEVJR0hUIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgaW5pdGlhbE1hcCwgc2VhcmNoTWFwIH0gZnJvbSAnLi4vLi4vLi4vbWFwL2NyZWF0ZU1hcC9pbml0aWFsTWFwJztcclxuaW1wb3J0IE1hcE5vZGUgZnJvbSAnLi4vLi4vLi4vbWFwL25vZGVzL01hcE5vZGUnO1xyXG5pbXBvcnQgeyBjb29yZGluYXRlWUJpbmFyeVNlYXJjaCwgZmluZFhJblNlYXJjaE1hcCB9IGZyb20gJy4uLy4uL3NlYXJjaC9iaW5hcnlTZWFyY2gnO1xyXG5cclxuLy8gZXhwb3J0IGxldCBnZXROb2RlRnJvbU1hcCA9ICh4Om51bWJlciwgeTpudW1iZXIsIG1hcD1pbml0aWFsTWFwKTogTWFwTm9kZSA9PiB7XHJcbi8vICAgbGV0IG5vZGU6IE1hcE5vZGU7XHJcbi8vICAgZm9yKGxldCBncmlkIG9mIG1hcCkge1xyXG4vLyAgICAgbGV0IGJvdHRvbVJpZ2h0WCA9IGdyaWQueCArIGdyaWRTaXplO1xyXG4vLyAgICAgbGV0IGJvdHRvbVJpZ2h0WSA9IGdyaWQueSArIGdyaWRTaXplO1xyXG4vLyAgICAgaWYoeCA+PSBncmlkLnggJiYgeCA8IGJvdHRvbVJpZ2h0WCAmJiB5ID49IGdyaWQueSAmJiB5IDwgYm90dG9tUmlnaHRZKSB7XHJcbi8vICAgICAgIG5vZGUgPSBncmlkO1xyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gICByZXR1cm4gbm9kZTtcclxuLy8gfVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldE5vZGVGcm9tTWFwID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCBtYXA9c2VhcmNoTWFwKTogYW55ID0+IHtcclxuICBsZXQgbm9kZTogTWFwTm9kZTtcclxuICBsZXQgbm9kZXNJblg6IG51bWJlciA9IE1BUF9XSURUSCAvIGdyaWRTaXplO1xyXG4gIGxldCBub2Rlc0luWTogbnVtYmVyID0gTUFQX0hFSUdIVCAvIGdyaWRTaXplO1xyXG4gIGxldCB4Tm9kZXM6IE1hcE5vZGVbXSA9IGZpbmRYSW5TZWFyY2hNYXAoMCwgbm9kZXNJblgsIHgpO1xyXG4gIGlmKHhOb2Rlcykge1xyXG4gICAgbm9kZSA9IGNvb3JkaW5hdGVZQmluYXJ5U2VhcmNoKDAsIG5vZGVzSW5ZLCB5LCB4Tm9kZXMpO1xyXG4gIH1cclxuICByZXR1cm4gbm9kZTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNsZWFyTWFwXHJcbn0gZnJvbSAnLi9jbGVhck1hcCc7XHJcbmltcG9ydCB7XHJcbiAgZHJhd0dyaWRcclxufSBmcm9tICcuL2dyaWQnO1xyXG5pbXBvcnQge1xyXG4gIGFkZE5laWdoYm9ycyxcclxuICBuZWlnaGJvcnNcclxufSBmcm9tICcuL25laWdoYm9ycyc7XHJcbmltcG9ydCB7XHJcbiAgY3JlYXRlTm9kZXNcclxufSBmcm9tICcuL25vZGVzJztcclxuaW1wb3J0IHtcclxuICBjcmVhdGVPbmVPYnN0YWNsZSxcclxuICBjcmVhdGVPYnN0YWNsZXMsXHJcbiAgY3JlYXRlVW5pdE9ic3RhY2xlXHJcbn0gZnJvbSAnLi9vYnN0YWNsZXMnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjbGVhck1hcCxcclxuICBkcmF3R3JpZCxcclxuICBhZGROZWlnaGJvcnMsXHJcbiAgbmVpZ2hib3JzLFxyXG4gIGNyZWF0ZU5vZGVzLFxyXG4gIGNyZWF0ZU9uZU9ic3RhY2xlLFxyXG4gIGNyZWF0ZU9ic3RhY2xlcyxcclxuICBjcmVhdGVVbml0T2JzdGFjbGVcclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2UgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgbW92ZUljb25TcmMsIGZpZ2h0SWNvblNyYywgc3dvcmRJY29uU3JjLCBzcGVhckljb25TcmMsIHNwZWFyQW5kU2hpZWxkU3JjIH0gZnJvbSBcIi4uLy4uL1VJL2JhdHRsZVVJL3VuaXRQYW5lbC9pY29uL2ljb25TZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBkZWZhdWx0VW5pdHMsIGNyZWF0ZURlZmF1bHRVbml0cyB9IGZyb20gXCIuLi91bml0L2RlZmF1bHRVbml0c1wiO1xyXG5cclxuZXhwb3J0IGxldCB1bml0SWNvbkltYWdlczogYW55ID0ge307XHJcbmV4cG9ydCBsZXQgbW92ZW1lbnRJY29uSW1hZ2U6IGFueTtcclxuZXhwb3J0IGxldCBmaWdodEljb25JbWFnZTogYW55O1xyXG5leHBvcnQgbGV0IHN3b3JkSWNvbkltYWdlOiBhbnk7XHJcbmV4cG9ydCBsZXQgc3BlYXJJY29uSW1hZ2U6IGFueTtcclxuZXhwb3J0IGxldCBzcGVhckFuZFNoaWVsZEljb25JbWFnZTogYW55O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvYWRJY29ucyA9ICgpID0+IHtcclxuICAgIGxvYWRGaWdodEljb25JbWFnZSgpO1xyXG4gICAgbG9hZE1vdmVtZW50SWNvbkltYWdlKCk7XHJcbiAgICBsb2FkU3dvcmRJY29uSW1hZ2UoKTtcclxuICAgIGxvYWRTcGVhckljb25JbWFnZSgpO1xyXG4gICAgbG9hZFNwZWFyQW5kU2hpZWxkSWNvbkltYWdlKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkVW5pdEljb25zID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGNyZWF0ZURlZmF1bHRVbml0cygpLnRoZW4oKCkgPT4gbG9hZERlZmF1bHRVbml0cygpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuY29uc3QgbG9hZERlZmF1bHRVbml0cyA9ICgpID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBsb2FkVW5pdEljb25JbWFnZXMoKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGxvYWRNb3ZlbWVudEljb25JbWFnZSA9ICgpID0+IHtcclxuICAgIGxvYWRJbWFnZShtb3ZlSWNvblNyYywgKGVycjogYW55LCBpbWc6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgbG9hZCBtb3ZlbWVudCBpY29uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb3ZlbWVudEljb25JbWFnZSA9IGltZztcclxuICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBsb2FkRmlnaHRJY29uSW1hZ2UgPSAoKSA9PiB7XHJcbiAgICBsb2FkSW1hZ2UoZmlnaHRJY29uU3JjLCAoZXJyOiBhbnksIGltZzogYW55KSA9PiB7XHJcbiAgICAgICAgaWYoZXJyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBsb2FkIGZpZ2h0IGljb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpZ2h0SWNvbkltYWdlID0gaW1nO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGxvYWRVbml0SWNvbkltYWdlcyA9IChpOiBudW1iZXIgPSAwKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgaWYoaSA9PT0gZGVmYXVsdFVuaXRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvYWRJbWFnZShkZWZhdWx0VW5pdHNbaV0uaW1nU3JjLCAoZXJyOiBhbnksIGltZzogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgbG9hZCBpbWFnZXMgb2YgdW5pdCAke2RlZmF1bHRVbml0c1tpXS5uYW1lfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVuaXRJY29uSW1hZ2VzW2RlZmF1bHRVbml0c1tpXS5uYW1lXSA9IGltZztcclxuICAgICAgICAgICAgcmVzb2x2ZShsb2FkVW5pdEljb25JbWFnZXMoaSArIDEpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9hZFN3b3JkSWNvbkltYWdlID0gKCkgPT4ge1xyXG4gICAgbG9hZEltYWdlKHN3b3JkSWNvblNyYywgKGVycjogYW55LCBpbWc6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBsb2FkIHN3b3JkIGljb24gYXQgcGF0aCAke3N3b3JkSWNvbkltYWdlfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd29yZEljb25JbWFnZSA9IGltZztcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbG9hZFNwZWFySWNvbkltYWdlID0gKCkgPT4ge1xyXG4gICAgbG9hZEltYWdlKHNwZWFySWNvblNyYywgKGVycjogYW55LCBpbWc6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmKGVycikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBsb2FkIHNwZWFyIGljb24gYXQgcGF0aDogJHtzcGVhckljb25TcmN9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNwZWFySWNvbkltYWdlID0gaW1nO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2FkU3BlYXJBbmRTaGllbGRJY29uSW1hZ2UgPSAoKSA9PiB7XHJcbiAgICBsb2FkSW1hZ2Uoc3BlYXJBbmRTaGllbGRTcmMsIChlcnI6IGFueSwgaW1nOiBhbnkpID0+IHtcclxuICAgICAgICBpZihlcnIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgbG9hZCBzcGVhciBhbmQgc2hpZWxkIGljb24gYXQgcGF0aCAke3NwZWFyQW5kU2hpZWxkU3JjfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzcGVhckFuZFNoaWVsZEljb25JbWFnZSA9IGltZztcclxuICAgIH0pO1xyXG59XHJcblxyXG4iLCJpbXBvcnQge1xyXG4gICAgZGVsZXRlVW5pdEZyb21BcnJheSxcclxuICAgIGlzVW5pdEluQXJyYXlcclxuICB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHtcclxuICAgIHZpc2libGVGb3JDb21wdXRlclVuaXRzXHJcbn0gZnJvbSAnLi4vLi4vdW5pdC92aXNpYmxlVW5pdHMnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5cclxuZXhwb3J0IGxldCByZXZlYWxlZFVuaXRzOiBVbml0W10gPSBbXTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRUb1JldmVhbGVkVW5pdHMgPSAodW5pdDpVbml0KSA9PiB7XHJcbiAgICBpZighaXNVbml0SW5BcnJheSh1bml0LCByZXZlYWxlZFVuaXRzKSAmJiB1bml0LmNvbnRyb2xCeSA9PT0gJ3BsYXllcicpIHtcclxuICAgICAgICBsZXQgdXBkYXRlZFVuaXQ6VW5pdCA9IE9iamVjdC5hc3NpZ24oe30sIHVuaXQpO1xyXG4gICAgICAgIHJldmVhbGVkVW5pdHMucHVzaCh1cGRhdGVkVW5pdCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVGcm9tUmV2ZWFsZWRVbml0cyA9ICh1bml0OlVuaXQpID0+IHtcclxuICAgIGlmKGlzVW5pdEluQXJyYXkodW5pdCwgcmV2ZWFsZWRVbml0cykpIHtcclxuICAgICAgICByZXZlYWxlZFVuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCByZXZlYWxlZFVuaXRzKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7XHJcbiAgYXR0YWNrRW5lbXksXHJcbiAgbW92ZVRvLFxyXG4gIHB1cnN1ZVVuaXQsXHJcbiAgdXBkYXRlVW5pdFxyXG59IGZyb20gJy4vY29tbW9uJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYXR0YWNrRW5lbXksXHJcbiAgbW92ZVRvLFxyXG4gIHB1cnN1ZVVuaXQsXHJcbiAgdXBkYXRlVW5pdFxyXG59XHJcbiIsImV4cG9ydCBsZXQgYXJteUltZ1dpZHRoOm51bWJlciA9IDgwO1xyXG5leHBvcnQgbGV0IGFybXlJbWdIZWlnaHQ6bnVtYmVyID0gODA7XHJcbiIsImltcG9ydCB7XHJcbiAgaXNTdGFydEJhdHRsZUF2YWlsYWJsZVxyXG59IGZyb20gJy4vYnV0dG9uQXZhaWxhYmxlJztcclxuaW1wb3J0IHtcclxuICBpc1N0YXJ0QmF0dGxlQnV0dG9uU2VsZWN0ZWRcclxufSBmcm9tICcuL2J1dHRvblNlbGVjdGVkJztcclxuaW1wb3J0IHtcclxuICBzaG93U3RhcnRCYXR0bGVCdXR0b24sXHJcbiAgc2hvd1RleHRcclxufSBmcm9tICcuL3Nob3dCdXR0b24nO1xyXG5cclxuZXhwb3J0IHtcclxuICBpc1N0YXJ0QmF0dGxlQXZhaWxhYmxlLFxyXG4gIGlzU3RhcnRCYXR0bGVCdXR0b25TZWxlY3RlZCxcclxuICBzaG93U3RhcnRCYXR0bGVCdXR0b24sXHJcbiAgc2hvd1RleHRcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGxhdW5jaEJhdHRsZVxyXG59IGZyb20gJy4vYmF0dGxlJztcclxuaW1wb3J0IHtcclxuICBsYXVuY2hHYW1lXHJcbn0gZnJvbSAnLi9nYW1lJztcclxuaW1wb3J0IHtcclxuICBhY3RpdmF0ZUJhdHRsZU1vZGUsXHJcbiAgYWN0aXZhdGVNYWluTWVudU1vZGVcclxufSBmcm9tICcuL21vZGVzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYWN0aXZhdGVCYXR0bGVNb2RlLFxyXG4gIGFjdGl2YXRlTWFpbk1lbnVNb2RlLFxyXG4gIGxhdW5jaEJhdHRsZSxcclxuICBsYXVuY2hHYW1lXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhdXhpbGlhcnlDYW52YXMsXHJcbiAgYmFja2dyb3VuZENhbnZhcyxcclxuICBkcmFnQW5kRHJvcENhbnZhcyxcclxuICBjYW52YXMsXHJcbiAgbWFpbk1lbnUsXHJcbiAgdGVycmFpblxyXG59IGZyb20gJy4uL2NhbnZhcyc7XHJcbmltcG9ydCB7IHBhdGhDYW52YXMgfSBmcm9tICcuLi9jYW52YXMvcGF0aCc7XHJcbmltcG9ydCB7IGV2ZW50Q2FudmFzIH0gZnJvbSAnLi4vY2FudmFzL2V2ZW50JztcclxuaW1wb3J0IHsgbG9hZGluZ0NhbnZhcyB9IGZyb20gJy4uL2NhbnZhcy9sb2FkaW5nJztcclxuXHJcbi8vIGRlZmluZSAyZCBjb250ZXh0XHJcbmV4cG9ydCBsZXQgY3R4OmFueTtcclxuZXhwb3J0IGxldCBhdXhpbGlhcnlDdHg6YW55O1xyXG5leHBvcnQgbGV0IGJhY2tncm91bmRDdHg6YW55O1xyXG5leHBvcnQgbGV0IHRlcnJhaW5DdHg6YW55O1xyXG5leHBvcnQgbGV0IG1haW5NZW51Q3R4OmFueTtcclxuZXhwb3J0IGxldCBkcmFnQW5kRHJvcENhbnZhc0N0eDphbnk7XHJcbmV4cG9ydCBsZXQgcGF0aEN0eDogYW55O1xyXG5leHBvcnQgbGV0IGV2ZW50Q3R4OiBhbnk7XHJcbmV4cG9ydCBsZXQgbG9hZGluZ0N0eDogYW55O1xyXG5cclxuaWYoY2FudmFzKSB7XHJcbiAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxufVxyXG5pZihhdXhpbGlhcnlDYW52YXMpIHtcclxuICBhdXhpbGlhcnlDdHggID0gYXV4aWxpYXJ5Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbn1cclxuaWYodGVycmFpbikge1xyXG4gIHRlcnJhaW5DdHggPSB0ZXJyYWluLmdldENvbnRleHQoJzJkJyk7XHJcbn1cclxuaWYoYmFja2dyb3VuZENhbnZhcykge1xyXG4gIGJhY2tncm91bmRDdHggID0gYmFja2dyb3VuZENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG59XHJcbmlmKG1haW5NZW51KSB7XHJcbiAgbWFpbk1lbnVDdHggPSBtYWluTWVudS5nZXRDb250ZXh0KCcyZCcpO1xyXG59XHJcbmlmKGRyYWdBbmREcm9wQ2FudmFzKSB7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHggPSBkcmFnQW5kRHJvcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG59XHJcbmlmKHBhdGhDYW52YXMpIHtcclxuICBwYXRoQ3R4ID0gcGF0aENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG59XHJcbmlmKGV2ZW50Q2FudmFzKSB7XHJcbiAgZXZlbnRDdHggPSBldmVudENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG59XHJcbmlmKGxvYWRpbmdDYW52YXMpIHtcclxuICBsb2FkaW5nQ3R4ID0gbG9hZGluZ0NhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZGVsZXRlVW5pdEZyb21BcnJheSxcclxuICBpc1VuaXRJbkFycmF5XHJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIHZpc2libGVGb3JDb21wdXRlclVuaXRzXHJcbn0gZnJvbSAnLi4vLi4vdW5pdC92aXNpYmxlVW5pdHMnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5cclxuZXhwb3J0IGxldCBoaWRpbmdFbmVtaWVzOiBVbml0W10gPSBbXTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRUb0hpZGluZ0VuZW1pZXMgPSAodW5pdDpVbml0KSA9PiB7XHJcbiAgaWYoIWlzVW5pdEluQXJyYXkodW5pdCwgdmlzaWJsZUZvckNvbXB1dGVyVW5pdHMpKSB7IC8vIGhpZGluZyBlbmVteSBjYW5ub3QgYmUgdmlzaWJsZSBhdCB0aGUgc2FtZSB0aW1lXHJcbiAgICBsZXQgdXBkYXRlZFVuaXQ6VW5pdCA9IE9iamVjdC5hc3NpZ24oe30sIHVuaXQpO1xyXG4gICAgaWYoIWlzVW5pdEluQXJyYXkodW5pdCwgaGlkaW5nRW5lbWllcykgJiYgdW5pdC5jb250cm9sQnkgPT09ICdwbGF5ZXInKSB7IC8vIHVuaXQncyBhbHJlYWR5IGFkZGVkXHJcbiAgICAgIGhpZGluZ0VuZW1pZXMucHVzaCh1cGRhdGVkVW5pdCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbUhpZGluZ0VuZW1pZXMgPSAodW5pdDpVbml0KSA9PiB7XHJcbiAgaWYoaXNVbml0SW5BcnJheSh1bml0LCB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cykpIHtcclxuICAgIGlmKGlzVW5pdEluQXJyYXkodW5pdCwgaGlkaW5nRW5lbWllcykpIHsgLy8gdW5pdCBzaG91bGQgYmUgaW4gdGhlIGFycmF5XHJcbiAgICAgIGhpZGluZ0VuZW1pZXMgPSBkZWxldGVVbml0RnJvbUFycmF5KHVuaXQsIGhpZGluZ0VuZW1pZXMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge2dldFN1cnJvdW5kZWROb2Rlc30gZnJvbSAnLi9nZXRTdXJyb3VuZGVkTm9kZXMnO1xyXG5pbXBvcnQge2dldFN1cnJvdW5kZWRFbmVtaWVzfSBmcm9tICcuL2dldFN1cnJvdW5kZWRFbmVtaWVzJztcclxuaW1wb3J0IHtnZXRTdXJyb3VuZGVkQWxsaWVzfSBmcm9tICcuL2dldFN1cnJvdW5kZWRBbGxpZXMnO1xyXG5cclxuZXhwb3J0IHtcclxuICBnZXRTdXJyb3VuZGVkTm9kZXMsXHJcbiAgZ2V0U3Vycm91bmRlZEVuZW1pZXMsXHJcbiAgZ2V0U3Vycm91bmRlZEFsbGllc1xyXG59XHJcbiIsImltcG9ydCB7IGdyaWRTaXplIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgZ2V0Tm9kZUZyb21NYXAgfSBmcm9tICcuLic7XHJcbmltcG9ydCBVbml0IGZyb20gJy4uLy4uL3VuaXQvdHlwZXMvVW5pdCc7XHJcbmltcG9ydCBNYXBOb2RlIGZyb20gJy4uLy4uL21hcC9ub2Rlcy9NYXBOb2RlJztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTdXJyb3VuZGVkTm9kZXMgPSAodW5pdDpVbml0LCBkaXN0YW5jZTpudW1iZXIgPSAxKTogTWFwTm9kZVtdID0+IHtcclxuICBsZXQgbm9kZXM6IE1hcE5vZGVbXSA9IFtdO1xyXG4gIGxldCBzdGFydFggPSB1bml0LmN1cnJlbnROb2RlLnggLSAoZGlzdGFuY2UgKiBncmlkU2l6ZSk7XHJcbiAgbGV0IGZpbmlzaFggPSB1bml0LmN1cnJlbnROb2RlLnggKyAoZGlzdGFuY2UgKiBncmlkU2l6ZSk7XHJcbiAgbGV0IHN0YXJ0WSA9IHVuaXQuY3VycmVudE5vZGUueSAtIChkaXN0YW5jZSAqIGdyaWRTaXplKTtcclxuICBsZXQgZmluaXNoWSA9IHVuaXQuY3VycmVudE5vZGUueSArIChkaXN0YW5jZSAqIGdyaWRTaXplKTtcclxuICBmb3IobGV0IHkgPSBzdGFydFk7IHkgPD0gZmluaXNoWTsgeSArPSBncmlkU2l6ZSkge1xyXG4gICAgZm9yKGxldCB4ID0gc3RhcnRYOyB4IDw9IGZpbmlzaFg7IHggKz0gZ3JpZFNpemUpIHtcclxuICAgICAgbGV0IG5vZGUgPSBnZXROb2RlRnJvbU1hcCh4LCB5KTtcclxuICAgICAgaWYobm9kZSkge1xyXG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbm9kZXM7XHJcbn1cclxuIiwiaW1wb3J0IHsgQ0FOVkFTX0hFSUdIVCwgTUFQX0hFSUdIVCwgTUFQX1dJRFRIIH0gZnJvbSBcIi4uLy4uLy4uL2NvbmZpZ1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFVOSVRfUEFORUxfSEVJR0hUID0gQ0FOVkFTX0hFSUdIVCAtIE1BUF9IRUlHSFQ7XHJcbmV4cG9ydCBjb25zdCBVTklUX1BBTkVMX1dJRFRIID0gTUFQX1dJRFRIO1xyXG5leHBvcnQgY29uc3QgVU5JVF9MRUZUX1BBTkVMX1dJRFRIID0gMjYwO1xyXG5leHBvcnQgY29uc3QgVU5JVF9SSUdIVF9QQU5FTF9XSURUSCA9IDI2MDtcclxuZXhwb3J0IGNvbnN0IFVOSVRfSUNPTlNfUEFORUxfV0lEVEggPSAxMDAwO1xyXG5cclxuLy8gSUNPTlNcclxuZXhwb3J0IGNvbnN0IFVOSVRfSUNPTl9XSURUSCA9IDEwMDtcclxuZXhwb3J0IGNvbnN0IFVOSVRfSUNPTl9IRUlHSFQgPSBVTklUX1BBTkVMX0hFSUdIVDsiLCJpbXBvcnQgeyBjdHggfSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7IFVuaXQgfSBmcm9tICcuLi90eXBlcyc7XHJcbmltcG9ydCB7IGdyaWRTaXplIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgY3VycmVudGx5Q2hvc2VuVW5pdCB9IGZyb20gJy4uLy4uL3N0b3JlL3VuaXQvY3VycmVudGx5Q2hvc2VuVW5pdCc7XHJcbmltcG9ydCB7IHBsYXllclVuaXRzIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7IHVuaXRUb0ljb25NYXAgfSBmcm9tICcuLi8uLi9zdG9yZS9pbWFnZXMvdW5pdFRvSWNvbk1hcCc7XHJcblxyXG5leHBvcnQgY29uc3QgZHJhd1VuaXQgPSAodW5pdDogVW5pdCkgPT4ge1xyXG4gIGxldCBjb2xvcjtcclxuICBsZXQgcmFkaXVzT2Zmc2V0ID0gMDtcclxuICBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ3BsYXllcicpIHtcclxuICAgIGNvbG9yID0gJyNkYmRiMGQnO1xyXG4gIH1cclxuICBlbHNlIGlmKHVuaXQuY29udHJvbEJ5ID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICBjb2xvciA9ICcjZDMwYzBjJztcclxuICAgIGlmKCF1bml0LmlzVmlzaWJsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmKGN0eCkge1xyXG4gICAgaWYoY3VycmVudGx5Q2hvc2VuVW5pdCAmJiBjdXJyZW50bHlDaG9zZW5Vbml0LmlkID09PSB1bml0LmlkKSB7XHJcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgY3R4LmFyYyh1bml0LmNlbnRlclgsIHVuaXQuY2VudGVyWSwgdW5pdC5yYWRpdXMsIDAsIE1hdGguUEkqMik7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNhNzllYmZcIjtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICByYWRpdXNPZmZzZXQgPSAyO1xyXG4gICAgfSBcclxuICAgIGxldCBvZmZzZXRYID0gMjtcclxuICAgIGxldCBvZmZzZXRZID0gMjtcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmModW5pdC5jZW50ZXJYLCB1bml0LmNlbnRlclksIHVuaXQucmFkaXVzIC0gcmFkaXVzT2Zmc2V0LCAwLCBNYXRoLlBJKjIpO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgY3R4LmZpbGwoKTtcclxuICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgIGN0eC5yZXN0b3JlKCk7XHJcbiAgICBsZXQgb2Zmc2V0ID0gODtcclxuICAgIGxldCB4ID0gdW5pdC54ICsgb2Zmc2V0O1xyXG4gICAgbGV0IHkgPSAgdW5pdC55ICsgb2Zmc2V0O1xyXG4gICAgbGV0IHJhZGl1cyA9ICh1bml0LnJhZGl1cyAqIDIpIC0gb2Zmc2V0O1xyXG4gICAgY3R4LmRyYXdJbWFnZSh1bml0VG9JY29uTWFwW3VuaXQubmFtZV0sIHggKyBvZmZzZXRYLCB5ICsgb2Zmc2V0WSwgcmFkaXVzLCByYWRpdXMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNsZWFyVW5pdEltYWdlID0gKHVuaXQ6IFVuaXQpID0+IHtcclxuICBpZihjdHgpIHtcclxuICAgIGN0eC5jbGVhclJlY3QodW5pdC54LCB1bml0LnksIGdyaWRTaXplLCBncmlkU2l6ZSk7XHJcbiAgfVxyXG59IFxyXG5cclxuZXhwb3J0IGNvbnN0IHJlZHJhd1VuaXRzID0gKHVuaXRzOiBVbml0W10pID0+IHtcclxuICBmb3IobGV0IHVuaXQgb2YgdW5pdHMpIHtcclxuICAgIGlmKHVuaXQuaXNNb3ZpbmcgIT09IHRydWUpIHtcclxuICAgICAgZHJhd1VuaXQodW5pdCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgcmVkcmF3UGxheWVyVW5pdHMgPSAoKSA9PiB7XHJcbiAgcmVkcmF3VW5pdHMocGxheWVyVW5pdHMpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgc3BvdEVuZW15LFxyXG4gIGNoYXJnZSxcclxuICByZW1vdmVVbml0RnJvbUVuZW1pZXNGaWdodEFnYWluc3RcclxufSBmcm9tICcuLi8uLic7XHJcbmltcG9ydCB7IGdldE5vZGVGcm9tTWFwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVVuaXRPYnN0YWNsZSxcclxuICBhZGROZWlnaGJvcnNcclxufSBmcm9tICcuLi8uLi8uLi9tYXAnO1xyXG5pbXBvcnQgeyBpbml0aWFsTWFwIH0gZnJvbSAnLi4vLi4vLi4vbWFwL2NyZWF0ZU1hcC9pbml0aWFsTWFwJztcclxuaW1wb3J0IHsgYVN0YXIgfSBmcm9tICcuLi8uLi8uLi9wYXRoJztcclxuaW1wb3J0IHsgYW5vdGhlclVuaXRJc09uVGhlV2F5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyB1bml0Q2FuR2V0T3V0T2ZDb21iYXQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91bml0L21vdmVtZW50VXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRTdXJyb3VuZGVkQmxvY2tlZE5vZGVzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbm9kZSc7XHJcbmltcG9ydCB7IG1vdmVUb05leHROb2RlSW5QdXJzdWVVbml0IH0gZnJvbSAnLi9tb3ZlVG9OZXh0Tm9kZSc7XHJcbmltcG9ydCB7IHVwZGF0ZVVuaXQgfSBmcm9tICcuL3VwZGF0ZVVuaXQnO1xyXG5pbXBvcnQgeyBVbml0IH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBzdG9wTW92aW5nIH0gZnJvbSAnLi9zdG9wTW92aW5nJztcclxuaW1wb3J0IHsgdW5pdENhbk1vdmVUb1RoZU5vZGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy91bml0L3ByaW9yaXR5JztcclxuaW1wb3J0IE1hcE5vZGUgZnJvbSAnLi4vLi4vLi4vbWFwL25vZGVzL01hcE5vZGUnO1xyXG5pbXBvcnQgeyBnZXRJbnRlcmNlcHRlZEVuZW1pZXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy91bml0L2ludGVyY2VwdGlvbi9nZXRJbnRlcmNlcHRlZEVuZW1pZXMnO1xyXG5pbXBvcnQgeyBnZXRCbG9ja2VkRW5lbWllcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3VuaXQvdW5pdFBvc2l0aW9uL2dldEJsb2NrZWRFbmVtaWVzJztcclxuaW1wb3J0IHsgZHJhd1VuaXRJY29uIH0gZnJvbSAnLi4vLi4vLi4vVUkvYmF0dGxlVUkvdW5pdFBhbmVsL2ljb24vZHJhd1VuaXRJY29uJztcclxuXHJcbmV4cG9ydCBjb25zdCBwdXJzdWVVbml0ID0gKCBcclxuICAgIHVuaXQ6IFVuaXQsXHJcbiAgICBwdXJzdWVkVW5pdDogVW5pdCwgXHJcbiAgICBjdXJyZW50TW92ZVRvWDpudW1iZXIsIFxyXG4gICAgY3VycmVudE1vdmVUb1k6bnVtYmVyLCBcclxuICAgIGk6bnVtYmVyLCBcclxuICAgIHBhdGg6YW55LCBcclxuICAgIG5ld01vdmVtZW50OmJvb2xlYW4sIFxyXG4gICAgdHJpZXM6IG51bWJlciA9IDBcclxuKSA9PiB7XHJcbiAgaWYodHJpZXMgPiAzKSByZXR1cm47XHJcbiAgaWYodW5pdC5pc0ZpZ2h0aW5nKSB7XHJcbiAgICB1bml0LnNldFVuaXRUb1B1cnN1ZVRvTnVsbCgpO1xyXG4gICAgaWYobmV3TW92ZW1lbnQgJiYgdW5pdENhbkdldE91dE9mQ29tYmF0KHVuaXQpKSB7IC8vIHVuaXQgaXMgdHJ5aW5nIHRvIG91dCBvZiBjb21iYXRcclxuICAgICAgdW5pdC5jbGVhckZpZ2h0QWdhaW5zdCgpOyAvLyBub3cgdW5pdCBub3QgZmlnaHRpbmcgd2l0aCBhbnlvbmVcclxuICAgICAgcmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0KHVuaXQpO1xyXG4gICAgICB1bml0LnNldElzTW92aW5nVG9UcnVlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgY3VycmVudE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0LngsIHVuaXQueSk7IC8vIGdldCBjdXJyZW50Tm9kZVxyXG4gICAgICB1bml0LnNldEN1cnJlbnROb2RlKGN1cnJlbnROb2RlKTsgLy8gc2V0IGN1cnJlbnROb2RlXHJcbiAgICAgIHVuaXQuc2V0TmV4dE5vZGUoY3VycmVudE5vZGUpOyAvLyBzZXQgbmV4dE5vZGVcclxuICAgICAgdW5pdC5zZXRJc01vdmluZ1RvRmFsc2UoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1bml0LnVuaXRUb1B1cnN1ZSA9PT0gbnVsbCkgeyAvLyB1bml0IGlzbid0IHB1cnN1aW5nIGFueSBvcHBvbmVudCdzIHVuaXRzXHJcbiAgICBsZXQgc3RhcnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpO1xyXG4gICAgbGV0IGZpbmlzaE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0Lm1vdmVUb05vZGUueCwgdW5pdC5tb3ZlVG9Ob2RlLnkpO1xyXG4gICAgbGV0IG5ld1BhdGg6YW55ID0gYVN0YXIoaW5pdGlhbE1hcCwgc3RhcnROb2RlLCBmaW5pc2hOb2RlKTtcclxuICAgIHVuaXQuYXNzaWduTW92ZVRvUG9zaXRpb24oZmluaXNoTm9kZS54LCBmaW5pc2hOb2RlLnkpO1xyXG4gICAgdXBkYXRlVW5pdCh1bml0LG5ld1BhdGgsIDAsIGZpbmlzaE5vZGUueCwgZmluaXNoTm9kZS55LCBudWxsLCBmYWxzZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlmKHVuaXQudW5pdFRvUHVyc3VlICE9PSBudWxsICYmIHB1cnN1ZWRVbml0LmlkICE9PSB1bml0LnVuaXRUb1B1cnN1ZS5pZCkge1xyXG4gICAgbGV0IHN0YXJ0Tm9kZSA9IGdldE5vZGVGcm9tTWFwKHVuaXQueCwgdW5pdC55KTtcclxuICAgIGxldCBmaW5pc2hOb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC51bml0VG9QdXJzdWUueCwgdW5pdC51bml0VG9QdXJzdWUueSk7XHJcbiAgICBsZXQgbmV3UGF0aDphbnkgPSBhU3Rhcihpbml0aWFsTWFwLCBzdGFydE5vZGUsIGZpbmlzaE5vZGUpO1xyXG4gICAgdW5pdC5hc3NpZ25Nb3ZlVG9Qb3NpdGlvbihmaW5pc2hOb2RlLngsIGZpbmlzaE5vZGUueSlcclxuICAgIHB1cnN1ZVVuaXQodW5pdCwgdW5pdC51bml0VG9QdXJzdWUsIGZpbmlzaE5vZGUueCwgZmluaXNoTm9kZS55LCAwLCBuZXdQYXRoLCBmYWxzZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZihnZXRJbnRlcmNlcHRlZEVuZW1pZXModW5pdCkubGVuZ3RoICE9PSAwKSB7IC8vIGVuZW15IGlzIG9uIHRoZSBuZWlnaGJvdXIgbm9kZVxyXG4gICAgdW5pdC5zZXRJc01vdmluZ1RvRmFsc2UoKTtcclxuICAgIHVuaXQuc2V0VW5pdFRvUHVyc3VlVG9OdWxsKCk7XHJcbiAgICBkcmF3VW5pdEljb24odW5pdCk7XHJcbiAgICBmb3IobGV0IGVuZW15IG9mIGdldEludGVyY2VwdGVkRW5lbWllcyh1bml0KSkge1xyXG4gICAgICBlbmVteS5zZXRJc01vdmluZ1RvRmFsc2UoKTtcclxuICAgICAgdW5pdC5hc3NpZ25FbmVteShlbmVteSk7IC8vIGFzc2lnbiBwdXJzdWVkVW5pdCBhcyBmcm9udCBsaW5lIGVuZW15XHJcbiAgICAgIGVuZW15LmFzc2lnbkVuZW15KHVuaXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IHVwZGF0ZWRQYXRoID0gT2JqZWN0LmFzc2lnbihbXSwgcGF0aCk7XHJcbiAgbGV0IG5vZGUgPSB1cGRhdGVkUGF0aFtpXTsgLy8gZ2V0IG5leHQgbm9kZVxyXG4gIGlmKCFub2RlKSByZXR1cm47XHJcbiAgbGV0IG5leHROb2RlOiBNYXBOb2RlO1xyXG4gIGlmKGkgKyAxID09PSB1cGRhdGVkUGF0aC5sZW5ndGgpIHsgLy8gbGFzdCBub2RlXHJcbiAgICBuZXh0Tm9kZSA9IG5vZGU7XHJcbiAgfSBlbHNlIHtcclxuICAgIG5leHROb2RlID0gdXBkYXRlZFBhdGhbaSArIDFdO1xyXG4gIH1cclxuXHJcbiAgbGV0IGN1cnJlbnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpO1xyXG4gIHVuaXQuc2V0Q3VycmVudE5vZGUoY3VycmVudE5vZGUpOyBcclxuICB1bml0LnNldE5leHROb2RlKG5leHROb2RlKTtcclxuICBsZXQgc3RhcnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpO1xyXG4gIGxldCBmaW5pc2hOb2RlID0gZ2V0Tm9kZUZyb21NYXAocHVyc3VlZFVuaXQueCwgcHVyc3VlZFVuaXQueSk7XHJcbiAgXHJcbiAgLy8gaWYgcHVyc3VlZCB1bml0IGNoYW5nZWQgcG9zaXRpb25cclxuICBpZihjdXJyZW50TW92ZVRvWCAhPT0gcHVyc3VlZFVuaXQueCB8fCBjdXJyZW50TW92ZVRvWSAhPT0gcHVyc3VlZFVuaXQueSkge1xyXG4gICAgaSA9IDA7XHJcbiAgICBjdXJyZW50TW92ZVRvWCA9IHB1cnN1ZWRVbml0Lng7XHJcbiAgICBjdXJyZW50TW92ZVRvWSA9IHB1cnN1ZWRVbml0Lnk7XHJcbiAgICBzdGFydE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0LngsIHVuaXQueSk7XHJcbiAgICBmaW5pc2hOb2RlID0gZ2V0Tm9kZUZyb21NYXAocHVyc3VlZFVuaXQueCwgcHVyc3VlZFVuaXQueSk7XHJcbiAgICBcclxuICAgIHBhdGggPSBhU3Rhcihpbml0aWFsTWFwLCBzdGFydE5vZGUsIGZpbmlzaE5vZGUpO1xyXG4gICAgdW5pdC5hc3NpZ25Nb3ZlVG9Qb3NpdGlvbihwdXJzdWVkVW5pdC5jdXJyZW50Tm9kZS54LCBwdXJzdWVkVW5pdC5jdXJyZW50Tm9kZS55KTtcclxuICAgIG5vZGUgPSBwYXRoW2ldO1xyXG4gIH1cclxuXHJcbiAgLy8gdW5pdCBpcyByZWFjaGVkIG9wcG9uZW50cydzIHVuaXRcclxuICBpZihuZXh0Tm9kZS54ID09PSBwdXJzdWVkVW5pdC5jdXJyZW50Tm9kZS54ICYmIG5leHROb2RlLnkgPT09IHB1cnN1ZWRVbml0LmN1cnJlbnROb2RlLnkpIHtcclxuICAgIGNvbnNvbGUubG9nKCdVTklUIFJFQUNIRUQgRU5FTVknKTtcclxuICAgIHN0b3BNb3ZpbmcodW5pdCwgY3VycmVudE5vZGUpO1xyXG4gICAgdW5pdC5zZXRVbml0VG9QdXJzdWVUb051bGwoKTtcclxuICAgIGRyYXdVbml0SWNvbih1bml0KTtcclxuICAgIHVuaXQuYXNzaWduRW5lbXkocHVyc3VlZFVuaXQpOyAvLyBhc3NpZ24gcHVyc3VlZFVuaXQgYXMgZnJvbnQgbGluZSBlbmVteVxyXG4gICAgcHVyc3VlZFVuaXQuYXNzaWduRW5lbXkodW5pdCk7XHJcbiAgICBsZXQgcHVyc3VlZFVuaXRDdXJyZW50Tm9kZSA9IGdldE5vZGVGcm9tTWFwKHB1cnN1ZWRVbml0LngsIHB1cnN1ZWRVbml0LnkpO1xyXG4gICAgc3RvcE1vdmluZyhwdXJzdWVkVW5pdCwgcHVyc3VlZFVuaXRDdXJyZW50Tm9kZSk7XHJcbiAgICBkcmF3VW5pdEljb24ocHVyc3VlZFVuaXQpO1xyXG4gICAgY2hhcmdlKHVuaXQsIHB1cnN1ZWRVbml0KTtcclxuICAgIGNvbnNvbGUubG9nKCdlbmQgb2YgcmVhY2hlZCBlbmVteScpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgaWYoYW5vdGhlclVuaXRJc09uVGhlV2F5KHVuaXQpKSB7XHJcbiAgICAgLy8gdW5pdCBoYXMgYW5vdGhlciBhbGxpZXMnIHVuaXQgb24gaXRzIHdheVxyXG4gICAgIGNvbnNvbGUuZXJyb3IoXCJBTk9USEVSIFVOSVQgSVMgT04gVEhFIFdBWVwiKTtcclxuICAgIGlmKGdldEJsb2NrZWRFbmVtaWVzKHVuaXQpLmxlbmd0aCA+IDApIHsgLy8gdW5pdCBpcyBibG9ja2VkIGJ5IGVuZW15XHJcbiAgICAgIGNvbnNvbGUubG9nKCdVTklUIGlzIGJsb2NrZWQgYnkgZW5lbXknKTtcclxuICAgICAgc3RvcE1vdmluZyh1bml0LCBjdXJyZW50Tm9kZSk7XHJcbiAgICAgIHVuaXQuc2V0VW5pdFRvUHVyc3VlVG9OdWxsKCk7XHJcbiAgICAgIGRyYXdVbml0SWNvbih1bml0KTtcclxuICAgICAgZm9yKGxldCBlbmVteSBvZiBnZXRCbG9ja2VkRW5lbWllcyh1bml0KSkge1xyXG4gICAgICAgIHVuaXQuYXNzaWduRW5lbXkoZW5lbXkpO1xyXG4gICAgICAgIGVuZW15LmFzc2lnbkVuZW15KHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0gXHJcbiAgICBjb25zdCBwZXJtaXNzaW9uOmJvb2xlYW4gPSB1bml0Q2FuTW92ZVRvVGhlTm9kZShuZXh0Tm9kZSwgdW5pdCk7XHJcbiAgICBjb25zb2xlLmxvZygnUEVSTUlTU0lPTicsIHBlcm1pc3Npb24pO1xyXG4gICAgaWYoIXBlcm1pc3Npb24pIHtcclxuICAgICAgc3RvcE1vdmluZyh1bml0LCBjdXJyZW50Tm9kZSk7XHJcbiAgICAgIGxldCB1cGRhdGVkTWFwID0gT2JqZWN0LmFzc2lnbihbXSwgaW5pdGlhbE1hcCk7XHJcbiAgICAgIGxldCBibG9ja2VkTm9kZXMgPSBnZXRTdXJyb3VuZGVkQmxvY2tlZE5vZGVzKHVuaXQpO1xyXG4gICAgICBmb3IobGV0IGJsb2NrZWROb2RlIG9mIGJsb2NrZWROb2Rlcykge1xyXG4gICAgICAgIHVwZGF0ZWRNYXAgPSBjcmVhdGVVbml0T2JzdGFjbGUodXBkYXRlZE1hcCwgYmxvY2tlZE5vZGUueCwgYmxvY2tlZE5vZGUueSk7IC8vIGNyZWF0ZSBvYnN0YWNsZSBmb3IgY3VycmVudE5vZGVcclxuICAgICAgfVxyXG4gICAgICBhZGROZWlnaGJvcnModXBkYXRlZE1hcCk7IC8vIGNyZWF0ZSBuZXcgbmVpZ2hib3VycyBmb3IgdXBkYXRlZCBtYXBcclxuICAgICAgbGV0IHN0YXJ0Tm9kZSA9IGdldE5vZGVGcm9tTWFwKHVuaXQueCwgdW5pdC55LCB1cGRhdGVkTWFwKTtcclxuICAgICAgbGV0IGZpbmlzaE5vZGUgPSBnZXROb2RlRnJvbU1hcChjdXJyZW50TW92ZVRvWCwgY3VycmVudE1vdmVUb1ksIHVwZGF0ZWRNYXApO1xyXG5cclxuICAgICAgbGV0IG5ld1BhdGg6YW55ID0gYVN0YXIodXBkYXRlZE1hcCwgc3RhcnROb2RlLCBmaW5pc2hOb2RlKTtcclxuICAgICAgcHVyc3VlVW5pdCh1bml0LCBwdXJzdWVkVW5pdCwgY3VycmVudE1vdmVUb1gsIGN1cnJlbnRNb3ZlVG9ZLCBpLCBuZXdQYXRoLCBmYWxzZSwgdHJpZXMgKz0gMSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVuaXQuYXNzaWduTW92ZVRvUG9zaXRpb24ocHVyc3VlZFVuaXQuY3VycmVudE5vZGUueCwgcHVyc3VlZFVuaXQuY3VycmVudE5vZGUueSk7XHJcbiAgdW5pdC5zZXRJc01vdmluZ1RvVHJ1ZSgpO1xyXG4gIGRyYXdVbml0SWNvbih1bml0KTtcclxuICBzcG90RW5lbXkodW5pdCk7IC8vIGNoZWNrIGZvciBlbmVteSB1bml0c1xyXG4gIHVuaXQuZGVjcmVhc2VDb25kaXRpb24oMSk7IC8vIGRlY3JlYXNlQ29uZGl0aW9uIHdoaWxlIG1vdmluZ1xyXG4gIG1vdmVUb05leHROb2RlSW5QdXJzdWVVbml0KHVuaXQsIHB1cnN1ZWRVbml0LCBjdXJyZW50Tm9kZSwgbmV4dE5vZGUsIGN1cnJlbnRNb3ZlVG9YLCBjdXJyZW50TW92ZVRvWSwgcGF0aCwgaSk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBzcG90RW5lbXksXHJcbiAgcmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0XHJcbn0gZnJvbSAnLi4vLi4nO1xyXG5pbXBvcnQge1xyXG4gIGdldE5vZGVGcm9tTWFwXHJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVVuaXRPYnN0YWNsZSxcclxuICBhZGROZWlnaGJvcnNcclxufSBmcm9tICcuLi8uLi8uLi9tYXAnO1xyXG5pbXBvcnQge2luaXRpYWxNYXB9IGZyb20gJy4uLy4uLy4uL21hcC9jcmVhdGVNYXAvaW5pdGlhbE1hcCc7XHJcbmltcG9ydCB7XHJcbiAgYVN0YXJcclxufSBmcm9tICcuLi8uLi8uLi9wYXRoJztcclxuaW1wb3J0IHtcclxuICBhbm90aGVyVW5pdElzT25UaGVXYXksXHJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge3VuaXRDYW5HZXRPdXRPZkNvbWJhdCx9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3VuaXQvbW92ZW1lbnRVdGlscyc7XHJcbmltcG9ydCBVbml0IGZyb20gJy4uLy4uL3R5cGVzL1VuaXQnO1xyXG5pbXBvcnQge2dldFN1cnJvdW5kZWRCbG9ja2VkTm9kZXN9IGZyb20gJy4uLy4uLy4uL3V0aWxzL25vZGUnO1xyXG5pbXBvcnQge3N0b3BNb3Zpbmd9IGZyb20gJy4vc3RvcE1vdmluZyc7XHJcbmltcG9ydCB7bW92ZVRvTmV4dE5vZGVJblVwZGF0ZVVuaXR9IGZyb20gJy4vbW92ZVRvTmV4dE5vZGUnO1xyXG5pbXBvcnQge3B1cnN1ZVVuaXR9IGZyb20gJy4vcHVyc3VlVW5pdCdcclxuaW1wb3J0IHt1bml0Q2FuTW92ZVRvVGhlTm9kZX0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdW5pdC9wcmlvcml0eSc7XHJcbmltcG9ydCB7IGdldEludGVyY2VwdGVkRW5lbWllcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3VuaXQvaW50ZXJjZXB0aW9uL2dldEludGVyY2VwdGVkRW5lbWllcyc7XHJcbmltcG9ydCB7IGdldEJsb2NrZWRFbmVtaWVzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdW5pdC91bml0UG9zaXRpb24vZ2V0QmxvY2tlZEVuZW1pZXMnO1xyXG5pbXBvcnQgeyBkcmF3VW5pdEljb24gfSBmcm9tICcuLi8uLi8uLi9VSS9iYXR0bGVVSS91bml0UGFuZWwvaWNvbi9kcmF3VW5pdEljb24nO1xyXG5cclxuZXhwb3J0IGxldCB1cGRhdGVVbml0ID0gKFxyXG4gICAgdW5pdDpVbml0LFxyXG4gICAgcGF0aDphbnlbXSwgXHJcbiAgICBpOm51bWJlcj0wLCBcclxuICAgIGN1cnJlbnRNb3ZlVG9YOm51bWJlciwgXHJcbiAgICBjdXJyZW50TW92ZVRvWTpudW1iZXIsIFxyXG4gICAgY2hhc2VuVW5pdDphbnk9bnVsbCwgXHJcbiAgICBuZXdNb3ZlbWVudDpib29sZWFuLFxyXG4gICAgdHJpZXM6IG51bWJlciA9IDBcclxuICApID0+IHtcclxuICBpZih0cmllcyA+IDMpIHJldHVybjtcclxuICBpZih1bml0LmhlYWx0aCA8PSAwKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGlmKGkgPT09IHBhdGgubGVuZ3RoKSB7IC8vIHVuaXQgYXBwcm9hY2ggaXRzIGVuZCBwb3NpdGlvblxyXG4gICAgbGV0IGN1cnJlbnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpO1xyXG4gICAgc3RvcE1vdmluZyh1bml0LCBjdXJyZW50Tm9kZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZih1bml0LmlzRmlnaHRpbmcpIHsgLy8gc3RvcCBtb3ZpbmcgaWYgdW5pdCBpcyBmaWdodGluZ1xyXG4gICAgZHJhd1VuaXRJY29uKHVuaXQpO1xyXG4gICAgaWYobmV3TW92ZW1lbnQgJiYgdW5pdENhbkdldE91dE9mQ29tYmF0KHVuaXQpKSB7IC8vIHVuaXQgaXMgdHJ5aW5nIHRvIG91dCBvZiBjb21iYXRcclxuICAgICAgdW5pdC5zZXRVbml0VG9QdXJzdWVUb051bGwoKTtcclxuICAgICAgdW5pdC5jbGVhckZpZ2h0QWdhaW5zdCgpOyAvLyBub3cgdW5pdCBub3QgZmlnaHRpbmcgd2l0aCBhbnlvbmVcclxuICAgICAgcmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0KHVuaXQpOyAvLyByZW1vdmUgdW5pdCBmcm9tIGFsbCBlbmVtaWVzIGZpZ3RoQWdhaW5zdFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IGN1cnJlbnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpO1xyXG4gICAgICBzdG9wTW92aW5nKHVuaXQsIGN1cnJlbnROb2RlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYoZ2V0SW50ZXJjZXB0ZWRFbmVtaWVzKHVuaXQpLmxlbmd0aCAhPT0gMCkgeyAvLyBlbmVteSBpcyBvbiB0aGUgbmVpZ2hib3VyIG5vZGVcclxuICAgIGNvbnNvbGUubG9nKCdVTklUIElTIElOVEVSQ0VQVEVEIEJZIEVORU1ZJyk7XHJcbiAgICBsZXQgY3VycmVudE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0LngsIHVuaXQueSk7XHJcbiAgICBzdG9wTW92aW5nKHVuaXQsIGN1cnJlbnROb2RlKTtcclxuICAgIHVuaXQuc2V0VW5pdFRvUHVyc3VlVG9OdWxsKCk7XHJcbiAgICBkcmF3VW5pdEljb24odW5pdCk7XHJcbiAgICBmb3IobGV0IGVuZW15IG9mIGdldEludGVyY2VwdGVkRW5lbWllcyh1bml0KSkge1xyXG4gICAgICBzdG9wTW92aW5nKGVuZW15LCBlbmVteS5uZXh0Tm9kZSk7XHJcbiAgICAgIHVuaXQuYXNzaWduRW5lbXkoZW5lbXkpOyAvLyBhc3NpZ24gcHVyc3VlZFVuaXQgYXMgZnJvbnQgbGluZSBlbmVteVxyXG4gICAgICBlbmVteS5hc3NpZ25FbmVteSh1bml0KTtcclxuICAgICAgZHJhd1VuaXRJY29uKGVuZW15KTtcclxuICAgIH1cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmKHVuaXQudW5pdFRvUHVyc3VlKSB7XHJcbiAgICAvLyB1bml0IG5vdyBpcyBwdXJzdWluZyBvcHBvbmVudCdzIHVuaXRcclxuICAgIGxldCBzdGFydE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0LngsIHVuaXQueSk7XHJcbiAgICBzdG9wTW92aW5nKHVuaXQsIHN0YXJ0Tm9kZSk7XHJcbiAgICBsZXQgZmluaXNoTm9kZSA9IGdldE5vZGVGcm9tTWFwKHVuaXQudW5pdFRvUHVyc3VlLngsIHVuaXQudW5pdFRvUHVyc3VlLnkpO1xyXG4gICAgbGV0IG5ld1BhdGg6YW55ID0gYVN0YXIoaW5pdGlhbE1hcCwgc3RhcnROb2RlLCBmaW5pc2hOb2RlKTtcclxuICAgIHVuaXQuYXNzaWduTW92ZVRvUG9zaXRpb24oZmluaXNoTm9kZS54LCBmaW5pc2hOb2RlLnkpO1xyXG4gICAgcHVyc3VlVW5pdCh1bml0LCB1bml0LnVuaXRUb1B1cnN1ZSwgZmluaXNoTm9kZS54LCBmaW5pc2hOb2RlLnksIDAsIG5ld1BhdGgsIGZhbHNlKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmKGN1cnJlbnRNb3ZlVG9YICE9PSB1bml0Lm1vdmVUb05vZGUueCB8fCBjdXJyZW50TW92ZVRvWSAhPT0gdW5pdC5tb3ZlVG9Ob2RlLnkpIHsgLy8gbmV3IGRlc3RpbmF0aW9uXHJcbiAgICBsZXQgc3RhcnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpO1xyXG4gICAgbGV0IGZpbmlzaE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0Lm1vdmVUb05vZGUueCwgdW5pdC5tb3ZlVG9Ob2RlLnkpO1xyXG4gICAgc3RvcE1vdmluZyh1bml0LCBzdGFydE5vZGUpO1xyXG4gICAgbGV0IG5ld1BhdGg6YW55ID0gYVN0YXIoaW5pdGlhbE1hcCwgc3RhcnROb2RlLCBmaW5pc2hOb2RlKTtcclxuICAgIHVuaXQuYXNzaWduTW92ZVRvUG9zaXRpb24oZmluaXNoTm9kZS54LCBmaW5pc2hOb2RlLnkpO1xyXG4gICAgdXBkYXRlVW5pdCh1bml0LG5ld1BhdGgsIDAsIGZpbmlzaE5vZGUueCwgZmluaXNoTm9kZS55LCBudWxsLCBmYWxzZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBsZXQgdXBkYXRlZFBhdGggPSBPYmplY3QuYXNzaWduKFtdLCBwYXRoKTtcclxuICBsZXQgbm9kZSA9IHVwZGF0ZWRQYXRoW2ldOyAvLyBnZXQgbmV4dCBub2RlXHJcbiAgaWYoIW5vZGUpIHJldHVybjtcclxuICBsZXQgbmV4dE5vZGU6YW55O1xyXG4gIGlmKGkgKyAxID09PSB1cGRhdGVkUGF0aC5sZW5ndGgpIHsgLy8gbGFzdCBub2RlXHJcbiAgICBuZXh0Tm9kZSA9IG5vZGU7XHJcbiAgfSBlbHNlIHtcclxuICAgIG5leHROb2RlID0gdXBkYXRlZFBhdGhbaSArIDFdO1xyXG4gIH1cclxuXHJcbiAgbGV0IGN1cnJlbnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnkpOyAvLyBnZXQgY3VycmVudE5vZGVcclxuICB1bml0LnNldEN1cnJlbnROb2RlKGN1cnJlbnROb2RlKTsgLy8gc2V0IGN1cnJlbnROb2RlXHJcbiAgdW5pdC5zZXROZXh0Tm9kZShub2RlKTsgLy8gc2V0IG5leHROb2RlXHJcbiAgaWYoaSA+PSB1cGRhdGVkUGF0aC5sZW5ndGgpIHtcclxuICAgIHN0b3BNb3ZpbmcodW5pdCwgY3VycmVudE5vZGUpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gYWxseSB1bml0IGlzIG9uIHRoZSBkZXN0aW5hdGlvbiBwb3NpdGlvblxyXG4gIC8vIGN1cnJlbnRVbml0IHNob3VsZCBzdG9wIG1vdmluZ1xyXG4gIGlmKGFub3RoZXJVbml0SXNPblRoZVdheSh1bml0KSAmJiBpID09PSB1cGRhdGVkUGF0aC5sZW5ndGggLSAxKSB7XHJcbiAgICBpZihnZXRCbG9ja2VkRW5lbWllcyh1bml0KS5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHN0b3BNb3ZpbmcodW5pdCwgY3VycmVudE5vZGUpO1xyXG4gICAgICB1bml0LnNldFVuaXRUb1B1cnN1ZVRvTnVsbCgpO1xyXG4gICAgICBkcmF3VW5pdEljb24odW5pdCk7XHJcbiAgICAgIGZvcihsZXQgZW5lbXkgb2YgZ2V0QmxvY2tlZEVuZW1pZXModW5pdCkpIHtcclxuICAgICAgICB1bml0LmFzc2lnbkVuZW15KGVuZW15KTtcclxuICAgICAgICBlbmVteS5hc3NpZ25FbmVteSh1bml0KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmVycm9yKCdhbm90aGVyIHVuaXQgb2NjdXB5aW5nIGRlc3RpbmF0aW9uIHBvc2l0aW9uJyk7XHJcbiAgICB1bml0LmFzc2lnbk1vdmVUb1Bvc2l0aW9uKHVuaXQueCwgdW5pdC55KTtcclxuICAgIHN0b3BNb3ZpbmcodW5pdCwgY3VycmVudE5vZGUpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZihhbm90aGVyVW5pdElzT25UaGVXYXkodW5pdCkpIHtcclxuICAgIGNvbnNvbGUubG9nKCdhbm90aGVyIHVuaXQgaXMgb24gdGhlIHdheScpO1xyXG4gICAgLy8gdW5pdCBoYXMgYW5vdGhlciBhbGxpZXMnIHVuaXQgb24gaXRzIHdheVxyXG4gICAgaWYoZ2V0QmxvY2tlZEVuZW1pZXModW5pdCkubGVuZ3RoID4gMCkgeyAvLyB1bml0IGlzIGJsb2NrZWQgYnkgZW5lbXlcclxuICAgICAgc3RvcE1vdmluZyh1bml0LCBjdXJyZW50Tm9kZSk7XHJcbiAgICAgIHVuaXQuc2V0VW5pdFRvUHVyc3VlVG9OdWxsKCk7XHJcbiAgICAgIGRyYXdVbml0SWNvbih1bml0KTtcclxuICAgICAgZm9yKGxldCBlbmVteSBvZiBnZXRCbG9ja2VkRW5lbWllcyh1bml0KSkge1xyXG4gICAgICAgIHVuaXQuYXNzaWduRW5lbXkoZW5lbXkpO1xyXG4gICAgICAgIGVuZW15LmFzc2lnbkVuZW15KHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0gXHJcbiAgICBjb25zdCBwZXJtaXNzaW9uOmJvb2xlYW4gPSB1bml0Q2FuTW92ZVRvVGhlTm9kZShuZXh0Tm9kZSwgdW5pdCk7XHJcbiAgICBpZighcGVybWlzc2lvbikge1xyXG4gICAgICBzdG9wTW92aW5nKHVuaXQsIGN1cnJlbnROb2RlKTtcclxuICAgICAgbGV0IHVwZGF0ZWRNYXAgPSBPYmplY3QuYXNzaWduKFtdLCBpbml0aWFsTWFwKTtcclxuICAgICAgbGV0IGJsb2NrZWROb2RlcyA9IGdldFN1cnJvdW5kZWRCbG9ja2VkTm9kZXModW5pdCk7XHJcbiAgICAgIGZvcihsZXQgYmxvY2tlZE5vZGUgb2YgYmxvY2tlZE5vZGVzKSB7XHJcbiAgICAgICAgdXBkYXRlZE1hcCA9IGNyZWF0ZVVuaXRPYnN0YWNsZSh1cGRhdGVkTWFwLCBibG9ja2VkTm9kZS54LCBibG9ja2VkTm9kZS55KTsgLy8gY3JlYXRlIG9ic3RhY2xlIGZvciBjdXJyZW50Tm9kZVxyXG4gICAgICB9XHJcbiAgICAgIGFkZE5laWdoYm9ycyh1cGRhdGVkTWFwKTsgLy8gY3JlYXRlIG5ldyBuZWlnaGJvdXJzIGZvciB1cGRhdGVkIG1hcFxyXG4gICAgICBsZXQgc3RhcnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdC54LCB1bml0LnksIHVwZGF0ZWRNYXApO1xyXG4gICAgICBsZXQgZmluaXNoTm9kZSA9IGdldE5vZGVGcm9tTWFwKGN1cnJlbnRNb3ZlVG9YLCBjdXJyZW50TW92ZVRvWSwgdXBkYXRlZE1hcCk7XHJcblxyXG4gICAgICBsZXQgbmV3UGF0aDphbnkgPSBhU3Rhcih1cGRhdGVkTWFwLCBzdGFydE5vZGUsIGZpbmlzaE5vZGUpO1xyXG4gICAgICB1cGRhdGVVbml0KHVuaXQsIG5ld1BhdGgsIDAsIGN1cnJlbnRNb3ZlVG9YLCBjdXJyZW50TW92ZVRvWSwgbnVsbCwgZmFsc2UsIHRyaWVzICs9IDEpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9IFxyXG4gIH1cclxuXHJcbiAgdW5pdC5zZXRJc01vdmluZ1RvVHJ1ZSgpO1xyXG4gIGRyYXdVbml0SWNvbih1bml0KTtcclxuICBsZXQgbm9kZVRvQ2xlYXIgPSBub2RlO1xyXG4gIHNwb3RFbmVteSh1bml0KTsgLy8gY2hlY2sgZm9yIGVuZW15IHVuaXRzXHJcbiAgaWYoaSAhPT0gMCkge1xyXG4gICAgbm9kZVRvQ2xlYXIgPSB1cGRhdGVkUGF0aFtpIC0gMV07XHJcbiAgfVxyXG4gIHVuaXQuZGVjcmVhc2VDb25kaXRpb24oMSk7IC8vIGRlY3JlYXNlQ29uZGl0aW9uIHdoaWxlIG1vdmluZ1xyXG4gIG1vdmVUb05leHROb2RlSW5VcGRhdGVVbml0KHVuaXQsIG5vZGVUb0NsZWFyLCBub2RlLCBjdXJyZW50TW92ZVRvWCwgY3VycmVudE1vdmVUb1ksIHBhdGgsIGkpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgY29tcHV0ZXJVbml0cyxcclxuICBwbGF5ZXJVbml0c1xyXG59IGZyb20gJy4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG5pbXBvcnQge1xyXG4gIGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5HcmlkcyxcclxuICBkZWxldGVVbml0RnJvbUFycmF5XHJcbn0gZnJvbSAnLi4vZ2VuZXJhbCc7XHJcbmltcG9ydCB7IGdldERpc3RhbmNlQmV0d2VlblVuaXRBbmROb2RlSW5HcmlkcyB9IGZyb20gJy4uLy4uL25vZGUnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDbG9zZXN0VW5pdFRvTm9kZSA9IChub2RlOmFueSk6IFVuaXQgPT4ge1xyXG4gIGxldCBjbG9zZXN0VW5pdDphbnkgPSBjb21wdXRlclVuaXRzWzBdO1xyXG4gIGZvcihsZXQgaSA9IDE7IGkgPCBjb21wdXRlclVuaXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBsZXQgY2xvc2VzdFVuaXREaXN0YW5jZSA9IGdldERpc3RhbmNlQmV0d2VlblVuaXRBbmROb2RlSW5HcmlkcyhjbG9zZXN0VW5pdCwgbm9kZSk7XHJcbiAgICBsZXQgdW5pdERpc3RhbmNlID0gZ2V0RGlzdGFuY2VCZXR3ZWVuVW5pdEFuZE5vZGVJbkdyaWRzKGNvbXB1dGVyVW5pdHNbaV0sIG5vZGUpO1xyXG4gICAgaWYodW5pdERpc3RhbmNlIDwgY2xvc2VzdFVuaXREaXN0YW5jZSkge1xyXG4gICAgICBjbG9zZXN0VW5pdCA9IGNvbXB1dGVyVW5pdHNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjbG9zZXN0VW5pdDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldENsb3Nlc3RVbml0VG9PdGhlclVuaXQgPSAodW5pdDpVbml0LCB1bml0czpVbml0W10gPSBjb21wdXRlclVuaXRzKTphbnkgPT4ge1xyXG4gIGxldCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCBkZWxldGVVbml0RnJvbUFycmF5KHVuaXQsIHVuaXRzKSk7XHJcbiAgaWYodXBkYXRlZENvbXB1dGVyc1VuaXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIHVuaXQ7XHJcbiAgfVxyXG4gIGxldCBjbG9zZXN0VW5pdDphbnkgPSB1cGRhdGVkQ29tcHV0ZXJzVW5pdHNbMF07XHJcbiAgZm9yKGxldCBpID0gMTsgaSA8IHVwZGF0ZWRDb21wdXRlcnNVbml0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgbGV0IGNsb3Nlc3RVbml0RGlzdGFuY2UgPSBnZXREaXN0YW5jZUJldHdlZW5Ud29Vbml0c0luR3JpZHMoY2xvc2VzdFVuaXQsIHVuaXQpO1xyXG4gICAgbGV0IHVuaXREaXN0YW5jZSA9IGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5Hcmlkcyh1cGRhdGVkQ29tcHV0ZXJzVW5pdHNbaV0sIHVuaXQpO1xyXG4gICAgaWYodW5pdERpc3RhbmNlIDwgY2xvc2VzdFVuaXREaXN0YW5jZSkge1xyXG4gICAgICBjbG9zZXN0VW5pdCA9IHVwZGF0ZWRDb21wdXRlcnNVbml0c1tpXTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGNsb3Nlc3RVbml0O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0QmVzdFVuaXRCeVByb3BlcnR5ID0gKHByb3BlcnR5OnN0cmluZywgZXhjbHVzaW9uOmFueVtdID0gW10pOmFueSA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRDb21wdXRlcnNVbml0cyA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gIGlmKGV4Y2x1c2lvbi5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgdW5pdCBvZiBleGNsdXNpb24pIHtcclxuICAgICAgdXBkYXRlZENvbXB1dGVyc1VuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkQ29tcHV0ZXJzVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgbGV0IGJlc3RVbml0ID0gdXBkYXRlZENvbXB1dGVyc1VuaXRzWzBdO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmKGJlc3RVbml0W3Byb3BlcnR5XSA8IHVwZGF0ZWRDb21wdXRlcnNVbml0c1tpXVtwcm9wZXJ0eV0pIHtcclxuICAgICAgYmVzdFVuaXQgPSB1cGRhdGVkQ29tcHV0ZXJzVW5pdHNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBiZXN0VW5pdDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFdvcnN0VW5pdEJ5UHJvcGVydHkgPSAocHJvcGVydHk6c3RyaW5nLCBleGNsdXNpb246YW55W10gPSBbXSk6YW55ID0+IHtcclxuICBsZXQgdXBkYXRlZENvbXB1dGVyc1VuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgY29tcHV0ZXJVbml0cyk7XHJcbiAgaWYoZXhjbHVzaW9uLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgZm9yKGxldCB1bml0IG9mIGV4Y2x1c2lvbikge1xyXG4gICAgICB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMgPSBkZWxldGVVbml0RnJvbUFycmF5KHVuaXQsIHVwZGF0ZWRDb21wdXRlcnNVbml0cyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmKHVwZGF0ZWRDb21wdXRlcnNVbml0cy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBsZXQgd29yc3RVbml0ID0gdXBkYXRlZENvbXB1dGVyc1VuaXRzWzBdO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmKHdvcnN0VW5pdFtwcm9wZXJ0eV0gPiB1cGRhdGVkQ29tcHV0ZXJzVW5pdHNbaV1bcHJvcGVydHldKSB7XHJcbiAgICAgIHdvcnN0VW5pdCA9IHVwZGF0ZWRDb21wdXRlcnNVbml0c1tpXTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHdvcnN0VW5pdDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEJlc3RFbmVteUJ5UHJvcGVydHkgPSAocHJvcGVydHk6c3RyaW5nLCBleGNsdXNpb246YW55W10gPSBbXSk6YW55ID0+IHtcclxuICBsZXQgdXBkYXRlZFBsYXllclVuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgcGxheWVyVW5pdHMpO1xyXG4gIGlmKGV4Y2x1c2lvbi5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgdW5pdCBvZiBleGNsdXNpb24pIHtcclxuICAgICAgdXBkYXRlZFBsYXllclVuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1cGRhdGVkUGxheWVyVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkUGxheWVyVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgbGV0IGJlc3RVbml0ID0gdXBkYXRlZFBsYXllclVuaXRzWzBdO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCB1cGRhdGVkUGxheWVyVW5pdHMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmKGJlc3RVbml0W3Byb3BlcnR5XSA8IHVwZGF0ZWRQbGF5ZXJVbml0c1tpXVtwcm9wZXJ0eV0pIHtcclxuICAgICAgYmVzdFVuaXQgPSB1cGRhdGVkUGxheWVyVW5pdHNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBiZXN0VW5pdDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFdvcnN0RW5lbXlCeVByb3BlcnR5ID0gKHByb3BlcnR5OnN0cmluZywgZXhjbHVzaW9uOlVuaXRbXSA9IFtdKTpVbml0ID0+IHtcclxuICBsZXQgdXBkYXRlZFBsYXllclVuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgcGxheWVyVW5pdHMpO1xyXG4gIGlmKGV4Y2x1c2lvbi5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgdW5pdCBvZiBleGNsdXNpb24pIHtcclxuICAgICAgdXBkYXRlZFBsYXllclVuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1cGRhdGVkUGxheWVyVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkUGxheWVyVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgbGV0IHdvcnN0VW5pdCA9IHVwZGF0ZWRQbGF5ZXJVbml0c1swXTtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgdXBkYXRlZFBsYXllclVuaXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZih3b3JzdFVuaXRbcHJvcGVydHldID4gdXBkYXRlZFBsYXllclVuaXRzW2ldW3Byb3BlcnR5XSkge1xyXG4gICAgICB3b3JzdFVuaXQgPSB1cGRhdGVkUGxheWVyVW5pdHNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB3b3JzdFVuaXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXROb3RGaWdodGluZ1VuaXRzID0gKGV4Y2x1c2lvbjpVbml0W10gPSBbXSk6VW5pdFtdID0+IHtcclxuICBsZXQgdXBkYXRlZENvbXB1dGVyVW5pdHM6VW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgY29tcHV0ZXJVbml0cyk7XHJcbiAgaWYoZXhjbHVzaW9uLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgZm9yKGxldCB1bml0IG9mIGV4Y2x1c2lvbikge1xyXG4gICAgICB1cGRhdGVkQ29tcHV0ZXJVbml0cyA9IGRlbGV0ZVVuaXRGcm9tQXJyYXkodW5pdCwgdXBkYXRlZENvbXB1dGVyVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkQ29tcHV0ZXJVbml0cy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBsZXQgbm90RmlnaHRpbmdVbml0czpVbml0W10gPSBbXTtcclxuICBmb3IobGV0IHVuaXQgb2YgdXBkYXRlZENvbXB1dGVyVW5pdHMpIHtcclxuICAgIGlmKCF1bml0LmlzRmlnaHRpbmcpIHtcclxuICAgICAgbm90RmlnaHRpbmdVbml0cy5wdXNoKHVuaXQpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbm90RmlnaHRpbmdVbml0cztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEZpZ2h0aW5nVW5pdHMgPSAodW5pdHM6IFVuaXRbXSk6IFVuaXRbXSA9PiB7XHJcbiAgbGV0IGZpZ2h0aW5nVW5pdHM6IFVuaXRbXSA9IFtdO1xyXG4gIGZvcihsZXQgdW5pdCBvZiB1bml0cykge1xyXG4gICAgaWYodW5pdC5pc0ZpZ2h0aW5nKSB7XHJcbiAgICAgIGZpZ2h0aW5nVW5pdHMucHVzaCh1bml0KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZpZ2h0aW5nVW5pdHM7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRUb3RhbFVuaXRzSGVhbHRoID0gKHVuaXRzOiBVbml0W10pOiBudW1iZXIgPT4ge1xyXG4gIGxldCB0b3RhbEhlYWx0aDogbnVtYmVyID0gMDtcclxuICBmb3IobGV0IHVuaXQgb2YgdW5pdHMpIHtcclxuICAgIHRvdGFsSGVhbHRoICs9IHVuaXQuaGVhbHRoO1xyXG4gIH1cclxuICByZXR1cm4gdG90YWxIZWFsdGg7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRUb3RhbFVuaXRzSW5pdGlhbEhlYWx0aCA9ICh1bml0czogVW5pdFtdKTogbnVtYmVyID0+IHtcclxuICBsZXQgdG90YWxJbml0aWFsSGVhbHRoOiBudW1iZXIgPSAwO1xyXG4gIGZvcihsZXQgdW5pdCBvZiB1bml0cykge1xyXG4gICAgdG90YWxJbml0aWFsSGVhbHRoICs9IHVuaXQuaGVhbHRoO1xyXG4gIH1cclxuICByZXR1cm4gdG90YWxJbml0aWFsSGVhbHRoO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0Q2xvc2VzdEVuZW15VG9Vbml0ID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGxldCB1cGRhdGVkUGxheWVyVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCBkZWxldGVVbml0RnJvbUFycmF5KHVuaXQsIHBsYXllclVuaXRzKSk7XHJcbiAgaWYodXBkYXRlZFBsYXllclVuaXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIGxldCBjbG9zZXN0VW5pdDphbnkgPSB1cGRhdGVkUGxheWVyVW5pdHNbMF07XHJcbiAgZm9yKGxldCBpID0gMTsgaSA8IHVwZGF0ZWRQbGF5ZXJVbml0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgbGV0IGNsb3Nlc3RVbml0RGlzdGFuY2UgPSBnZXREaXN0YW5jZUJldHdlZW5Ud29Vbml0c0luR3JpZHMoY2xvc2VzdFVuaXQsIHVuaXQpO1xyXG4gICAgbGV0IHVuaXREaXN0YW5jZSA9IGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5Hcmlkcyh1cGRhdGVkUGxheWVyVW5pdHNbaV0sIHVuaXQpO1xyXG4gICAgaWYodW5pdERpc3RhbmNlIDwgY2xvc2VzdFVuaXREaXN0YW5jZSkge1xyXG4gICAgICBjbG9zZXN0VW5pdCA9IHVwZGF0ZWRQbGF5ZXJVbml0c1tpXTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGNsb3Nlc3RVbml0O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RnJlZVVuaXRzID0gKGV4Y2x1c2lvbjpVbml0W10gPSBbXSk6VW5pdFtdID0+IHtcclxuICBsZXQgdXBkYXRlZENvbXB1dGVyc1VuaXRzOlVuaXRbXSA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gIGlmKGV4Y2x1c2lvbi5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgdW5pdCBvZiBleGNsdXNpb24pIHtcclxuICAgICAgdXBkYXRlZENvbXB1dGVyc1VuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkQ29tcHV0ZXJzVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgbGV0IGZyZWVVbml0czpVbml0W10gPSBbXTtcclxuICBmb3IobGV0IHVuaXQgb2YgdXBkYXRlZENvbXB1dGVyc1VuaXRzKSB7XHJcbiAgICBpZighdW5pdC50YXNrKSB7XHJcbiAgICAgIGZyZWVVbml0cy5wdXNoKHVuaXQpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZnJlZVVuaXRzO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VW5pdHNCeVRhc2sgPSAodGFzazpzdHJpbmcsIGV4Y2x1c2lvbjpVbml0W10gPSBbXSk6VW5pdFtdID0+IHtcclxuICBsZXQgdXBkYXRlZENvbXB1dGVyc1VuaXRzOlVuaXRbXSA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gIGlmKGV4Y2x1c2lvbi5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgdW5pdCBvZiBleGNsdXNpb24pIHtcclxuICAgICAgdXBkYXRlZENvbXB1dGVyc1VuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkQ29tcHV0ZXJzVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgbGV0IHVuaXRzOlVuaXRbXSA9IFtdO1xyXG4gIGZvcihsZXQgdW5pdCBvZiB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMpIHtcclxuICAgIGlmKHVuaXQudGFzayA9PT0gdGFzaykge1xyXG4gICAgICB1bml0cy5wdXNoKHVuaXQpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdW5pdHM7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRVbml0c0J5UHJvcGVydHlWYWx1ZSA9IChwcm9wZXJ0eTpzdHJpbmcsIHZhbHVlOmFueSwgZXhjbHVzaW9uOlVuaXRbXT1bXSk6VW5pdFtdID0+IHtcclxuICBsZXQgdXBkYXRlZENvbXB1dGVyc1VuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgY29tcHV0ZXJVbml0cyk7XHJcbiAgaWYoZXhjbHVzaW9uLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgZm9yKGxldCB1bml0IG9mIGV4Y2x1c2lvbikge1xyXG4gICAgICB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMgPSBkZWxldGVVbml0RnJvbUFycmF5KHVuaXQsIHVwZGF0ZWRDb21wdXRlcnNVbml0cyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmKHVwZGF0ZWRDb21wdXRlcnNVbml0cy5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBsZXQgdW5pdHM6VW5pdFtdID0gW107XHJcbiAgZm9yKGxldCB1bml0IG9mIHVwZGF0ZWRDb21wdXRlcnNVbml0cykge1xyXG4gICAgaWYodW5pdFtwcm9wZXJ0eV0gPT09IHZhbHVlKSB7XHJcbiAgICAgIHVuaXRzLnB1c2godW5pdCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1bml0cztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFVuaXRzV2hlcmVWYWx1ZSA9IChwcm9wZXJ0eTpzdHJpbmcsIG9wZXJhdG9yOnN0cmluZywgdmFsdWU6YW55LCBleGNsdXNpb246VW5pdFtdID0gW10pOlVuaXRbXSA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRDb21wdXRlcnNVbml0cyA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gIGlmKGV4Y2x1c2lvbi5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgdW5pdCBvZiBleGNsdXNpb24pIHtcclxuICAgICAgdXBkYXRlZENvbXB1dGVyc1VuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCB1cGRhdGVkQ29tcHV0ZXJzVW5pdHMpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZih1cGRhdGVkQ29tcHV0ZXJzVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGxldCB1bml0czpVbml0W10gPSBbXTtcclxuICBmb3IobGV0IHVuaXQgb2YgdXBkYXRlZENvbXB1dGVyc1VuaXRzKSB7XHJcbiAgICBvcGVyYXRvci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYob3BlcmF0b3IgPT09ICc9JyB8fCBvcGVyYXRvciA9PT0gJ2VxdWFsJyB8fCBvcGVyYXRvciA9PT0gJz09JyB8fCBvcGVyYXRvciA9PT0gJz09PScpIHtcclxuICAgICAgaWYodW5pdFtwcm9wZXJ0eV0gPT0gdmFsdWUpIHtcclxuICAgICAgICB1bml0cy5wdXNoKHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKG9wZXJhdG9yID09PSAnPicgfHwgb3BlcmF0b3IgPT09ICdncmVhdGVyJykge1xyXG4gICAgICBpZih1bml0W3Byb3BlcnR5XSA+IHZhbHVlKSB7XHJcbiAgICAgICAgdW5pdHMucHVzaCh1bml0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZihvcGVyYXRvciA9PT0gJz49JyB8fCBvcGVyYXRvciA9PT0gJz49PScgfHwgb3BlcmF0b3IgPT09ICdncmVhdGVyT3JFcXVhbCcpIHtcclxuICAgICAgaWYodW5pdFtwcm9wZXJ0eV0gPj0gdmFsdWUpIHtcclxuICAgICAgICB1bml0cy5wdXNoKHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKG9wZXJhdG9yID09PSAnPCcgfHwgb3BlcmF0b3IgPT09ICdsZXNzJykge1xyXG4gICAgICBpZih1bml0W3Byb3BlcnR5XSA8IHZhbHVlKSB7XHJcbiAgICAgICAgdW5pdHMucHVzaCh1bml0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZihvcGVyYXRvciA9PT0gJzw9JyB8fCBvcGVyYXRvciA9PT0gJzw9PScgfHwgb3BlcmF0b3IgPT09ICdsZXNzT3JFcXVhbCcpIHtcclxuICAgICAgaWYodW5pdFtwcm9wZXJ0eV0gPD0gdmFsdWUpIHtcclxuICAgICAgICB1bml0cy5wdXNoKHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1bml0cztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldERhbmdlcm91c1VuaXRzID0gKHVuaXQ6IFVuaXQpOiBVbml0W10gPT4ge1xyXG4gIGxldCBlbmVtaWVzOiBVbml0W10gPSBbXTtcclxuICBsZXQgZGFuZ2Vyb3VzRW5lbWllczogVW5pdFtdID0gW107XHJcbiAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBwbGF5ZXJVbml0cyk7XHJcbiAgfSBcclxuICBlbHNlIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgZW5lbWllcyA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gIH1cclxuXHJcbiAgZm9yKGxldCBlbmVteSBvZiBlbmVtaWVzKSB7XHJcbiAgICBmb3IobGV0IGRhbmdlcm91c0VuZW15IG9mIHVuaXQudnVsbmVyYWJsZUFnYWluc3QpIHtcclxuICAgICAgaWYoZW5lbXkubmFtZSA9PSBkYW5nZXJvdXNFbmVteSkge1xyXG4gICAgICAgIGRhbmdlcm91c0VuZW1pZXMucHVzaChlbmVteSk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIGRhbmdlcm91c0VuZW1pZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjb250YWluc0Rhbmdlcm91c1VuaXRzID0gKHVuaXQ6IFVuaXQsIHVuaXRzOiBVbml0W10pOiBib29sZWFuID0+IHtcclxuICBmb3IobGV0IGVuZW15IG9mIHVuaXRzKSB7XHJcbiAgICBmb3IobGV0IGRhbmdlcm91c0VuZW15IG9mIHVuaXQudnVsbmVyYWJsZUFnYWluc3QpIHtcclxuICAgICAgaWYoZW5lbXkubmFtZSA9PSBkYW5nZXJvdXNFbmVteSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzRW5lbXlEYW5nZXJvdXNGb3JVbml0ID0gKHVuaXQ6IFVuaXQsIGVuZW15OiBVbml0KSA9PiB7XHJcbiAgZm9yKGxldCBkYW5nZXJvdXNFbmVteSBvZiB1bml0LnZ1bG5lcmFibGVBZ2FpbnN0KSB7XHJcbiAgICBpZihlbmVteS5uYW1lID09IGRhbmdlcm91c0VuZW15KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0VuZW15VnVsbmVyYWJsZVRvVW5pdCA9ICh1bml0OiBVbml0LCBlbmVteTogVW5pdCkgPT4ge1xyXG4gIGZvcihsZXQgdnVsbmVyYWJsZUVuZW15IG9mIHVuaXQuYWR2YW50YWdlT3Zlcikge1xyXG4gICAgaWYoZW5lbXkubmFtZSA9PSB2dWxuZXJhYmxlRW5lbXkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFNjb3V0c051bWJlciA9ICgpOm51bWJlciA9PiB7XHJcbiAgZm9yKGxldCB1bml0IG9mIGNvbXB1dGVyVW5pdHMpIHtcclxuICAgICAgbGV0IHNjb3V0czpVbml0W10gPSBnZXRVbml0c0J5VGFzaygnZXhwbG9yYXRpb24nKTtcclxuICAgICAgcmV0dXJuIHNjb3V0cy5sZW5ndGg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaXNVbml0c0NoYW5nZWQgPSAoY3VycmVudFVuaXRzOiBVbml0W10sIHByZXZpb3VzVW5pdHM6IFVuaXRbXSk6IGJvb2xlYW4gPT4ge1xyXG4gIGNvbnN0IGNvbXBhcmUgPSAodW5pdDE6IFVuaXQsIHVuaXQyOiBVbml0KSA9PiB7XHJcbiAgICBpZiAodW5pdDEuaWQgPCB1bml0Mi5pZClcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgaWYgKHVuaXQxLmlkID4gdW5pdDIuaWQpXHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG4gIGlmKGN1cnJlbnRVbml0cy5sZW5ndGggIT0gcHJldmlvdXNVbml0cy5sZW5ndGgpIHJldHVybiB0cnVlO1xyXG4gIGxldCB1cGRhdGVkQ3VycmVudFVuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgY3VycmVudFVuaXRzKTtcclxuICBsZXQgdXBkYXRlZFByZXZpb3VzVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCBwcmV2aW91c1VuaXRzKVxyXG4gIHVwZGF0ZWRDdXJyZW50VW5pdHMuc29ydChjb21wYXJlKTtcclxuICB1cGRhdGVkUHJldmlvdXNVbml0cy5zb3J0KGNvbXBhcmUpO1xyXG5cclxuICBmb3IobGV0IGkgPSAwOyBpIDwgdXBkYXRlZEN1cnJlbnRVbml0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgaWYodXBkYXRlZEN1cnJlbnRVbml0c1tpXSAhPSB1cGRhdGVkUHJldmlvdXNVbml0c1tpXSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCd1bml0cyBjaGFuZ2VkJyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgICBjb21wdXRlclVuaXRzLFxyXG4gICAgcGxheWVyVW5pdHNcclxuICB9IGZyb20gJy4uLy4uL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG4gIGltcG9ydCB7Z2V0U3Vycm91bmRlZE5vZGVzfSBmcm9tICcuL2dldFN1cnJvdW5kZWROb2Rlcyc7XHJcbiAgaW1wb3J0IHtnZXROb2RlRnJvbU1hcH0gZnJvbSAnLi4vbm9kZS9nZXQvZnJvbU1hcCc7XHJcbiAgaW1wb3J0IHtkZWxldGVVbml0RnJvbUFycmF5LCBpc1VuaXRJbkFycmF5fSBmcm9tICcuLi91bml0L2dlbmVyYWwnO1xyXG4gIGltcG9ydCBVbml0IGZyb20gJy4uLy4uL3VuaXQvdHlwZXMvVW5pdCc7XHJcbiAgXHJcbiAgZXhwb3J0IGNvbnN0IGdldFN1cnJvdW5kZWRVbml0cyA9IChcclxuICAgICAgdW5pdDogVW5pdCwgXHJcbiAgICAgIHVuaXRzOiBVbml0W10sIFxyXG4gICAgICByYW5nZTogbnVtYmVyID0gMywgXHJcbiAgICAgIGNvdW50T25lc2VsZjogYm9vbGVhbiA9IGZhbHNlXHJcbiAgICApOiBVbml0W10gPT4ge1xyXG4gICAgbGV0IHN1cnJvdW5kZWRVbml0czpVbml0W10gPSBbXTtcclxuICAgIGxldCB1cGRhdGVkVW5pdHM6VW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gICAgXHJcbiAgICBpZighY291bnRPbmVzZWxmICYmIGlzVW5pdEluQXJyYXkodW5pdCwgdXBkYXRlZFVuaXRzKSkge1xyXG4gICAgICAgIHVwZGF0ZWRVbml0cyA9IGRlbGV0ZVVuaXRGcm9tQXJyYXkodW5pdCwgdXBkYXRlZFVuaXRzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgbGV0IG5vZGVzID0gZ2V0U3Vycm91bmRlZE5vZGVzKHVuaXQsIHJhbmdlKTtcclxuICAgIGZvcihsZXQgbm9kZSBvZiBub2Rlcykge1xyXG4gICAgICBmb3IobGV0IGN1cnJlbnRVbml0IG9mIHVwZGF0ZWRVbml0cykge1xyXG4gICAgICAgIGxldCBjdXJyZW50VW5pdE5vZGUgPSBnZXROb2RlRnJvbU1hcChjdXJyZW50VW5pdC54LCBjdXJyZW50VW5pdC55KTtcclxuICAgICAgICBpZihub2RlLnggPT09IGN1cnJlbnRVbml0Tm9kZS54ICYmIG5vZGUueSA9PT0gY3VycmVudFVuaXROb2RlLnkpIHtcclxuICAgICAgICAgIHN1cnJvdW5kZWRVbml0cy5wdXNoKGN1cnJlbnRVbml0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzdXJyb3VuZGVkVW5pdHM7XHJcbiAgfSIsImltcG9ydCB7IGRlZmF1bHRVbml0cyB9IGZyb20gJy4uL3VuaXQvZGVmYXVsdFVuaXRzJztcclxuXHJcbmV4cG9ydCBsZXQgcm9zdGVyOiBhbnlbXSA9IFtdO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZVJvc3RlciA9ICgpID0+IHtcclxuICBmb3IobGV0IHVuaXQgb2YgZGVmYXVsdFVuaXRzKSB7XHJcbiAgICByb3N0ZXIucHVzaCh1bml0KTtcclxuICB9XHJcblxyXG4gIGZvcihsZXQgdW5pdCBvZiByb3N0ZXIpIHtcclxuICAgIHVuaXQuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcblxyXG4iLCJleHBvcnQgbGV0IHRvdGFsR29sZDpudW1iZXIgPSA0MDA7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0VG90YWxHb2xkID0gKGdvbGQ6bnVtYmVyKSA9PiB7XHJcbiAgdG90YWxHb2xkID0gZ29sZDtcclxufVxyXG4iLCJleHBvcnQgbGV0IHNob3dCYXR0bGVTZXR0aW5nczpib29sZWFuID0gdHJ1ZTtcclxuZXhwb3J0IGxldCBzaG93VW5pdEluZm86Ym9vbGVhbiA9IGZhbHNlO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNoYW5nZUJhdHRsZVNldHRpbmdzVG9UcnVlID0gKCkgPT4ge1xyXG4gIHNob3dCYXR0bGVTZXR0aW5ncyA9IHRydWU7XHJcbiAgc2hvd1VuaXRJbmZvID0gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VVbml0SW5mb1RvVHJ1ZSA9ICgpID0+IHtcclxuICBzaG93QmF0dGxlU2V0dGluZ3MgPSBmYWxzZTtcclxuICBzaG93VW5pdEluZm8gPSB0cnVlO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZGlzcGxheUFybXlcclxufSBmcm9tICcuL2FybXknO1xyXG5pbXBvcnQge1xyXG4gIGRyYXdSZW1vdmVJY29uXHJcbn0gZnJvbSAnLi9pY29uJztcclxuaW1wb3J0IHtcclxuICBpc1VuaXRTaG91bGRCZVJlbW92ZWRcclxufSBmcm9tICcuL3JlbW92ZSc7XHJcbmltcG9ydCB7XHJcbiAgYXJteUltZ1dpZHRoLFxyXG4gIGFybXlJbWdIZWlnaHRcclxufSBmcm9tICcuL2FybXlTZXR0aW5ncyc7XHJcbmltcG9ydCB7XHJcbiAgZGlzcGxheUNob3NlblVuaXRzLFxyXG4gIGRpc3BsYXlDaG9zZW5Vbml0c1RpdGxlLFxyXG4gIG9uQ2hvb3NlVW5pdEluQXJteVxyXG59IGZyb20gJy4vdW5pdCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRpc3BsYXlBcm15LFxyXG4gIGRyYXdSZW1vdmVJY29uLFxyXG4gIGlzVW5pdFNob3VsZEJlUmVtb3ZlZCxcclxuICBhcm15SW1nV2lkdGgsXHJcbiAgYXJteUltZ0hlaWdodCxcclxuICBkaXNwbGF5Q2hvc2VuVW5pdHMsXHJcbiAgZGlzcGxheUNob3NlblVuaXRzVGl0bGUsXHJcbiAgb25DaG9vc2VVbml0SW5Bcm15XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkaXNwbGF5Q29tcHV0ZXJcclxufSBmcm9tICcuL2NvbXB1dGVyJztcclxuaW1wb3J0IHtcclxuICBkaXNwbGF5UGxheWVyXHJcbn0gZnJvbSAnLi9wbGF5ZXInO1xyXG5pbXBvcnQge1xyXG4gIGRpc3BsYXlSZW1haW5Hb2xkXHJcbn0gZnJvbSAnLi9yZW1haW5Hb2xkJztcclxuaW1wb3J0IHtcclxuICBkaXNwbGF5VGl0bGVcclxufSBmcm9tICcuL3RpdGxlJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZGlzcGxheUNvbXB1dGVyLFxyXG4gIGRpc3BsYXlQbGF5ZXIsXHJcbiAgZGlzcGxheVJlbWFpbkdvbGQsXHJcbiAgZGlzcGxheVRpdGxlXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBNQVBfSEVJR0hULFxyXG4gIE1BUF9XSURUSCxcclxuICBDQU5WQVNfSEVJR0hUXHJcbn0gZnJvbSAnLi9tYXAnO1xyXG5pbXBvcnQge2dyaWRTaXplfSBmcm9tICcuL2dyaWRTaXplJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZ3JpZFNpemUsXHJcbiAgTUFQX0hFSUdIVCxcclxuICBNQVBfV0lEVEgsXHJcbiAgQ0FOVkFTX0hFSUdIVFxyXG59XHJcbiIsImV4cG9ydCBsZXQgYmF0dGxlTW9kZTpib29sZWFuID0gZmFsc2U7XHJcbmV4cG9ydCBsZXQgYmF0dGxlRmluaXNoOmJvb2xlYW4gPSBmYWxzZTtcclxuZXhwb3J0IGxldCBtYWluTWVudU1vZGU6Ym9vbGVhbiA9IHRydWU7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0QmF0dGxlTW9kZSA9ICgpID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICBtYWluTWVudU1vZGUgPSBmYWxzZTtcclxuICAgIGJhdHRsZU1vZGUgPSB0cnVlO1xyXG4gICAgcmVzb2x2ZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0TWFpbk1lbnVNb2RlID0gKCkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIG1haW5NZW51TW9kZSA9IGZhbHNlO1xyXG4gICAgYmF0dGxlTW9kZSA9IHRydWU7XHJcbiAgICByZXNvbHZlKCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmaW5pc2hCYXR0bGUgPSAoKSA9PiB7XHJcbiAgYmF0dGxlRmluaXNoID0gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIE1BUF9XSURUSCxcclxuICBDQU5WQVNfSEVJR0hUXHJcbn0gZnJvbSAnLi4nO1xyXG4gIFxyXG5leHBvcnQgY29uc3QgcGF0aENhbnZhczphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGF0aENhbnZhcycpO1xyXG5cclxuaWYocGF0aENhbnZhcykge1xyXG4gIHBhdGhDYW52YXMud2lkdGggPSBNQVBfV0lEVEg7XHJcbiAgcGF0aENhbnZhcy5oZWlnaHQgPSBDQU5WQVNfSEVJR0hUO1xyXG59IiwiaW1wb3J0IHtcclxuICAgIE1BUF9XSURUSCxcclxuICAgIENBTlZBU19IRUlHSFRcclxufSBmcm9tICcuLic7XHJcbiAgXHJcbmV4cG9ydCBjb25zdCBldmVudENhbnZhczphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXZlbnRDYW52YXMnKTtcclxuXHJcbmlmKGV2ZW50Q2FudmFzKSB7XHJcbiAgICBldmVudENhbnZhcy53aWR0aCA9IE1BUF9XSURUSDtcclxuICAgIGV2ZW50Q2FudmFzLmhlaWdodCA9IENBTlZBU19IRUlHSFQ7XHJcbn0iLCJleHBvcnQgbGV0IHVuaXRJZDpudW1iZXIgPSAwO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluY1VuaXRJZCA9ICgpID0+IHtcclxuICB1bml0SWQrKztcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNhbGN1bGF0ZURhbWFnZSxcclxuICBjYWxjdWxhdGVEYW1hZ2VCYXNlT25FbmVteVBvc2l0aW9uLFxyXG4gIGNhbGN1bGF0ZURhbWFnZVdoZW5JdHNMZXNzVGhhbk9uZVxyXG59IGZyb20gJy4vZGFtYWdlJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgY2FsY3VsYXRlRGFtYWdlLFxyXG4gIGNhbGN1bGF0ZURhbWFnZUJhc2VPbkVuZW15UG9zaXRpb24sXHJcbiAgY2FsY3VsYXRlRGFtYWdlV2hlbkl0c0xlc3NUaGFuT25lXHJcbn1cclxuIiwiaW1wb3J0IHthU3Rhcn0gZnJvbSAnLi9hU3Rhci9BU3Rhcic7XHJcbmltcG9ydCB7ZHJhd1BhdGh9IGZyb20gJy4vZHJhdy9kcmF3UGF0aCc7XHJcbmltcG9ydCB7ZmluZFBhdGhGcm9tT25lTm9kZVRvQW5vdGhlcn0gZnJvbSAnLi9maW5kL2ZpbmRQYXRoJztcclxuaW1wb3J0IHtcclxuICBnZXRNaW5GU2NvcmUsXHJcbiAgdW5jbG9zZWROZWlnYm9ycyxcclxuICBpc09iamVjdEluTWFwS2V5c1xyXG59IGZyb20gJy4vYVN0YXIvYVN0YXJVdGlscyc7XHJcblxyXG5leHBvcnQge1xyXG4gIGFTdGFyLFxyXG4gIGRyYXdQYXRoLFxyXG4gIGZpbmRQYXRoRnJvbU9uZU5vZGVUb0Fub3RoZXIsXHJcbiAgZ2V0TWluRlNjb3JlLFxyXG4gIHVuY2xvc2VkTmVpZ2JvcnMsXHJcbiAgaXNPYmplY3RJbk1hcEtleXNcclxufVxyXG4iLCJpbXBvcnQge25laWdoYm9yc30gZnJvbSAnLi4vLi4vbWFwJztcclxuaW1wb3J0IHtcclxuICBkZWxldGVPYmplY3RGcm9tQXJyYXksXHJcbiAgaXNPYmplY3RJbkFycmF5XHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5cclxuaW1wb3J0IHtcclxuICBnZXRNaW5GU2NvcmUsXHJcbiAgdW5jbG9zZWROZWlnYm9ycyxcclxuICBpc09iamVjdEluTWFwS2V5cyxcclxuICBnZXROZWlnaGJvckRpc3RhbmNlXHJcbn0gZnJvbSAnLi9hU3RhclV0aWxzJztcclxuaW1wb3J0IE1hcE5vZGUgZnJvbSAnLi4vLi4vbWFwL25vZGVzL01hcE5vZGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFTdGFyID0gKG1hcDogTWFwTm9kZVtdLCBzdGFydE5vZGU6YW55LCBmaW5pc2hOb2RlOmFueSkgPT4ge1xyXG4gIC8vIHRoZSBzZXQgb2YgY3VycmVudGx5IGRpc2NvdmVyZWQgbm9kZXMgdGhhdCBhcmUgbm90IGV2YWx1YXRlZCB5ZXRcclxuICAvLyBJbml0aWFsbHkgb25seSB0aGUgc3RhcnQgbm9kZSBpcyBrbm93blxyXG4gIGxldCB1cGRhdGVkTWFwID0gT2JqZWN0LmFzc2lnbihbXSwgbWFwKTtcclxuICBpZighc3RhcnROb2RlIHx8ICFmaW5pc2hOb2RlKSByZXR1cm47XHJcbiAgbGV0IG9wZW46YW55W10gPSBbXTtcclxuXHJcbiAgLy8gdGhlIHNldCBvZiBub2RlcyB0aGF0IGFscmVhZHkgZXZhbHVhdGVkXHJcbiAgbGV0IGNsb3NlZDphbnlbXSA9IFtdO1xyXG4gIHN0YXJ0Tm9kZS5nU2NvcmUgPSAwO1xyXG4gIHN0YXJ0Tm9kZS5mU2NvcmUgPSBzdGFydE5vZGUuZ1Njb3JlICsgaChzdGFydE5vZGUsIGZpbmlzaE5vZGUpXHJcbiAgb3Blbi5wdXNoKHN0YXJ0Tm9kZSk7XHJcblxyXG4gIC8vIGZvciBlYWNoIG5vZGUsIHdoaWNoIG5vZGUgaXMgY2FuIG1vc3QgZWZmaWNpZW50bHkgYmUgcmVhY2hlZCBmcm9tXHJcbiAgLy8gaWYgYSBub2RlIGNhbiBiZSByZWFjaGVkIGZyb20gbWFueSBub2RlcywgY2FtZUZyb20gd2lsbCBldmVudGlhbGx5XHJcbiAgLy8gY29udGFpbiB0aGUgbW9zdCBlZmZpY2llbnQgcHJldmlvdXMgc3RlcFxyXG4gIGxldCBmcm9tID0gbmV3IE1hcCgpO1xyXG4gIC8vIEZvciBlYWNoIG5vZGUsIHRoZSBjb3N0IG9mIGdldHRpbmcgZnJvbSB0aGUgc3RhcnQgbm9kZSB0byB0aGF0IG5vZGUuXHJcbiAgd2hpbGUob3Blbikge1xyXG4gICAgbGV0IGN1cnJlbnQ6YW55ID0gZ2V0TWluRlNjb3JlKG9wZW4pO1xyXG4gICAgaWYoIWN1cnJlbnQpIHJldHVybjtcclxuICAgIGlmKGN1cnJlbnQueCA9PT0gZmluaXNoTm9kZS54ICYmIGN1cnJlbnQueSA9PT0gZmluaXNoTm9kZS55KSB7XHJcbiAgICAgIC8vIGN1cnJlbnROb2RlIGlzIGEgZ29hbFxyXG4gICAgICByZXR1cm4gcmVjb25zdHJ1Y3RQYXRoKGZyb20sIGN1cnJlbnQpO1xyXG4gICAgfVxyXG4gICAgb3BlbiA9IGRlbGV0ZU9iamVjdEZyb21BcnJheShjdXJyZW50LCBvcGVuKTtcclxuICAgIGNsb3NlZC5wdXNoKGN1cnJlbnQpO1xyXG4gICAgZm9yKGxldCBuZWlnaGJvciBvZiB1bmNsb3NlZE5laWdib3JzKGN1cnJlbnQsIGNsb3NlZCkpIHtcclxuICAgICAgbGV0IGRpc3RhbmNlID0gZ2V0TmVpZ2hib3JEaXN0YW5jZShjdXJyZW50LCBuZWlnaGJvcik7XHJcbiAgICAgIGxldCB0ZW1wRyA9IGN1cnJlbnQuZ1Njb3JlICsgZGlzdGFuY2U7XHJcbiAgICAgIGlmKCFpc09iamVjdEluQXJyYXkobmVpZ2hib3IsIG9wZW4pIHx8IHRlbXBHIDwgbmVpZ2hib3IuZ1Njb3JlKSB7XHJcbiAgICAgICAgZnJvbS5zZXQobmVpZ2hib3IsIGN1cnJlbnQpO1xyXG4gICAgICAgIGlmKCFuZWlnaGJvcikgcmV0dXJuO1xyXG4gICAgICAgIG5laWdoYm9yLmdTY29yZSA9IHRlbXBHO1xyXG4gICAgICAgIG5laWdoYm9yLmZTY29yZSA9IG5laWdoYm9yLmdTY29yZSArIGgobmVpZ2hib3IsIGZpbmlzaE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKCFpc09iamVjdEluQXJyYXkobmVpZ2hib3IsIG9wZW4pKSB7IC8vIGNyZWF0ZSBmdW5jdGlvblxyXG4gICAgICAgIGxldCBub2RlTmVpZ2hib3JzID0gbmVpZ2hib3JzKHVwZGF0ZWRNYXAsIG5laWdoYm9yKTtcclxuICAgICAgICBuZWlnaGJvci5uZWlnaGJvcnMgPSBub2RlTmVpZ2hib3JzO1xyXG4gICAgICAgIG9wZW4ucHVzaChuZWlnaGJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIDA7IC8vIGZhaWx1cmVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGggPSAoc3RhcnROb2RlOmFueSwgZmluaXNoTm9kZTphbnkpID0+IHtcclxuLy9mdW5jdGlvbiBoZXVyaXN0aWMobm9kZSkgPVxyXG4gIC8vIGR4ID0gYWJzKG5vZGUueCAtIGdvYWwueClcclxuICAvLyBkeSA9IGFicyhub2RlLnkgLSBnb2FsLnkpXHJcbiAgLy8gcmV0dXJuIEQgKiAoZHggKyBkeSkgKyAoRDIgLSAyICogRCkgKiBtaW4oZHgsIGR5KVxyXG4gIGxldCBEID0gMTA7IC8vIGNvc3Qgb2YgbW92aW5nIGhvcml6b250YWxseVxyXG4gIGxldCBEMiA9IDE0OyAvLyBjb3N0IG9mIG1vdmluZyBkaWFnb25hbGx5XHJcbiAgbGV0IGR4ID0gTWF0aC5hYnMoc3RhcnROb2RlLnggLSBmaW5pc2hOb2RlLngpO1xyXG4gIGxldCBkeSA9IE1hdGguYWJzKHN0YXJ0Tm9kZS55IC0gZmluaXNoTm9kZS55KTtcclxuICByZXR1cm4gRCAqIChkeCArIGR5KSArIChEMiAtIDIgKiBEKSAqIE1hdGgubWluKGR4LCBkeSk7XHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IHJlY29uc3RydWN0UGF0aCA9IChmcm9tOmFueSwgY3VycmVudDphbnkpID0+IHtcclxuICAvLyBmdW5jdGlvbiByZWNvbnN0cnVjdF9wYXRoKGNhbWVGcm9tLCBjdXJyZW50KVxyXG4gIC8vICAgdG90YWxfcGF0aCA6PSBbY3VycmVudF1cclxuICAvLyAgIHdoaWxlIGN1cnJlbnQgaW4gY2FtZUZyb20uS2V5czpcclxuICAvLyAgICAgICBjdXJyZW50IDo9IGNhbWVGcm9tW2N1cnJlbnRdXHJcbiAgLy8gICAgICAgdG90YWxfcGF0aC5hcHBlbmQoY3VycmVudClcclxuICAvLyAgIHJldHVybiB0b3RhbF9wYXRoXHJcbiAgbGV0IHJldmVyc2VQYXRoOmFueVtdID0gW2N1cnJlbnRdO1xyXG4gIGxldCB0b3RhbFBhdGg6YW55W10gPSBbXTtcclxuICB3aGlsZShpc09iamVjdEluTWFwS2V5cyhjdXJyZW50LCBmcm9tKSkge1xyXG4gICAgY3VycmVudCA9IGZyb20uZ2V0KGN1cnJlbnQpO1xyXG4gICAgcmV2ZXJzZVBhdGgucHVzaChjdXJyZW50KTtcclxuICB9XHJcbiAgZm9yKGxldCBpID0gcmV2ZXJzZVBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgIHRvdGFsUGF0aC5wdXNoKHJldmVyc2VQYXRoW2ldKTtcclxuICB9XHJcbiAgcmV0dXJuIHRvdGFsUGF0aDtcclxufVxyXG4iLCJpbXBvcnQgVW5pdCBmcm9tICcuLi8uLi90eXBlcy9Vbml0JztcclxuaW1wb3J0IHtnZXROb2RlRnJvbU1hcH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbm9kZS9nZXQvZnJvbU1hcCc7XHJcbmltcG9ydCB7aW5pdGlhbE1hcH0gZnJvbSAnLi4vLi4vLi4vbWFwL2NyZWF0ZU1hcC9pbml0aWFsTWFwJztcclxuaW1wb3J0IHt1cGRhdGVVbml0fSBmcm9tICcuL3VwZGF0ZVVuaXQnO1xyXG5pbXBvcnQge2FTdGFyfSBmcm9tICcuLi8uLi8uLi9wYXRoL2FTdGFyL0FTdGFyJztcclxuXHJcbmV4cG9ydCBjb25zdCBtb3ZlVG8gPSAodW5pdDpVbml0LCBtb3ZlVG9YOm51bWJlciwgbW92ZVRvWTpudW1iZXIpOnZvaWQgPT4ge1xyXG4gIGlmKHVuaXQuaXNNb3ZpbmcpIHtcclxuICAgIHVuaXQuc2V0VW5pdFRvUHVyc3VlKG51bGwpO1xyXG4gICAgbGV0IGZpbmlzaE5vZGUgPSBnZXROb2RlRnJvbU1hcChtb3ZlVG9YLCBtb3ZlVG9ZKTtcclxuICAgIHVuaXQuYXNzaWduTW92ZVRvUG9zaXRpb24oZmluaXNoTm9kZS54LCBmaW5pc2hOb2RlLnkpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB1bml0LnNldFVuaXRUb1B1cnN1ZShudWxsKTtcclxuICAgIGxldCBzdGFydE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0LngsIHVuaXQueSk7XHJcbiAgICBsZXQgZmluaXNoTm9kZSA9IGdldE5vZGVGcm9tTWFwKG1vdmVUb1gsIG1vdmVUb1kpO1xyXG4gICAgbGV0IHBhdGg6YW55ID0gYVN0YXIoaW5pdGlhbE1hcCwgc3RhcnROb2RlLCBmaW5pc2hOb2RlKTtcclxuICAgIHVuaXQuYXNzaWduTW92ZVRvUG9zaXRpb24oZmluaXNoTm9kZS54LCBmaW5pc2hOb2RlLnkpO1xyXG4gICAgdXBkYXRlVW5pdCh1bml0LCBwYXRoLCAwLCBmaW5pc2hOb2RlLngsIGZpbmlzaE5vZGUueSwgbnVsbCwgdHJ1ZSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBQb3dlciBmcm9tICcuL1Bvd2VyJztcclxuZXhwb3J0IGxldCBwbGF5ZXJQb3dlciA9IG5ldyBQb3dlcjtcclxuIiwiaW1wb3J0IFBvd2VyIGZyb20gJy4vUG93ZXInO1xyXG5leHBvcnQgbGV0IGNvbXB1dGVyUG93ZXIgPSBuZXcgUG93ZXI7XHJcbiIsImltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vLi4vdW5pdFwiO1xyXG5pbXBvcnQgeyBzaHVmZmxlVW5pdHMgfSBmcm9tIFwiLi4vc2h1ZmZsZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFJhbmRvbVVuaXQgPSAodW5pdHM6IFVuaXRbXSkgPT4ge1xyXG4gICAgbGV0IHVwZGF0ZWRVbml0czogVW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gICAgY29uc3Qgc2h1ZmZsZWRVbml0czogVW5pdFtdID0gc2h1ZmZsZVVuaXRzKHVwZGF0ZWRVbml0cyk7XHJcbiAgICByZXR1cm4gc2h1ZmZsZWRVbml0c1swXTtcclxufSIsImltcG9ydCB7XHJcbiAgICBhc3Nlc3NWdWxuZXJhYmlsaXR5XHJcbn0gZnJvbSAnLi9hc3Nlc3NWdWxuZXJhYmlsaXR5JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBhc3Nlc3NWdWxuZXJhYmlsaXR5XHJcbn0iLCJleHBvcnQgbGV0IGN1cnJlbnRDb21tYW5kTnVtYmVyOiBudW1iZXI7XHJcblxyXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVDdXJyZW50Q29tbWFuZE51bWJlciA9ICgpOiBudW1iZXIgPT4geyBcclxuICAgIGxldCByYW5kb21OdW1iZXIgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgY3VycmVudENvbW1hbmROdW1iZXIgPSByYW5kb21OdW1iZXI7XHJcbiAgICByZXR1cm4gcmFuZG9tTnVtYmVyO1xyXG59IiwiaW1wb3J0IHtcclxuICByb3N0ZXJJbWdXaWR0aCxcclxuICByb3N0ZXJJbWdIZWlnaHRcclxufSBmcm9tICcuL3NldHRpbmdzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgcm9zdGVySW1nV2lkdGgsXHJcbiAgcm9zdGVySW1nSGVpZ2h0XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkaXNwbGF5Um9zdGVyXHJcbn0gZnJvbSAnLi9kaXNwbGF5Um9zdGVyJztcclxuaW1wb3J0IHtcclxuICBkaXNwbGF5Um9zdGVyVW5pdHNcclxufSBmcm9tICcuL2Rpc3BsYXlVbml0cyc7XHJcbmltcG9ydCB7XHJcbiAgZGlzcGxheVJvc3RlclRpdGxlXHJcbn0gZnJvbSAnLi9kaXNwbGF5VGl0bGUnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkaXNwbGF5Um9zdGVyLFxyXG4gIGRpc3BsYXlSb3N0ZXJVbml0cyxcclxuICBkaXNwbGF5Um9zdGVyVGl0bGVcclxufVxyXG4iLCJpbXBvcnQge3NpZGV9IGZyb20gJy4uL3NpZGVzL3NpZGUnO1xyXG5cclxuZXhwb3J0IGxldCBwbGF5ZXJTcGVudEdvbGQ6bnVtYmVyID0gMDtcclxuZXhwb3J0IGxldCBjb21wdXRlclNwZW50R29sZDpudW1iZXIgPSAwO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluY3JlYXNlU3BlbnRHb2xkID0gKGdvbGQ6bnVtYmVyKSA9PiB7XHJcbiAgaWYoc2lkZSA9PT0gJ2NvbXB1dGVyJykge1xyXG4gICAgY29tcHV0ZXJTcGVudEdvbGQgKz0gZ29sZDtcclxuICB9XHJcbiAgZWxzZSBpZihzaWRlID09PSAncGxheWVyJykge1xyXG4gICAgcGxheWVyU3BlbnRHb2xkICs9IGdvbGQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVjcmVhc2VTcGVudEdvbGQgPSAoZ29sZDpudW1iZXIpID0+IHtcclxuICBpZihzaWRlID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICBjb21wdXRlclNwZW50R29sZCAtPSBnb2xkO1xyXG4gIH1cclxuICBlbHNlIGlmKHNpZGUgPT09ICdwbGF5ZXInKSB7XHJcbiAgICBwbGF5ZXJTcGVudEdvbGQgLT0gZ29sZDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGxldCBzdGFydEJhdHRsZUF2YWlsYWJsZTpib29sZWFuID0gZmFsc2U7XHJcblxyXG5leHBvcnQgY29uc3QgZGlzYWJsZVN0YXJ0QmF0dGxlQnV0dG9uID0gKCkgPT4ge1xyXG4gIHN0YXJ0QmF0dGxlQXZhaWxhYmxlID0gZmFsc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBlbmFibGVTdGFydEJhdHRsZUJ1dHRvbiA9ICgpID0+IHtcclxuICBzdGFydEJhdHRsZUF2YWlsYWJsZSA9IHRydWU7XHJcbn1cclxuIiwiZXhwb3J0IGxldCBzZWxlY3RlZFVuaXRJblJvc3RlcjphbnkgPSBudWxsO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNlbGVjdFVuaXRJblJvc3RlciA9ICh1bml0OmFueSkgPT4ge1xyXG4gIGlmKHVuaXQpIHtcclxuICAgIHNlbGVjdGVkVW5pdEluUm9zdGVyID0gdW5pdDtcclxuICB9IGVsc2Uge1xyXG4gICAgc2VsZWN0ZWRVbml0SW5Sb3N0ZXIgPSBudWxsO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNoYW5nZVRvdGFsR29sZFxyXG59IGZyb20gJy4vYmF0dGxlSW5mbyc7XHJcbmltcG9ydCB7XHJcbiAgb25DaG9vc2VJbmZvLFxyXG4gIGRpc3BsYXlJbmZvLFxyXG59IGZyb20gJy4vaW5mbyc7XHJcblxyXG5cclxuZXhwb3J0IHtcclxuICBvbkNob29zZUluZm8sXHJcbiAgZGlzcGxheUluZm8sXHJcbiAgY2hhbmdlVG90YWxHb2xkXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgdGl0bGVIZWlnaHQsXHJcbiAgdW5pdFJvc3RlcldpZHRoXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuXHJcbmV4cG9ydCBjb25zdCBnb2xkQm94U3RhcnRYOm51bWJlciA9IGFybXlMYXlvdXRXaWR0aCArIHVuaXRSb3N0ZXJXaWR0aCArIDEwMDtcclxuZXhwb3J0IGNvbnN0IGdvbGRCb3hTdGFydFk6bnVtYmVyID0gdGl0bGVIZWlnaHQgKyA4MDtcclxuZXhwb3J0IGxldCBzdGFydFRvdGFsTW9uZXlUaXRsZVg6bnVtYmVyID0gZ29sZEJveFN0YXJ0WCArIDQwO1xyXG5leHBvcnQgbGV0IHN0YXJ0VG90YWxNb25leVRpdGxlWTpudW1iZXIgPSBnb2xkQm94U3RhcnRZIC0gMjA7XHJcbmV4cG9ydCBjb25zdCBib3hXaWR0aDpudW1iZXIgPSA0MDtcclxuZXhwb3J0IGNvbnN0IGJveEhlaWdodDpudW1iZXIgPSA0MDtcclxuZXhwb3J0IGNvbnN0IGdvbGRPcHRpb25zOmFueVtdID0gW1xyXG4gIDIwMCwgMzAwLCA0MDAsIDYwMCwgMTAwMFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVuaXRJbmZvVGl0bGVYOm51bWJlciA9IGFybXlMYXlvdXRXaWR0aCArIHVuaXRSb3N0ZXJXaWR0aCArIDE3MDtcclxuZXhwb3J0IGNvbnN0IHVuaXRJbmZvVGl0bGVZOm51bWJlciA9IHRpdGxlSGVpZ2h0ICsgNjA7XHJcbmV4cG9ydCBsZXQgcHJvcGVydHlTdGFydFg6bnVtYmVyID0gdW5pdEluZm9UaXRsZVggLSAxMDA7XHJcbmV4cG9ydCBsZXQgcHJvcGVydHlTdGFydFk6bnVtYmVyID0gdW5pdEluZm9UaXRsZVkgKyAzMDtcclxuZXhwb3J0IGxldCB2YWx1ZVN0YXJ0WDpudW1iZXIgPSBwcm9wZXJ0eVN0YXJ0WCArIDIwMDtcclxuZXhwb3J0IGxldCB2YWx1ZVN0YXJ0WTpudW1iZXIgPSB1bml0SW5mb1RpdGxlWSArIDMwO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNoYW5nZVkgPSAoKSA9PiB7XHJcbiAgcHJvcGVydHlTdGFydFkgKz0gMzA7XHJcbiAgdmFsdWVTdGFydFkgKz0gMzA7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzZXREZWZhdWx0ID0gKCkgPT4ge1xyXG4gIHByb3BlcnR5U3RhcnRYID0gdW5pdEluZm9UaXRsZVggLSAxMDA7XHJcbiAgcHJvcGVydHlTdGFydFkgPSB1bml0SW5mb1RpdGxlWSArIDMwO1xyXG4gIHZhbHVlU3RhcnRYID0gcHJvcGVydHlTdGFydFggKyAyMDA7XHJcbiAgdmFsdWVTdGFydFkgPSB1bml0SW5mb1RpdGxlWSArIDMwO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgb25DaG9vc2VQbGF5ZXIsXHJcbiAgb25DaG9vc2VDb21wdXRlclxyXG59IGZyb20gJy4vY2hvb3NlJztcclxuaW1wb3J0IHtcclxuICBkaXNwbGF5VGl0bGVcclxufSBmcm9tICcuL2Rpc3BsYXknO1xyXG5pbXBvcnQge1xyXG5cclxufSBmcm9tICcuL3VwcGVyTGF5b3V0U2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkaXNwbGF5VGl0bGUsXHJcbiAgb25DaG9vc2VQbGF5ZXIsXHJcbiAgb25DaG9vc2VDb21wdXRlclxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgcGxheWVyU3dpdGNoZXJYMCxcclxuICBwbGF5ZXJTd2l0Y2hlclgxLFxyXG4gIHBsYXllclN3aXRjaGVyWTAsXHJcbiAgcGxheWVyU3dpdGNoZXJZMSxcclxuICBjb21wdXRlclN3aXRjaGVyWDAsXHJcbiAgY29tcHV0ZXJTd2l0Y2hlclgxLFxyXG4gIGNvbXB1dGVyU3dpdGNoZXJZMCxcclxuICBjb21wdXRlclN3aXRjaGVyWTEsXHJcbiAgcGxheWVyU3dpdGNoZXJXaWR0aCxcclxuICBjb21wdXRlclN3aXRjaGVyV2lkdGgsXHJcbiAgZ29sZFgsXHJcbiAgZ29sZFlcclxufSBmcm9tICcuL3NldHRpbmdzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgcGxheWVyU3dpdGNoZXJYMCxcclxuICBwbGF5ZXJTd2l0Y2hlclgxLFxyXG4gIHBsYXllclN3aXRjaGVyWTAsXHJcbiAgcGxheWVyU3dpdGNoZXJZMSxcclxuICBjb21wdXRlclN3aXRjaGVyWDAsXHJcbiAgY29tcHV0ZXJTd2l0Y2hlclgxLFxyXG4gIGNvbXB1dGVyU3dpdGNoZXJZMCxcclxuICBjb21wdXRlclN3aXRjaGVyWTEsXHJcbiAgcGxheWVyU3dpdGNoZXJXaWR0aCxcclxuICBjb21wdXRlclN3aXRjaGVyV2lkdGgsXHJcbiAgZ29sZFgsXHJcbiAgZ29sZFlcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uWCxcclxuICBzdGFydEJhdHRsZUJ1dHRvblksXHJcbiAgc3RhcnRCYXR0bGVCdXR0b25XaWR0aCxcclxuICBzdGFydEJhdHRsZUJ1dHRvbkhlaWdodCxcclxuICBzdGFydEJhdHRsZVRleHRYLFxyXG4gIHN0YXJ0QmF0dGxlVGV4dFlcclxufSBmcm9tICcuL2xheW91dFNldHRpbmdzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgc3RhcnRCYXR0bGVCdXR0b25YLFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uWSxcclxuICBzdGFydEJhdHRsZUJ1dHRvbldpZHRoLFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uSGVpZ2h0LFxyXG4gIHN0YXJ0QmF0dGxlVGV4dFgsXHJcbiAgc3RhcnRCYXR0bGVUZXh0WVxyXG59XHJcbiIsImltcG9ydCB7IGF1eGlsaWFyeUNhbnZhcyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jYW52YXMnO1xyXG5pbXBvcnQgeyBhdXhpbGlhcnlDdHggfSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgTUFQX1dJRFRILFxyXG4gIE1BUF9IRUlHSFQsXHJcbiAgZ3JpZFNpemVcclxufSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5pbXBvcnQge1xyXG4gIGdldE5vZGVGcm9tTWFwLFxyXG4gIGRyYXdCYWNrZ3JvdW5kXHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge29uQ2hvb3NlVW5pdH0gZnJvbSAnLi4vLi4vdW5pdCc7XHJcbmltcG9ydCB7XHJcbiAgdW5pdHMsXHJcbiAgY29tcHV0ZXJVbml0c1xyXG59IGZyb20gJy4uLy4uL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG5pbXBvcnQge1xyXG4gIGF0dGFja0VuZW15LFxyXG4gIG1vdmVUb1xyXG59IGZyb20gJy4uLy4uL3VuaXQvbW92ZW1lbnQnO1xyXG5pbXBvcnQgeyBjdXJyZW50bHlDaG9zZW5Vbml0IH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC9jdXJyZW50bHlDaG9zZW5Vbml0JztcclxuaW1wb3J0IHsgYmF0dGxlTW9kZSB9IGZyb20gJy4uLy4uL2NvbmZpZy9nbG9iYWwvZ2xvYmFsQ29uZmlnJztcclxuaW1wb3J0IHsgZGlzcGxheVVuaXRJY29ucyB9IGZyb20gJy4uLy4uL1VJL2JhdHRsZVVJL3VuaXRQYW5lbC9kaXNwbGF5L2Rpc3BsYXlVbml0SWNvbnMnO1xyXG5pbXBvcnQgeyBiYXR0bGVMaXN0ZW5lciwgaXNCYXR0bGVFbmQgfSBmcm9tICcuLi8uLi9nYW1lTG9vcCc7XHJcbmltcG9ydCB7IHJlZHJhd1BsYXllclVuaXRzIH0gZnJvbSAnLi4vLi4vdW5pdC9kcmF3L2RyYXdVbml0JztcclxuaW1wb3J0IHsgZHJhd0NsaWNrZWRJY29uIH0gZnJvbSAnLi4vLi4vVUkvYmF0dGxlVUkvdW5pdFBhbmVsL2ljb24vY2xpY2tJY29uJztcclxuaW1wb3J0IHsgY2xlYXJQYXRoIH0gZnJvbSAnLi4vLi4vcGF0aC9kcmF3L2RyYXdQYXRoJztcclxuaW1wb3J0IHsgY29tcHV0ZXJNb3ZlbWVudCB9IGZyb20gJy4uLy4uL0FJL3N0cmF0ZWd5TW9kdWxlL2NvbnRyb2xVbml0L2NvbXB1dGVyQWN0aW9uJztcclxuXHJcbmV4cG9ydCBjb25zdCBsYXVuY2hCYXR0bGUgPSAoKSA9PiB7XHJcbiAgYXV4aWxpYXJ5Q2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIChlOmFueSkgPT4ge1xyXG4gICAgbGV0IG1vdXNlWCA9IGUub2Zmc2V0WDsgLy8gZ2V0IFhcclxuICAgIGxldCBtb3VzZVkgPSBlLm9mZnNldFk7IC8vIGdldCBZXHJcbiAgICBpZihjdXJyZW50bHlDaG9zZW5Vbml0KSB7XHJcbiAgICAgIGxldCBwb2ludGVkVW5pdCA9IG51bGw7XHJcbiAgICAgIGZvcihsZXQgdW5pdCBvZiBjb21wdXRlclVuaXRzKSB7XHJcbiAgICAgICAgbGV0IGZpbmlzaFggPSB1bml0LnggKyBncmlkU2l6ZTtcclxuICAgICAgICBsZXQgZmluaXNoWSA9IHVuaXQueSArIGdyaWRTaXplO1xyXG4gICAgICAgIGlmKChtb3VzZVggPj0gdW5pdC54ICYmIG1vdXNlWCA8IGZpbmlzaFgpICYmIChtb3VzZVkgPj0gdW5pdC55ICYmIG1vdXNlWSA8IGZpbmlzaFkpKSB7XHJcbiAgICAgICAgICBwb2ludGVkVW5pdCA9IHVuaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZihwb2ludGVkVW5pdCAmJiBwb2ludGVkVW5pdC5pc1Zpc2libGUpIHtcclxuICAgICAgICBhdXhpbGlhcnlDdHguZmlsbFN0eWxlID0gJyMwMDAnO1xyXG4gICAgICAgIGF1eGlsaWFyeUN0eC5mb250ID0gXCIxNHB4IEFyaWFsXCI7XHJcbiAgICAgICAgYXV4aWxpYXJ5Q3R4LmZpbGxUZXh0KFwiQXR0YWNrXCIsIHBvaW50ZWRVbml0LngsIHBvaW50ZWRVbml0LnkgKyBncmlkU2l6ZSAvIDIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF1eGlsaWFyeUN0eC5jbGVhclJlY3QoMCwgMCwgTUFQX1dJRFRILCBNQVBfSEVJR0hUKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBhdXhpbGlhcnlDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTphbnkpID0+IHtcclxuICAgIGxldCB4ID0gZS5vZmZzZXRYOyAvLyBnZXQgWFxyXG4gICAgbGV0IHkgPSBlLm9mZnNldFk7IC8vIGdldCBZXHJcbiAgICBvbkNob29zZVVuaXQodW5pdHMsIHgsIHkpO1xyXG4gICAgcmVkcmF3UGxheWVyVW5pdHMoKTtcclxuICAgIGRpc3BsYXlVbml0SWNvbnMoKTtcclxuICAgIGNsZWFyUGF0aCgpO1xyXG4gIH0pO1xyXG5cclxuICBhdXhpbGlhcnlDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZTphbnkpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGxldCB4ID0gZS5vZmZzZXRYOyAvLyBnZXQgWFxyXG4gICAgbGV0IHkgPSBlLm9mZnNldFk7IC8vIGdldCBZXHJcbiAgICBpZihjdXJyZW50bHlDaG9zZW5Vbml0KSB7XHJcbiAgICAgIGxldCBwdXJzdWVkVW5pdDphbnkgPSBudWxsO1xyXG4gICAgICBmb3IobGV0IGNvbXB1dGVyVW5pdCBvZiBjb21wdXRlclVuaXRzKSB7XHJcbiAgICAgICAgbGV0IGJvdHRvbVJpZ2h0WCA9IGNvbXB1dGVyVW5pdC54ICsgZ3JpZFNpemU7XHJcbiAgICAgICAgbGV0IGJvdHRvbVJpZ2h0WSA9IGNvbXB1dGVyVW5pdC55ICsgZ3JpZFNpemU7XHJcbiAgICAgICAgaWYoeCA+PSBjb21wdXRlclVuaXQueCAmJiB4IDwgYm90dG9tUmlnaHRYICYmIHkgPj0gY29tcHV0ZXJVbml0LnkgJiYgeSA8IGJvdHRvbVJpZ2h0WSkge1xyXG4gICAgICAgICAgcHVyc3VlZFVuaXQgPSBjb21wdXRlclVuaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IC8vIGZvciBjb21wdXRlciB1bml0c1xyXG4gICAgICBpZihwdXJzdWVkVW5pdCAmJiBwdXJzdWVkVW5pdC5pc1Zpc2libGUpIHtcclxuICAgICAgICBhdHRhY2tFbmVteShjdXJyZW50bHlDaG9zZW5Vbml0LCBwdXJzdWVkVW5pdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbW92ZVRvKGN1cnJlbnRseUNob3NlblVuaXQsIHgsIHkpO1xyXG4gICAgICAgIGRyYXdDbGlja2VkSWNvbih4LCB5KTtcclxuICAgICAgfVxyXG4gICAgICBjbGVhclBhdGgoKTtcclxuICAgIH1cclxuICB9KTsgLy8gb24gY29udGV4dFxyXG4gIGRyYXdCYWNrZ3JvdW5kKCcuL3NyYy9pbWcvdGVycmFpbi90ZXJyYWluLnBuZycpO1xyXG4gIGRpc3BsYXlVbml0SWNvbnMoKTtcclxuICBiYXR0bGVMaXN0ZW5lcigpO1xyXG4gIGNvbXB1dGVyTW92ZW1lbnQoKTtcclxuICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICBpc0JhdHRsZUVuZCgpO1xyXG4gIH0sIDE1MDAwKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuIiwiLy8gbG9hZCBpbWFnZVxyXG5leHBvcnQgY29uc3QgbG9hZEltYWdlID0gKGltZ1BhdGg6IHN0cmluZywgY2FsbGJhY2s6YW55KSA9PiB7XHJcbiAgbGV0IGltZyA9IG5ldyBJbWFnZTtcclxuICBpbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgY2FsbGJhY2sobnVsbCwgaW1nKTtcclxuICB9XHJcbiAgaW1nLm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICBsZXQgbXNnID0gJ0Nhbm5vdCBsb2FkIHRoZSBpbWFnZSBhdCAnICsgaW1nUGF0aDtcclxuICAgIGNhbGxiYWNrKG5ldyBFcnJvcihtc2cpKTtcclxuICB9XHJcbiAgaW1nLnNyYyA9IGltZ1BhdGg7XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGRlbGV0ZU9iamVjdEZyb21BcnJheSA9IChvYmplY3Q6YW55LCBhcnI6YW55W10pOmFueVtdID0+IHtcclxuICBsZXQgdXBkYXRlZEFyciA9IGFyci5maWx0ZXIoKGVsKSA9PiB7XHJcbiAgICBpZihlbC54ID09PSBvYmplY3QueCAmJiBlbC55ID09PSBvYmplY3QueSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9KTtcclxuICByZXR1cm4gdXBkYXRlZEFycjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0SW5BcnJheSA9IChvYmplY3Q6YW55LCBhcnI6YW55W10pOmJvb2xlYW4gPT4ge1xyXG4gIGlmKGFyci5sZW5ndGggIT09IDApIHtcclxuICAgIGZvcihsZXQgbm9kZSBvZiBhcnIpIHtcclxuICAgICAgaWYob2JqZWN0LnggPT09IG5vZGUueCAmJiBvYmplY3QueSA9PT0gbm9kZS55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaXNPYmplY3RFbXB0eSA9IChvYmo6YW55KTpib29sZWFuID0+IHtcclxuICBsZXQgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG4gIC8vIG51bGwgYW5kIHVuZGVmaW5lZCBhcmUgXCJlbXB0eVwiXHJcbiAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgLy8gQXNzdW1lIGlmIGl0IGhhcyBhIGxlbmd0aCBwcm9wZXJ0eSB3aXRoIGEgbm9uLXplcm8gdmFsdWVcclxuICAvLyB0aGF0IHRoYXQgcHJvcGVydHkgaXMgY29ycmVjdC5cclxuICBpZiAob2JqLmxlbmd0aCA+IDApICAgIHJldHVybiBmYWxzZTtcclxuICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgIHJldHVybiB0cnVlO1xyXG5cclxuICAvLyBJZiBpdCBpc24ndCBhbiBvYmplY3QgYXQgdGhpcyBwb2ludFxyXG4gIC8vIGl0IGlzIGVtcHR5LCBidXQgaXQgY2FuJ3QgYmUgYW55dGhpbmcgKmJ1dCogZW1wdHlcclxuICAvLyBJcyBpdCBlbXB0eT8gIERlcGVuZHMgb24geW91ciBhcHBsaWNhdGlvbi5cclxuICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHRydWU7XHJcblxyXG4gIC8vIE90aGVyd2lzZSwgZG9lcyBpdCBoYXZlIGFueSBwcm9wZXJ0aWVzIG9mIGl0cyBvd24/XHJcbiAgLy8gTm90ZSB0aGF0IHRoaXMgZG9lc24ndCBoYW5kbGVcclxuICAvLyB0b1N0cmluZyBhbmQgdmFsdWVPZiBlbnVtZXJhdGlvbiBidWdzIGluIElFIDwgOVxyXG4gIGZvciAobGV0IGtleSBpbiBvYmopIHtcclxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZmluZENsb3Nlc3RVbml0c1RvVGhlTm9kZUNlbnRlcixcclxuICBnZXRDbG9zZXN0Tm9kZVRvVW5pdCxcclxuICBnZXRCZXN0VW5pdHNCeVByb3BlcnR5XHJcbn0gZnJvbSAnLi91bml0QWN0aW9ucyc7XHJcblxyXG5leHBvcnQge1xyXG4gIGZpbmRDbG9zZXN0VW5pdHNUb1RoZU5vZGVDZW50ZXIsXHJcbiAgZ2V0Q2xvc2VzdE5vZGVUb1VuaXQsXHJcbiAgZ2V0QmVzdFVuaXRzQnlQcm9wZXJ0eVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgTUFQX0hFSUdIVCxcclxuICBncmlkU2l6ZSxcclxuICBNQVBfV0lEVEhcclxufSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tICcuL01hcE5vZGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZU5vZGVzID0gKCk6IE1hcE5vZGVbXSA9PiB7XHJcbiAgbGV0IG1hcDogTWFwTm9kZVtdID0gW107XHJcbiAgbGV0IGlkID0gMDtcclxuICBmb3IobGV0IHggPSAwOyB4IDwgTUFQX1dJRFRIOyB4ICs9IGdyaWRTaXplKSB7XHJcbiAgICBmb3IobGV0IHkgPSAwOyB5IDwgTUFQX0hFSUdIVDsgeSArPSBncmlkU2l6ZSkge1xyXG4gICAgICBsZXQgbWFwTm9kZTogTWFwTm9kZSA9IG5ldyBNYXBOb2RlKGlkLCB4LCB5KTtcclxuICAgICAgbWFwLnB1c2gobWFwTm9kZSk7XHJcbiAgICAgIGlkKys7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtYXA7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVTZWFyY2hNYXAgPSAobWFwOiBNYXBOb2RlW10pID0+IHtcclxuICBsZXQgc2VhcmNoTWFwOiBhbnkgPSB7fTtcclxuICBsZXQgY3VycmVudFg6IG51bWJlciA9IDA7XHJcbiAgbGV0IGN1cnJlbnRZOiBNYXBOb2RlW10gPSBbXTtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgbWFwLmxlbmd0aDsgKytpKSB7XHJcbiAgICBjdXJyZW50WS5wdXNoKG1hcFtpXSk7XHJcbiAgICBpZihpIDw9IG1hcC5sZW5ndGggLSAyICYmIG1hcFtpICsgMV0ueCAhPT0gY3VycmVudFgpIHtcclxuICAgICAgc2VhcmNoTWFwW2N1cnJlbnRYXSA9IGN1cnJlbnRZO1xyXG4gICAgICBjdXJyZW50WCArPSBncmlkU2l6ZTtcclxuICAgICAgY3VycmVudFkgPSBbXTtcclxuICAgIH1cclxuICB9XHJcbiAgc2VhcmNoTWFwW2N1cnJlbnRYXSA9IGN1cnJlbnRZO1xyXG4gIHJldHVybiBzZWFyY2hNYXA7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBzaHVmZmxlTm9kZXNcclxufSBmcm9tICcuL3NodWZmbGUnO1xyXG5cclxuZXhwb3J0IHtcclxuICBzaHVmZmxlTm9kZXNcclxufVxyXG4iLCJpbXBvcnQge2dyaWRTaXplfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5pbXBvcnQge3VuaXRzfSBmcm9tICcuLi8uLi8uLi9zdG9yZS91bml0L3VuaXRzJztcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRVbml0SW50b0FycmF5ID0gKHVuaXQ6VW5pdCwgYXJyOmFueVtdKTphbnlbXSA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRBcnIgPSBPYmplY3QuYXNzaWduKFtdLCBhcnIpO1xyXG4gIGlmKCFpc1VuaXRJbkFycmF5KHVuaXQsIGFycikpIHtcclxuICAgIHVwZGF0ZWRBcnIucHVzaCh1bml0KTtcclxuICB9XHJcbiAgcmV0dXJuIHVwZGF0ZWRBcnI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVVbml0RnJvbUFycmF5ID0gKHVuaXQ6VW5pdCwgYXJyOmFueVtdKTphbnlbXSA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRBcnI6VW5pdFtdID0gYXJyLmZpbHRlcigoZWwpID0+IHtcclxuICAgIGlmKGVsLmlkID09PSB1bml0LmlkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0pO1xyXG4gIHJldHVybiB1cGRhdGVkQXJyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlVW5pdEZyb21Bcm15ID0gKHVuaXQ6YW55LCBhcnI6YW55W10pOmFueVtdID0+IHtcclxuICBsZXQgdXBkYXRlZEFyciA9IGFyci5maWx0ZXIoKGVsKSA9PiB7XHJcbiAgICBpZihlbC5hcm15UG9zaXRpb24ueCA9PT0gdW5pdC5hcm15UG9zaXRpb24ueCAmJiBlbC5hcm15UG9zaXRpb24ueSA9PT0gdW5pdC5hcm15UG9zaXRpb24ueSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9KTtcclxuICByZXR1cm4gdXBkYXRlZEFycjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5HcmlkcyA9ICh1bml0MTpVbml0LCB1bml0MjpVbml0KTpudW1iZXIgPT4ge1xyXG4gIGxldCB1bml0MVg6bnVtYmVyID0gdW5pdDEuY3VycmVudE5vZGUueDtcclxuICBsZXQgdW5pdDFZOm51bWJlciA9IHVuaXQxLmN1cnJlbnROb2RlLnk7XHJcbiAgbGV0IHVuaXQyWDpudW1iZXIgPSB1bml0Mi5jdXJyZW50Tm9kZS54O1xyXG4gIGxldCB1bml0Mlk6bnVtYmVyID0gdW5pdDIuY3VycmVudE5vZGUueTtcclxuICBsZXQgZGlzdGFuY2VYOm51bWJlciA9IE1hdGguYWJzKHVuaXQxWCAtIHVuaXQyWCkgLyBncmlkU2l6ZTtcclxuICBsZXQgZGlzdGFuY2VZOm51bWJlciA9IE1hdGguYWJzKHVuaXQxWSAtIHVuaXQyWSkgLyBncmlkU2l6ZTtcclxuICBsZXQgZGlzdGFuY2U6bnVtYmVyID0gZGlzdGFuY2VYICsgZGlzdGFuY2VZO1xyXG4gIHJldHVybiBkaXN0YW5jZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzVW5pdEluQXJyYXkgPSAoY2hlY2tlZFVuaXQ6VW5pdCwgYXJyOmFueVtdKTpib29sZWFuID0+IHtcclxuICBpZihhcnIubGVuZ3RoICE9PSAwKSB7XHJcbiAgICBmb3IobGV0IHVuaXQgb2YgYXJyKSB7XHJcbiAgICAgIGlmKHVuaXQuaWQgPT09IGNoZWNrZWRVbml0LmlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VW5pdEJ5SWQgPSAoaWQ6bnVtYmVyLCBhcnI6VW5pdFtdID0gdW5pdHMpOlVuaXQgPT4ge1xyXG4gIGZvcihsZXQgdW5pdCBvZiBhcnIpIHtcclxuICAgIGlmKGlkID09PSB1bml0LmlkKSB7XHJcbiAgICAgIHJldHVybiB1bml0O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldFVuaXRQb3NpdGlvbkluQXJyYXkgPSAodW5pdElkOiBudW1iZXIsIGFycjogVW5pdFtdKTogbnVtYmVyID0+IHtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZihhcnJbaV0uaWQgPT09IHVuaXRJZCkge1xyXG4gICAgICByZXR1cm4gaTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuIiwiaW1wb3J0IHtjaG9vc2VVbml0VHlwZX0gZnJvbSAnLi9jaG9vc2VVbml0VHlwZSc7XHJcbmltcG9ydCB7b25DaG9vc2VVbml0fSBmcm9tICcuL29uQ2hvb3NlVW5pdCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGNob29zZVVuaXRUeXBlLFxyXG4gIG9uQ2hvb3NlVW5pdFxyXG59XHJcbiIsImltcG9ydCBBcmNoZXJzIGZyb20gJy4vQXJjaGVycyc7XHJcbmltcG9ydCBIZWF2eUNhdmFscnkgZnJvbSAnLi9IZWF2eUNhdmFscnknO1xyXG5pbXBvcnQgSGVhdnlJbmZhbnRyeSBmcm9tICcuL0hlYXZ5SW5mYW50cnknO1xyXG5pbXBvcnQgSG9wbGl0ZXMgZnJvbSAnLi9Ib3BsaXRlcyc7XHJcbmltcG9ydCBMaWdodENhdmFscnkgZnJvbSAnLi9MaWdodENhdmFscnknO1xyXG5pbXBvcnQgTGlnaHRJbmZhbnRyeSBmcm9tICcuL0xpZ2h0SW5mYW50cnknO1xyXG5pbXBvcnQgTWlsaXRpYSBmcm9tICcuL01pbGl0aWEnO1xyXG5pbXBvcnQgUGVsdGFzdHMgZnJvbSAnLi9QZWx0YXN0cyc7XHJcbmltcG9ydCBQaWtlbWVuIGZyb20gJy4vUGlrZW1lbic7XHJcbmltcG9ydCBTY291dHMgZnJvbSAnLi9TY291dHMnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuL1VuaXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBBcmNoZXJzLFxyXG4gIEhlYXZ5SW5mYW50cnksXHJcbiAgSGVhdnlDYXZhbHJ5LFxyXG4gIEhvcGxpdGVzLFxyXG4gIExpZ2h0SW5mYW50cnksXHJcbiAgTGlnaHRDYXZhbHJ5LFxyXG4gIE1pbGl0aWEsXHJcbiAgUGVsdGFzdHMsXHJcbiAgUGlrZW1lbixcclxuICBTY291dHMsXHJcbiAgVW5pdFxyXG59XHJcbiIsImltcG9ydCB7IGFkZFRvVW5pdHMgfSBmcm9tICcuLi8uLi9zdG9yZS91bml0L3VuaXRzJztcclxuaW1wb3J0IHsgaW5jVW5pdElkIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0SWQnO1xyXG5pbXBvcnQgeyBkcmF3VW5pdCB9IGZyb20gJy4uL2RyYXcvZHJhd1VuaXQnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi90eXBlcy9Vbml0JztcclxuaW1wb3J0IHtjaG9vc2VVbml0VHlwZX0gZnJvbSAnLi4vY2hvb3NlJztcclxuXHJcbmV4cG9ydCBsZXQgY3JlYXRlVW5pdCA9ICh0eXBlOnN0cmluZywgeDpudW1iZXIsIHk6bnVtYmVyLCBjb250cm9sQnk6c3RyaW5nKTogVW5pdCA9PiB7XHJcbiAgaWYoY29udHJvbEJ5ID09PSAncGxheWVyJyB8fCBjb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGxldCB1bml0OlVuaXQ7XHJcbiAgICB1bml0ID0gY2hvb3NlVW5pdFR5cGUodHlwZSwgeCwgeSwgY29udHJvbEJ5KTtcclxuICAgIGFkZFRvVW5pdHModW5pdCk7XHJcbiAgICBkcmF3VW5pdCh1bml0KTtcclxuICAgIGluY1VuaXRJZCgpO1xyXG4gICAgcmV0dXJuIHVuaXQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuaXQgY2Fubm90IGJlIGNvbnRyb2xsZWQgYnkgXCIgKyBjb250cm9sQnkpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlZmF1bHRVbml0ID0gKHR5cGU6c3RyaW5nLCB4Om51bWJlciwgeTpudW1iZXIsIGNvbnRyb2xCeTpzdHJpbmcpOiBVbml0ID0+IHtcclxuICBpZihjb250cm9sQnkgPT09ICdwbGF5ZXInIHx8IGNvbnRyb2xCeSA9PT0gJ2NvbXB1dGVyJykge1xyXG4gICAgbGV0IHVuaXQ6VW5pdDtcclxuICAgIHVuaXQgPSBjaG9vc2VVbml0VHlwZSh0eXBlLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gICAgcmV0dXJuIHVuaXQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuaXQgY2Fubm90IGJlIGNvbnRyb2xsZWQgYnkgXCIgKyBjb250cm9sQnkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVTklUX0lDT05fSEVJR0hUIH0gZnJvbSBcIi4uL3NldHRpbmdzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgYXR0cmlidXRlc0hlaWdodDogbnVtYmVyID0gMjA7XHJcbmV4cG9ydCBjb25zdCBoZWFsdGhQb2ludHNIZWlnaHQ6IG51bWJlciA9IDEwO1xyXG5leHBvcnQgY29uc3QgaWNvbkhlaWdodDogbnVtYmVyID0gVU5JVF9JQ09OX0hFSUdIVCAtIChhdHRyaWJ1dGVzSGVpZ2h0ICsgaGVhbHRoUG9pbnRzSGVpZ2h0KTtcclxuZXhwb3J0IGNvbnN0IG1vdmVJY29uU3JjOiBzdHJpbmcgPSBcIi4vc3JjL2ltZy9pY29ucy9Nb3ZlSWNvbi5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IGZpZ2h0SWNvblNyYzogc3RyaW5nID0gXCIuL3NyYy9pbWcvaWNvbnMvU3dvcmRzLnBuZ1wiO1xyXG5leHBvcnQgY29uc3Qgc3dvcmRJY29uU3JjOiBzdHJpbmcgPSBcIi4vc3JjL2ltZy91bml0cy9pY29ucy9zd29yZC5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IHNwZWFySWNvblNyYzogc3RyaW5nID0gXCIuL3NyYy9pbWcvdW5pdHMvaWNvbnMvc3BlYXIucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBzcGVhckFuZFNoaWVsZFNyYzogc3RyaW5nID0gXCIuL3NyYy9pbWcvdW5pdHMvaWNvbnMvc3BlYXJBbmRTaGllbGQucG5nXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbW92ZW1lbnRJY29uOiBhbnkgPSB7XHJcbiAgICB3aWR0aDogMzAsXHJcbiAgICBoZWlnaHQ6IGF0dHJpYnV0ZXNIZWlnaHRcclxufVxyXG5leHBvcnQgY29uc3QgZmlnaHRJY29uOiBhbnkgPSB7XHJcbiAgICB3aWR0aDogNDAsXHJcbiAgICBoZWlnaHQ6IGF0dHJpYnV0ZXNIZWlnaHRcclxufVxyXG5leHBvcnQgY29uc3QgYXJyb3dJY29uOiBhbnkgPSB7XHJcbiAgICB3aWR0aDogMzAsXHJcbiAgICBoZWlnaHQ6IGF0dHJpYnV0ZXNIZWlnaHRcclxufSIsImltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vdW5pdFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEZWZhdWx0VW5pdCB9IGZyb20gXCIuLi8uLi91bml0L2NyZWF0ZS9jcmVhdGVVbml0XCI7XHJcblxyXG5leHBvcnQgbGV0IGRlZmF1bHRVbml0czogVW5pdFtdID0gW107XHJcblxyXG5jb25zdCByZWxlYXNlZFVuaXRUeXBlcyA9IFtcclxuICAgIFwiSGVhdnlDYXZhbHJ5XCIsIFwiSGVhdnlJbmZhbnRyeVwiLFxyXG4gICAgXCJIb3BsaXRlc1wiLCBcIkxpZ2h0Q2F2YWxyeVwiLCBcIkxpZ2h0SW5mYW50cnlcIixcclxuICAgIFwiTWlsaXRpYVwiLCBcIlBpa2VtZW5cIiwgXCJTY291dHNcIlxyXG5dXHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlRGVmYXVsdFVuaXRzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGZvcihsZXQgdHlwZSBvZiByZWxlYXNlZFVuaXRUeXBlcykge1xyXG4gICAgICAgICAgICBsZXQgdW5pdCA9IGNyZWF0ZURlZmF1bHRVbml0KHR5cGUsIDAsIDAsIFwicGxheWVyXCIpO1xyXG4gICAgICAgICAgICBkZWZhdWx0VW5pdHMucHVzaCh1bml0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgfSk7XHJcbn0iLCJpbXBvcnQge1xyXG4gIGRyYXdVbml0LFxyXG4gIHJlZHJhd1VuaXRzXHJcbn0gZnJvbSAnLi9kcmF3VW5pdCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRyYXdVbml0LFxyXG4gIHJlZHJhd1VuaXRzXHJcbn1cclxuIiwiaW1wb3J0IHthcm1vdXJQZW5ldHJhdGlvbn0gZnJvbSAnLi9hcm1vdXJQZW5ldHJhdGlvbic7XHJcblxyXG5leHBvcnQge1xyXG4gIGFybW91clBlbmV0cmF0aW9uXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBjaGVja0F0dGFja1NpZGVcclxufSBmcm9tICcuL2F0dGFja1NpZGUnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjaGVja0F0dGFja1NpZGVcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHJlbW92ZVVuaXRGcm9tRW5lbWllc0ZpZ2h0QWdhaW5zdCxcclxuICBmaW5kVW5pdEluRmlnaHRBZ2FpbnN0XHJcbn0gZnJvbSAnLi91bml0RmlnaHRBZ2FpbnN0JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgcmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0LFxyXG4gIGZpbmRVbml0SW5GaWdodEFnYWluc3RcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNoZWNrSGVhbHRoXHJcbn0gZnJvbSAnLi9jaGVja0hlYWx0aCc7XHJcbmltcG9ydCB7XHJcbiAgaXNVbml0RmlnaHRpbmdcclxufSBmcm9tICcuL2NoZWNrRmlnaHRpbmcnO1xyXG5pbXBvcnQge1xyXG4gIG1lbGVlQXR0YWNrXHJcbn0gZnJvbSAnLi9tZWxlZUF0dGFjayc7XHJcbmltcG9ydCB7XHJcbiAgbWVsZWVDb21iYXRcclxufSBmcm9tICcuL21lbGVlQ29tYmF0JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgY2hlY2tIZWFsdGgsXHJcbiAgaXNVbml0RmlnaHRpbmcsXHJcbiAgbWVsZWVBdHRhY2ssXHJcbiAgbWVsZWVDb21iYXRcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHJlbW92ZVVuaXRcclxufSBmcm9tICcuL3JlbW92ZVVuaXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICByZW1vdmVVbml0XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhc3NpZ25DdXJyZW50bHlDaG9zZW5Vbml0LFxyXG4gIGFkZFVuaXRUb1Nwb3R0ZWRVbml0cyxcclxuICByZW1vdmVVbml0RnJvbVNwb3R0ZWRVbml0cyxcclxuICBpbmNVbml0SWQsXHJcbiAgYWRkVW5pdEludG9WaXNpYmxlVW5pdHMsXHJcbiAgcmVtb3ZlVW5pdEZyb21WaXNpYmxlVW5pdHNcclxufSBmcm9tICcuL3VuaXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBhc3NpZ25DdXJyZW50bHlDaG9zZW5Vbml0LFxyXG4gIGFkZFVuaXRUb1Nwb3R0ZWRVbml0cyxcclxuICByZW1vdmVVbml0RnJvbVNwb3R0ZWRVbml0cyxcclxuICBpbmNVbml0SWQsXHJcbiAgYWRkVW5pdEludG9WaXNpYmxlVW5pdHMsXHJcbiAgcmVtb3ZlVW5pdEZyb21WaXNpYmxlVW5pdHNcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRlbGV0ZU9iamVjdEZyb21BcnJheSxcclxuICBpc1VuaXRJbkFycmF5XHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5cclxuZXhwb3J0IGxldCBzcG90dGVkVW5pdHM6VW5pdFtdID0gW107XHJcblxyXG5leHBvcnQgY29uc3QgYWRkVW5pdFRvU3BvdHRlZFVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKCFpc1VuaXRJbkFycmF5KHVuaXQsIHNwb3R0ZWRVbml0cykpIHtcclxuICAgIHNwb3R0ZWRVbml0cy5wdXNoKHVuaXQpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVVuaXRGcm9tU3BvdHRlZFVuaXRzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGlmKGlzVW5pdEluQXJyYXkodW5pdCwgc3BvdHRlZFVuaXRzKSkge1xyXG4gICAgc3BvdHRlZFVuaXRzID0gZGVsZXRlT2JqZWN0RnJvbUFycmF5KHVuaXQsIHNwb3R0ZWRVbml0cyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7aXNPYmplY3RFbXB0eX0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG4vKlxyXG4gIENoZWNrcyBpZiB1bml0IGlzIGN1cnJlbnRseSBmaWdodGluZ1xyXG4gIHdpdGggYW55IGVuZW1pZXMsIGlmIG5vdCBmaWdodGluZ1xyXG4gIHNldCBpc0ZpZ2h0aW5nIHByb3BlcnR5IHRvIGZhbHNlXHJcbiovXHJcbmV4cG9ydCBjb25zdCBpc1VuaXRGaWdodGluZyA9ICh1bml0OmFueSkgPT4ge1xyXG4gIGxldCBpc0ZpZ2h0aW5nID0gZmFsc2U7XHJcbiAgbGV0IGZpZ3RoQWdhaW5zdCA9IHVuaXQuZmlndGhBZ2FpbnN0O1xyXG4gIGlmKCFpc09iamVjdEVtcHR5KGZpZ3RoQWdhaW5zdC5mcm9udCkpIHsgLy8gdW5pdCBoYXMgZW5lbXkgaW4gZnJvbnQgb2YgaXRcclxuICAgIGlzRmlnaHRpbmcgPSB0cnVlO1xyXG4gIH1cclxuICBlbHNlIGlmKCFpc09iamVjdEVtcHR5KGZpZ3RoQWdhaW5zdC5yZWFyKSkgeyAvLyB1bml0IGhhcyBhbiBlbmVteSBmcm9tIHVuaXQncyBiYWNrXHJcbiAgICBpc0ZpZ2h0aW5nID0gdHJ1ZTtcclxuICB9XHJcbiAgZWxzZSBpZihmaWd0aEFnYWluc3QuZmxhbmsubGVuZ3RoICE9PSAwKSB7IC8vIHVuaXQgaGFzIGVuZW15IG9uIHRoZSBzaWRlXHJcbiAgICBpc0ZpZ2h0aW5nID0gdHJ1ZTtcclxuICB9XHJcbiAgaWYoIWlzRmlnaHRpbmcpIHsgLy8gdW5pdCBub3QgZmlnaHRpbmcgYXQgdGhhdCBtb21lbnRcclxuICAgIHVuaXQuc2V0SXNGaWdodGluZ1RvRmFsc2UoKTsgLy8gc2V0IGlzRmlnaHRpbmcgcHJvcGVydHkgdG8gZmFsc2VcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICByZWZyZXNobWVudFxyXG59IGZyb20gJy4vcmVmcmVzaG1lbnQnO1xyXG5cclxuZXhwb3J0IHtcclxuICByZWZyZXNobWVudFxyXG59XHJcbiIsImV4cG9ydCBjb25zdCByYW5kb21pemVNZWxlZURhbWFnZSA9IChtZWxlZUF0dGFjazpudW1iZXIpID0+IHtcclxuICAgIGxldCBtYXggPSBtZWxlZUF0dGFjayAtIChNYXRoLmNlaWwobWVsZWVBdHRhY2sgKiAwLjIwKSk7XHJcbiAgICBsZXQgbWluID0gbWVsZWVBdHRhY2sgKyAoTWF0aC5mbG9vcihtZWxlZUF0dGFjayAqIDAuMjApKTtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xyXG59IiwiaW1wb3J0IHsgcGxheWVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0c1wiO1xyXG5pbXBvcnQgeyBVTklUX1BBTkVMX0hFSUdIVCwgVU5JVF9MRUZUX1BBTkVMX1dJRFRILCBVTklUX0lDT05fV0lEVEgsIFVOSVRfSUNPTl9IRUlHSFQsIFVOSVRfUEFORUxfV0lEVEggfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgQ0FOVkFTX0hFSUdIVCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb25maWdcIjtcclxuaW1wb3J0IHsgZHJhd1VuaXRJY29uIH0gZnJvbSBcIi4uL2ljb24vZHJhd1VuaXRJY29uXCI7XHJcbmltcG9ydCB7IGN0eCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb25maWcvY29udGV4dFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BsYXlVbml0SWNvbnMgPSAoKSA9PiB7XHJcbiAgICBsZXQgZGlzcGF5SGFsZk9mSW1hZ2U6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGxldCBrID0gKGRpc3BheUhhbGZPZkltYWdlKSA/IDAuNSA6IDE7XHJcbiAgICBsZXQgeCA9IFVOSVRfTEVGVF9QQU5FTF9XSURUSDtcclxuICAgIGxldCB5ID0gQ0FOVkFTX0hFSUdIVCAtIFVOSVRfUEFORUxfSEVJR0hUO1xyXG4gICAgY3R4LmNsZWFyUmVjdCh4LCB5LCBVTklUX1BBTkVMX1dJRFRILCBVTklUX1BBTkVMX0hFSUdIVCk7XHJcbiAgICBmb3IobGV0IHVuaXQgb2YgcGxheWVyVW5pdHMpIHtcclxuICAgICAgICBkcmF3VW5pdEljb24odW5pdCwgZGlzcGF5SGFsZk9mSW1hZ2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtncmlkU2l6ZX0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuZXhwb3J0IGNvbnN0IGdldE1pbkZTY29yZSA9IChvcGVuOmFueVtdKSA9PiB7XHJcbiAgbGV0IG1pbiA9IDA7XHJcbiAgZm9yKGxldCBpID0gMTsgaSA8IG9wZW4ubGVuZ3RoIC0gMTsgKytpKSB7XHJcbiAgICBpZihvcGVuW21pbl0uZlNjb3JlID4gb3BlbltpXS5mU2NvcmUpIHtcclxuICAgICAgbWluID0gaTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG9wZW5bbWluXTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHVuY2xvc2VkTmVpZ2JvcnMgPSAoY3VycmVudDphbnksIGNsb3NlZDphbnkpID0+IHtcclxuICBsZXQgbmVpZ2hib3JzTm90SW5DbG9zZWQgPSBbXTtcclxuICBmb3IobGV0IG5laWdoYm9yIG9mIGN1cnJlbnQubmVpZ2hib3JzKSB7XHJcbiAgICBsZXQgaXNJbkNsb3NlZDpib29sZWFuID0gZmFsc2U7XHJcbiAgICBmb3IobGV0IG5vZGUgb2YgY2xvc2VkKSB7XHJcbiAgICAgIGlmKG5laWdoYm9yLnggPT09IG5vZGUueCAmJiBuZWlnaGJvci55ID09PSBub2RlLnkpIHtcclxuICAgICAgICBpc0luQ2xvc2VkID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoIWlzSW5DbG9zZWQpIHtcclxuICAgICAgbmVpZ2hib3JzTm90SW5DbG9zZWQucHVzaChuZWlnaGJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuZWlnaGJvcnNOb3RJbkNsb3NlZDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0SW5NYXBLZXlzID0gKG9iamVjdDphbnksIG1hcDphbnkpID0+IHtcclxuICBsZXQgYXJyOmFueVtdID0gQXJyYXkuZnJvbShtYXApO1xyXG4gIGxldCByZXN1bHQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmKGFycltpXVswXS54ID09PSBvYmplY3QueCAmJiBhcnJbaV1bMF0ueSA9PT0gb2JqZWN0LnkpIHtcclxuICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldE5laWdoYm9yRGlzdGFuY2UgPSAoY3VycmVudE5vZGU6YW55LCBuZWlnaGJvcjphbnkpID0+IHtcclxuICBsZXQgZHggPSBNYXRoLmFicyhjdXJyZW50Tm9kZS54IC0gbmVpZ2hib3IueCk7XHJcbiAgbGV0IGR5ID0gTWF0aC5hYnMoY3VycmVudE5vZGUueSAtIG5laWdoYm9yLnkpO1xyXG4gIGlmKGR4ICE9PSAwICYmIGR5ICE9PSAwKSB7XHJcbiAgICByZXR1cm4gMTQ7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAxMDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgZ3JpZFNpemUsIE1BUF9XSURUSCwgTUFQX0hFSUdIVCB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7IHBhdGhDdHggfSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dC9jb250ZXh0JztcclxuaW1wb3J0IHsgVW5pdCB9IGZyb20gJy4uLy4uL3VuaXQnO1xyXG5pbXBvcnQgeyBjdXJyZW50bHlDaG9zZW5Vbml0IH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC9jdXJyZW50bHlDaG9zZW5Vbml0JztcclxuaW1wb3J0IHsgZ2V0Tm9kZUZyb21NYXAgfSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgZHJhd1BhdGggPSAodW5pdDogVW5pdCwgcGF0aDphbnlbXSwgc3RhcnRJbmRleDogbnVtYmVyID0gMCkgPT4ge1xyXG4gIGlmKGN1cnJlbnRseUNob3NlblVuaXQgJiYgY3VycmVudGx5Q2hvc2VuVW5pdC5pZCA9PT0gdW5pdC5pZCkge1xyXG4gICAgY2xlYXJQYXRoKCk7XHJcbiAgICBpZihzdGFydEluZGV4ICE9IDApIHtcclxuICAgICAgc3RhcnRJbmRleCAtPSAxO1xyXG4gICAgfVxyXG4gICAgbGV0IGZpcnN0Tm9kZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBmb3IobGV0IGkgPSBzdGFydEluZGV4OyBpICE9IHBhdGgubGVuZ3RoIC0gMTsgKytpKSB7XHJcbiAgICAgIGxldCBjdXJyZW50Tm9kZUNlbnRlclggPSBwYXRoW2ldLnggKyAoZ3JpZFNpemUgLyAyKTtcclxuICAgICAgbGV0IGN1cnJlbnROb2RlQ2VudGVyWSA9IHBhdGhbaV0ueSArIChncmlkU2l6ZSAvIDIpO1xyXG4gICAgICBsZXQgbmV4dE5vZGVDZW50ZXJYID0gcGF0aFtpICsgMV0ueCArIChncmlkU2l6ZSAvIDIpO1xyXG4gICAgICBsZXQgbmV4dE5vZGVDZW50ZXJZID0gcGF0aFtpICsgMV0ueSArIChncmlkU2l6ZSAvIDIpO1xyXG4gICAgICBwYXRoQ3R4LnNhdmUoKTtcclxuICAgICAgcGF0aEN0eC5zdHJva2VTdHlsZSA9ICd5ZWxsb3cnO1xyXG4gICAgICBwYXRoQ3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBpZihmaXJzdE5vZGUpIHtcclxuICAgICAgICBwYXRoQ3R4Lm1vdmVUbyh1bml0LmNlbnRlclgsIHVuaXQuY2VudGVyWSk7XHJcbiAgICAgICAgZmlyc3ROb2RlID0gZmFsc2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGF0aEN0eC5tb3ZlVG8oY3VycmVudE5vZGVDZW50ZXJYLCBjdXJyZW50Tm9kZUNlbnRlclkpO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhDdHgubGluZVRvKG5leHROb2RlQ2VudGVyWCwgbmV4dE5vZGVDZW50ZXJZKTtcclxuICAgICAgcGF0aEN0eC5zdHJva2UoKTtcclxuICAgICAgaWYoaSA9PSBwYXRoLmxlbmd0aCAtIDIpIHtcclxuICAgICAgICBsZXQgcmFkaXVzID0gTWF0aC5yb3VuZChncmlkU2l6ZSAvIDQpO1xyXG4gICAgICAgIHBhdGhDdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgcGF0aEN0eC5hcmMobmV4dE5vZGVDZW50ZXJYLCBuZXh0Tm9kZUNlbnRlclksIHJhZGl1cywgMCwgTWF0aC5QSSoyKTtcclxuICAgICAgICBwYXRoQ3R4LmZpbGwoKTtcclxuICAgICAgICBwYXRoQ3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICB9XHJcbiAgICAgIHBhdGhDdHgucmVzdG9yZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNsZWFyUGF0aCA9ICgpID0+IHtcclxuICBwYXRoQ3R4LmNsZWFyUmVjdCgwLCAwLCBNQVBfV0lEVEgsIE1BUF9IRUlHSFQpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJDdXJyZW50Tm9kZSA9ICh1bml0OiBVbml0KSA9PiB7XHJcbiAgbGV0IG5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0LngsIHVuaXQueSk7XHJcbiAgcGF0aEN0eC5jbGVhclJlY3Qobm9kZS54LCBub2RlLnksIGdyaWRTaXplLCBncmlkU2l6ZSk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBjYWxjdWxhdGVDaGFuY2VUb0dldE91dE9mQ29tYmF0LFxyXG4gIHVuaXRDYW5HZXRPdXRPZkNvbWJhdFxyXG59IGZyb20gJy4vb3V0T2ZDb21iYXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjYWxjdWxhdGVDaGFuY2VUb0dldE91dE9mQ29tYmF0LFxyXG4gIHVuaXRDYW5HZXRPdXRPZkNvbWJhdFxyXG59XHJcbiIsImltcG9ydCB7IGdyaWRTaXplIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgZmluZFBhdGhGcm9tT25lTm9kZVRvQW5vdGhlciB9IGZyb20gJy4uLy4uLy4uL3BhdGgnO1xyXG5pbXBvcnQge1xyXG4gIG1ha2VNb3ZlbWVudEluUHVyc3VlVW5pdCxcclxuICBtYWtlTW92ZW1lbnRJblVwZGF0ZVVuaXRcclxufSBmcm9tICcuL21ha2VNb3ZlbWVudCc7XHJcbmltcG9ydCBVbml0IGZyb20gJy4uLy4uL3R5cGVzL1VuaXQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1vdmVUb05leHROb2RlSW5QdXJzdWVVbml0ID0gKHVuaXQ6VW5pdCwgcHVyc3VlZFVuaXQ6VW5pdCwgY3VycmVudE5vZGU6YW55LCBuZXh0Tm9kZTphbnksIGN1cnJYOm51bWJlciwgY3Vyclk6bnVtYmVyLCBhbGxQYXRoOmFueVtdLCBub2RlSTpudW1iZXIpID0+IHtcclxuICBsZXQgc3RhcnRYID0gY3VycmVudE5vZGUueCArIChncmlkU2l6ZSAqIDAuNSk7XHJcbiAgbGV0IHN0YXJ0WSA9IGN1cnJlbnROb2RlLnkgKyAoZ3JpZFNpemUgKiAwLjUpO1xyXG4gIGxldCBmaW5pc2hYID0gbmV4dE5vZGUueCArIChncmlkU2l6ZSAqIDAuNSk7XHJcbiAgbGV0IGZpbmlzaFkgPSBuZXh0Tm9kZS55ICsgKGdyaWRTaXplICogMC41KTtcclxuICBsZXQgcGF0aCA9IGZpbmRQYXRoRnJvbU9uZU5vZGVUb0Fub3RoZXIoc3RhcnRYLCBzdGFydFksIGZpbmlzaFgsIGZpbmlzaFkpO1xyXG4gIG1ha2VNb3ZlbWVudEluUHVyc3VlVW5pdCh1bml0LCBwdXJzdWVkVW5pdCwgY3VycmVudE5vZGUsIG5leHROb2RlLCBwYXRoLCBhbGxQYXRoLCBjdXJyWCwgY3VyclksIDAsIG5vZGVJKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG1vdmVUb05leHROb2RlSW5VcGRhdGVVbml0ID0gKHVuaXQ6VW5pdCwgY3VycmVudE5vZGU6YW55LCBuZXh0Tm9kZTphbnksIGN1cnJYOm51bWJlciwgY3Vyclk6bnVtYmVyLCBhbGxQYXRoOmFueVtdLCBub2RlSTpudW1iZXIpID0+IHtcclxuICBsZXQgc3RhcnRYID0gY3VycmVudE5vZGUueCArIChncmlkU2l6ZSAqIDAuNSk7XHJcbiAgbGV0IHN0YXJ0WSA9IGN1cnJlbnROb2RlLnkgKyAoZ3JpZFNpemUgKiAwLjUpO1xyXG4gIGxldCBmaW5pc2hYID0gbmV4dE5vZGUueCArIChncmlkU2l6ZSAqIDAuNSk7XHJcbiAgbGV0IGZpbmlzaFkgPSBuZXh0Tm9kZS55ICsgKGdyaWRTaXplICogMC41KTtcclxuICBsZXQgcGF0aCA9IGZpbmRQYXRoRnJvbU9uZU5vZGVUb0Fub3RoZXIoc3RhcnRYLCBzdGFydFksIGZpbmlzaFgsIGZpbmlzaFkpO1xyXG4gIG1ha2VNb3ZlbWVudEluVXBkYXRlVW5pdCh1bml0LCBjdXJyZW50Tm9kZSwgbmV4dE5vZGUsIHBhdGgsIGFsbFBhdGgsIGN1cnJYLCBjdXJyWSwgMCwgbm9kZUkpO1xyXG59XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4uLy4uL3R5cGVzL1VuaXQnO1xyXG5pbXBvcnQgeyBkcmF3VW5pdEljb24gfSBmcm9tICcuLi8uLi8uLi9VSS9iYXR0bGVVSS91bml0UGFuZWwvaWNvbi9kcmF3VW5pdEljb24nO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0b3BNb3ZpbmcgPSAodW5pdDpVbml0LCBjdXJyZW50Tm9kZTphbnkpID0+IHtcclxuICB1bml0LnNldElzTW92aW5nVG9GYWxzZSgpO1xyXG4gIHVuaXQuc2V0Q3VycmVudE5vZGUoY3VycmVudE5vZGUpO1xyXG4gIHVuaXQuc2V0TmV4dE5vZGUoY3VycmVudE5vZGUpO1xyXG4gIGRyYXdVbml0SWNvbih1bml0KTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGdldFByaW9yaXR5VW5pdCxcclxuICB1bml0Q2FuTW92ZVRvVGhlTm9kZVxyXG59IGZyb20gJy4vYXNzZXNzUHJpb3JpdHknO1xyXG5cclxuZXhwb3J0IHtcclxuICBnZXRQcmlvcml0eVVuaXQsXHJcbiAgdW5pdENhbk1vdmVUb1RoZU5vZGVcclxufVxyXG4iLCJpbXBvcnQge3NodWZmbGVVbml0c30gZnJvbSAnLi9zaHVmZmxlVW5pdHMnO1xyXG5pbXBvcnQge3NodWZmbGVJRH0gZnJvbSAnLi9zaHVmZmxlSUQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBzaHVmZmxlSUQsXHJcbiAgc2h1ZmZsZVVuaXRzXHJcbn1cclxuIiwiaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi8uLi8uLi91bml0XCI7XHJcbmltcG9ydCB7IGdldEludGVyY2VwdGlvbk5vZGVzIH0gZnJvbSBcIi4vZ2V0SW50ZXJjZXB0aW9uTm9kZXNcIjtcclxuaW1wb3J0IHsgcGxheWVyVW5pdHMsIGNvbXB1dGVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0c1wiO1xyXG5pbXBvcnQgeyBpc1VuaXRJbkFycmF5IH0gZnJvbSBcIi4uL2dlbmVyYWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRJbnRlcmNlcHRlZEVuZW1pZXMgPSAodW5pdDogVW5pdCk6IFVuaXRbXSA9PiB7XHJcbiAgICBsZXQgZW5lbWllczogVW5pdFtdO1xyXG4gICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdwbGF5ZXInKSB7XHJcbiAgICAgICAgZW5lbWllcyA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gICAgfSBcclxuICAgIGVsc2UgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgICAgICBlbmVtaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgcGxheWVyVW5pdHMpO1xyXG4gICAgfVxyXG4gICAgbGV0IGludGVyY2VwdGlvbkVuZW1pZXM6IFVuaXRbXSA9IFtdO1xyXG4gICAgbGV0IGludGVyY2VwdGlvbk5vZGVzID0gZ2V0SW50ZXJjZXB0aW9uTm9kZXModW5pdCk7XHJcbiAgICBmb3IobGV0IGVuZW15IG9mIGVuZW1pZXMpIHtcclxuICAgICAgICBmb3IobGV0IG5vZGUgb2YgaW50ZXJjZXB0aW9uTm9kZXMpIHtcclxuICAgICAgICAgICAgaWYoZW5lbXkuY3VycmVudE5vZGUueCA9PSBub2RlLnggJiYgZW5lbXkuY3VycmVudE5vZGUueSA9PT0gbm9kZS55KSB7XHJcbiAgICAgICAgICAgICAgICBpZighaXNVbml0SW5BcnJheShlbmVteSwgaW50ZXJjZXB0aW9uRW5lbWllcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRpb25FbmVtaWVzLnB1c2goZW5lbXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGludGVyY2VwdGlvbkVuZW1pZXM7XHJcbn0iLCJpbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4uLy4uLy4uL3VuaXRcIjtcclxuaW1wb3J0IHsgY29tcHV0ZXJVbml0cywgcGxheWVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEJsb2NrZWRFbmVtaWVzID0gKHVuaXQ6IFVuaXQpOiBVbml0W10gPT4ge1xyXG4gICAgbGV0IGJsb2NrZWRFbmVtaWVzOiBVbml0W10gPSBbXTtcclxuICAgIGxldCBlbmVtaWVzOiBVbml0W107XHJcbiAgICBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ3BsYXllcicpIHtcclxuICAgICAgICBlbmVtaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgY29tcHV0ZXJVbml0cyk7XHJcbiAgICB9IFxyXG4gICAgZWxzZSBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ2NvbXB1dGVyJykge1xyXG4gICAgICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBwbGF5ZXJVbml0cyk7XHJcbiAgICB9IFxyXG4gICAgZm9yKGxldCBlbmVteSBvZiBlbmVtaWVzKSB7XHJcbiAgICAgICAgaWYodW5pdC5uZXh0Tm9kZS54ID09PSBlbmVteS5uZXh0Tm9kZS54ICYmIHVuaXQubmV4dE5vZGUueSA9PT0gZW5lbXkubmV4dE5vZGUueSkge1xyXG4gICAgICAgICAgICBibG9ja2VkRW5lbWllcy5wdXNoKGVuZW15KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYmxvY2tlZEVuZW1pZXM7XHJcbn0iLCJpbXBvcnQgeyBpbml0aWFsQ29tcHV0ZXJQb3dlciB9IGZyb20gJy4uLy4uL3N0b3JlL0FJL3Bvd2VyL2luaXRpYWxDb21wdXRlclBvd2VyJztcclxuaW1wb3J0IHsgaW5pdGlhbFBsYXllclBvd2VyIH0gZnJvbSAnLi4vLi4vc3RvcmUvQUkvcG93ZXIvaW5pdGlhbFBsYXllclBvd2VyJztcclxuaW1wb3J0IHsgcGxheWVyUG93ZXIgfSBmcm9tICcuLi8uLi9zdG9yZS9BSS9wb3dlci9wbGF5ZXJQb3dlcic7XHJcbmltcG9ydCB7IGNvbXB1dGVyUG93ZXIgfSBmcm9tICcuLi8uLi9zdG9yZS9BSS9wb3dlci9jb21wdXRlclBvd2VyJztcclxuaW1wb3J0IHtcclxuICBwbGF5ZXJVbml0cyxcclxuICBjb21wdXRlclVuaXRzXHJcbn0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7IHJldmVhbGVkVW5pdHMgfSBmcm9tICcuLi8uLi9zdG9yZS9BSS9lbmVtaWVzL3JldmVhbGVkRW5lbWllcyc7XHJcbmltcG9ydCB7IHZpc2libGVGb3JDb21wdXRlclVuaXRzIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC92aXNpYmxlVW5pdHMnO1xyXG5pbXBvcnQgeyB2aXNpYmxlUGxheWVyVW5pdHNQb3dlciB9IGZyb20gJy4uLy4uL3N0b3JlL0FJL3Bvd2VyL3Zpc2libGVQbGF5ZXJVbml0c1Bvd2VyJztcclxuaW1wb3J0IHsgcmV2ZWFsZWRVbml0c1Bvd2VyIH0gZnJvbSAnLi4vLi4vc3RvcmUvQUkvcG93ZXIvcmV2ZWFsZWRVbml0c1Bvd2VyJztcclxuaW1wb3J0IFBvd2VyIGZyb20gJy4uLy4uL3N0b3JlL0FJL3Bvd2VyL1Bvd2VyJztcclxuaW1wb3J0IHsgVW5pdCB9IGZyb20gJy4uLy4uL3VuaXQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRvdGFsQ29tcHV0ZXJQb3dlciA9ICgpOiBQb3dlciA9PiB7XHJcbiAgbGV0IGxvY2FsUG93ZXIgPSBuZXcgUG93ZXIoKTtcclxuICBjb21wdXRlclBvd2VyLnJlc2V0QWxsUHJvcGVydGllcygpO1xyXG4gIGZvcihsZXQgdW5pdCBvZiBjb21wdXRlclVuaXRzKSB7XHJcbiAgICBkZWNvbXBvc2VVbml0UHJvcHModW5pdCwgJ2NvbXB1dGVyJyk7XHJcbiAgICBkZWNvbXBvc2VQb3dlcihsb2NhbFBvd2VyLCB1bml0KTtcclxuICB9XHJcbiAgcmV0dXJuIGxvY2FsUG93ZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVUb3RhbFBsYXllclBvd2VyID0gKCk6IFBvd2VyID0+IHtcclxuICBsZXQgbG9jYWxQb3dlciA9IG5ldyBQb3dlcigpO1xyXG4gIHBsYXllclBvd2VyLnJlc2V0QWxsUHJvcGVydGllcygpO1xyXG4gIGZvcihsZXQgdW5pdCBvZiBwbGF5ZXJVbml0cykge1xyXG4gICAgZGVjb21wb3NlVW5pdFByb3BzKHVuaXQpO1xyXG4gICAgZGVjb21wb3NlUG93ZXIobG9jYWxQb3dlciwgdW5pdCk7XHJcbiAgfVxyXG4gIHJldHVybiBsb2NhbFBvd2VyO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlUmV2ZWFsZWRVbml0c1Bvd2VyID0gKCkgPT4ge1xyXG4gIHJldmVhbGVkVW5pdHNQb3dlci5yZXNldEFsbFByb3BlcnRpZXMoKTtcclxuICBmb3IobGV0IHVuaXQgb2YgcmV2ZWFsZWRVbml0cykge1xyXG4gICAgZGVjb21wb3NlVW5pdFByb3BzKHVuaXQsICdyZXZlYWxlZFVuaXRzJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlVmlzaWJsZVBsYXllclBvd2VyID0gKCkgPT4ge1xyXG4gIHZpc2libGVQbGF5ZXJVbml0c1Bvd2VyLnJlc2V0QWxsUHJvcGVydGllcygpO1xyXG4gIGZvcihsZXQgdW5pdCBvZiB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cykge1xyXG4gICAgZGVjb21wb3NlVW5pdFByb3BzKHVuaXQsICd2aXNpYmxlUGxheWVyVW5pdHMnKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVJbml0aWFsQ29tcHV0ZXJQb3dlciA9ICgpID0+IHtcclxuICBpbml0aWFsQ29tcHV0ZXJQb3dlci5yZXNldEFsbFByb3BlcnRpZXMoKTtcclxuICBmb3IobGV0IHVuaXQgb2YgY29tcHV0ZXJVbml0cykge1xyXG4gICAgZGVjb21wb3NlVW5pdFByb3BzKHVuaXQsICdpbml0aWFsQ29tcHV0ZXInKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVJbml0aWFsUGxheWVyUG93ZXIgPSAoKSA9PiB7XHJcbiAgaW5pdGlhbFBsYXllclBvd2VyLnJlc2V0QWxsUHJvcGVydGllcygpO1xyXG4gIGZvcihsZXQgdW5pdCBvZiBwbGF5ZXJVbml0cykge1xyXG4gICAgZGVjb21wb3NlVW5pdFByb3BzKHVuaXQsICdpbml0aWFsUGxheWVyJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlVG90YWxQb3dlciA9ICgpID0+IHtcclxuICBjYWxjdWxhdGVUb3RhbENvbXB1dGVyUG93ZXIoKTtcclxuICBjYWxjdWxhdGVUb3RhbFBsYXllclBvd2VyKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVJbml0aWFsUG93ZXIgPSAoKSA9PiB7XHJcbiAgY2FsY3VsYXRlSW5pdGlhbENvbXB1dGVyUG93ZXIoKTtcclxuICBjYWxjdWxhdGVJbml0aWFsUGxheWVyUG93ZXIoKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlY29tcG9zZVVuaXRQcm9wcyA9ICh1bml0OmFueSwgc2lkZTpzdHJpbmc9J3BsYXllcicpID0+IHtcclxuICBpZihzaWRlID09PSAndmlzaWJsZVBsYXllclVuaXRzJykge1xyXG4gICAgZGVjb21wb3NlUG93ZXIodmlzaWJsZVBsYXllclVuaXRzUG93ZXIsIHVuaXQpO1xyXG4gIH1cclxuICBpZihzaWRlID09PSAncGxheWVyJykge1xyXG4gICAgZGVjb21wb3NlUG93ZXIocGxheWVyUG93ZXIsIHVuaXQpO1xyXG4gIH1cclxuICBlbHNlIGlmKHNpZGUgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGRlY29tcG9zZVBvd2VyKGNvbXB1dGVyUG93ZXIsIHVuaXQpO1xyXG4gIH1cclxuICBlbHNlIGlmKHNpZGUgPT09ICdpbml0aWFsQ29tcHV0ZXInKSB7XHJcbiAgICBkZWNvbXBvc2VQb3dlcihpbml0aWFsQ29tcHV0ZXJQb3dlciwgdW5pdCk7XHJcbiAgfVxyXG4gIGVsc2UgaWYoc2lkZSA9PT0gJ2luaXRpYWxQbGF5ZXInKSB7XHJcbiAgICBkZWNvbXBvc2VQb3dlcihpbml0aWFsUGxheWVyUG93ZXIsIHVuaXQpO1xyXG4gIH1cclxuXHJcbiAgZWxzZSBpZihzaWRlID09PSAncmV2ZWFsZWRVbml0cycpIHtcclxuICAgIGRlY29tcG9zZVBvd2VyKHJldmVhbGVkVW5pdHNQb3dlciwgdW5pdCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVjb21wb3NlUG93ZXIgPSAocG93ZXI6IFBvd2VyLCB1bml0OiBVbml0KSA9PiB7XHJcbiAgcG93ZXIuaW5jcmVtZW50UXVhbnRpdHkoKTtcclxuICBwb3dlci5hZGRIZWFsdGgodW5pdC5oZWFsdGgpO1xyXG4gIHBvd2VyLmFkZFNwZWVkKHVuaXQuc3BlZWQpO1xyXG4gIHBvd2VyLmFkZEFybW91cih1bml0LmFybW91cik7XHJcbiAgcG93ZXIuYWRkTWVsZWVEYW1hZ2UodW5pdC5tZWxlZURhbWFnZSk7XHJcbiAgcG93ZXIuYWRkTWlzc2lsZURhbWFnZSh1bml0Lm1pc3NpbGVEYW1hZ2UpO1xyXG4gIHBvd2VyLmFkZERpc2NpcGxpbmUodW5pdC5kaXNjaXBsaW5lKTtcclxuICBwb3dlci5hZGRNb3JhbGUodW5pdC5tb3JhbGUpO1xyXG4gIHBvd2VyLmFkZENvbmRpdGlvbih1bml0LmNvbmRpdGlvbik7XHJcbn0iLCJleHBvcnQgY29uc3QgZ2V0UmFuZG9tVmFsdWVJblJhbmdlID0gKG1pbjpudW1iZXIsIG1heDpudW1iZXIpOiBudW1iZXIgPT4ge1xyXG5cclxuICAgIGlmKG1pbiA+PSBtYXgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbWluIG9yIG1heCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKChtaW4gPiAwICYmIG1pbiA8IDEpICYmIChtYXggPiAwICYmIG1heCA8IDEpKSB7XHJcblxyXG4gICAgICAgIGxldCBuZXdNaW46IG51bWJlciA9IE1hdGgucm91bmQobWluICogMTAwKTtcclxuICAgICAgICBsZXQgbmV3TWF4OiBudW1iZXIgPSBNYXRoLnJvdW5kKG1heCAqIDEwMCk7XHJcblxyXG4gICAgICAgIGxldCByYW5kb206IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChuZXdNYXggLSBuZXdNaW4gKyAxKSkgKyBuZXdNaW47XHJcblxyXG4gICAgICAgIHJldHVybiByYW5kb20gKiAwLjAxO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9IFxyXG5cclxufSIsImV4cG9ydCBlbnVtIENvbW1hbmQge1xyXG4gICAgQXR0YWNrLFxyXG4gICAgQmVDbG9zZVRvVW5pdCxcclxuICAgIE1vdmVUb05vZGVcclxufSIsImltcG9ydCB7XHJcbiAgZ2V0Q2xvc2VzdFVuaXRUb05vZGUsXHJcbiAgZ2V0Q2xvc2VzdFVuaXRUb090aGVyVW5pdCxcclxuICBnZXRCZXN0VW5pdEJ5UHJvcGVydHksXHJcbiAgZ2V0V29yc3RVbml0QnlQcm9wZXJ0eSxcclxuICBnZXRCZXN0RW5lbXlCeVByb3BlcnR5LFxyXG4gIGdldFdvcnN0RW5lbXlCeVByb3BlcnR5LFxyXG4gIGdldE5vdEZpZ2h0aW5nVW5pdHMsXHJcbiAgZ2V0Q2xvc2VzdEVuZW15VG9Vbml0LFxyXG4gIGdldEZyZWVVbml0cyxcclxuICBnZXRVbml0c0J5VGFzayxcclxuICBnZXRVbml0c0J5UHJvcGVydHlWYWx1ZSxcclxuICBnZXRTY291dHNOdW1iZXIsXHJcbiAgZ2V0VW5pdHNXaGVyZVZhbHVlXHJcbn0gZnJvbSAnLi9BSV9hY3Rpb25zJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZ2V0Q2xvc2VzdFVuaXRUb05vZGUsXHJcbiAgZ2V0Q2xvc2VzdFVuaXRUb090aGVyVW5pdCxcclxuICBnZXRCZXN0VW5pdEJ5UHJvcGVydHksXHJcbiAgZ2V0V29yc3RVbml0QnlQcm9wZXJ0eSxcclxuICBnZXRCZXN0RW5lbXlCeVByb3BlcnR5LFxyXG4gIGdldFdvcnN0RW5lbXlCeVByb3BlcnR5LFxyXG4gIGdldE5vdEZpZ2h0aW5nVW5pdHMsXHJcbiAgZ2V0Q2xvc2VzdEVuZW15VG9Vbml0LFxyXG4gIGdldEZyZWVVbml0cyxcclxuICBnZXRVbml0c0J5VGFzayxcclxuICBnZXRVbml0c0J5UHJvcGVydHlWYWx1ZSxcclxuICBnZXRTY291dHNOdW1iZXIsXHJcbiAgZ2V0VW5pdHNXaGVyZVZhbHVlXHJcbn1cclxuIiwiaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi8uLi8uLi91bml0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlVG90YWxVbml0c1dlaWdodCA9ICh1bml0czogVW5pdFtdKTogbnVtYmVyID0+IHtcclxuICAgIGxldCB3ZWlnaHQgPSAwO1xyXG4gICAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICAgICAgd2VpZ2h0ICs9IHVuaXQud2VpZ2h0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHdlaWdodDtcclxufSIsImltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvVW5pdHNJbkdyaWRzLCBnZXRTdXJyb3VuZGVkTm9kZXMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgZ2V0UmFuZG9tVW5pdCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91bml0L3JhbmRvbS9nZXRSYW5kb21Vbml0XCI7XHJcbmltcG9ydCB7IGF0dGFja0VuZW15IH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IGdldFN1cnJvdW5kZWRVbml0cyB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9zdXJyb3VuZGVkL2dldFN1cnJvdW5kZWRVbml0c1wiO1xyXG5pbXBvcnQgeyB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZS91bml0L3Zpc2libGVVbml0c1wiO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Ob2RlIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL25vZGVcIjtcclxuaW1wb3J0IHsgY3VycmVudENvbW1hbmROdW1iZXIgfSBmcm9tIFwiLi4vLi4vLi4vQUkvc3RyYXRlZ3lNb2R1bGUvZGVjaXNpb25Vbml0L2NvbW1hbmROdW1iZXIvY3VycmVudENvbW1hbmROdW1iZXJcIjtcclxuaW1wb3J0IHsgbW92ZVRvIH0gZnJvbSAnLi4vY29tbW9uL21vdmVUbyc7XHJcblxyXG5leHBvcnQgY29uc3QgYmVDbG9zZVRvID0gKFxyXG4gICAgdW5pdDogVW5pdCwgXHJcbiAgICBhY3Rpb25Vbml0OiBVbml0LCBcclxuICAgIGNvbW1hbmROdW1iZXI6IG51bWJlciwgXHJcbiAgICBwcm90ZWN0aW9uOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICBuZXdDb21tYW5kOiBib29sZWFuID0gZmFsc2VcclxuKSA9PiB7XHJcbiAgICBpZihjb21tYW5kTnVtYmVyICE9PSBjdXJyZW50Q29tbWFuZE51bWJlcikgcmV0dXJuO1xyXG4gICAgaWYobmV3Q29tbWFuZCB8fCAoIXVuaXQuaXNGaWdodGluZyAmJiAhdW5pdC5pc01vdmluZykpIHtcclxuICAgICAgICBsZXQgZGlzdGFuY2VCZXR3ZWVuVW5pdHM6IG51bWJlciA9IGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5Hcmlkcyh1bml0LCBhY3Rpb25Vbml0KTtcclxuICAgICAgICBpZihhY3Rpb25Vbml0LmlzRmlnaHRpbmcpIHtcclxuICAgICAgICAgICAgaWYoYWN0aW9uVW5pdC5maWd0aEFnYWluc3QuYWxsLmxlbmd0aCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdW5pdFRvQXR0YWNrOiBVbml0ID0gZ2V0UmFuZG9tVW5pdChhY3Rpb25Vbml0LmZpZ3RoQWdhaW5zdC5hbGwpO1xyXG4gICAgICAgICAgICAgICAgYXR0YWNrRW5lbXkodW5pdCwgdW5pdFRvQXR0YWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHByb3RlY3Rpb24gJiYgZ2V0U3Vycm91bmRlZFVuaXRzKGFjdGlvblVuaXQsIHZpc2libGVGb3JDb21wdXRlclVuaXRzLCAzKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBlbmVtaWVzID0gZ2V0U3Vycm91bmRlZFVuaXRzKGFjdGlvblVuaXQsIHZpc2libGVGb3JDb21wdXRlclVuaXRzLCAzKTtcclxuICAgICAgICAgICAgbGV0IHVuaXRUb0F0dGFjazogVW5pdCA9IGdldFJhbmRvbVVuaXQoZW5lbWllcyk7XHJcbiAgICAgICAgICAgIGF0dGFja0VuZW15KHVuaXQsIHVuaXRUb0F0dGFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoZGlzdGFuY2VCZXR3ZWVuVW5pdHMgPj0gMikge1xyXG4gICAgICAgICAgICBsZXQgbm9kZXMgPSBnZXRTdXJyb3VuZGVkTm9kZXMoYWN0aW9uVW5pdCwgMik7XHJcbiAgICAgICAgICAgIGxldCBub2RlID0gZ2V0UmFuZG9tTm9kZShub2Rlcyk7XHJcbiAgICAgICAgICAgIG1vdmVUbyh1bml0LCBub2RlLngsIG5vZGUueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGJlQ2xvc2VUbyh1bml0LCBhY3Rpb25Vbml0LCBjb21tYW5kTnVtYmVyLCBwcm90ZWN0aW9uKTtcclxuICAgIH0sIDIwMDApOyAgXHJcbn0iLCJpbXBvcnQge1xyXG4gIHJvc3RlckltZ0hlaWdodCxcclxuICByb3N0ZXJJbWdXaWR0aFxyXG59IGZyb20gJy4uL3Jvc3RlclNldHRpbmdzJztcclxuaW1wb3J0IHtyb3N0ZXJ9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N0b3JlL3Jvc3Rlci9yb3N0ZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzVW5pdFNlbGVjdGVkSW5Sb3N0ZXIgPSAobW91c2VYOm51bWJlciwgbW91c2VZOm51bWJlcikgPT4ge1xyXG4gIGZvcihsZXQgdW5pdCBvZiByb3N0ZXIpIHtcclxuICAgIGxldCB4MCA9IHVuaXQueDtcclxuICAgIGxldCB4MSA9IHgwICsgcm9zdGVySW1nV2lkdGg7XHJcbiAgICBsZXQgeTAgPSB1bml0Lnk7XHJcbiAgICBsZXQgeTEgPSB5MCArIHJvc3RlckltZ0hlaWdodDtcclxuICAgIGlmKG1vdXNlWCA+PSB4MCAmJiBtb3VzZVggPCB4MSAmJiBtb3VzZVkgPj0geTAgJiYgbW91c2VZIDwgeTEpIHtcclxuICAgICAgcmV0dXJuIHVuaXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYXJteUxheW91dEhlaWdodCxcclxuICBhcm15TGF5b3V0V2lkdGhcclxufSBmcm9tICcuL2FybXlMYXlvdXQnO1xyXG5pbXBvcnQge1xyXG4gIGluZm9MYXlvdXRIZWlnaHQsXHJcbiAgaW5mb0xheW91dFdpZHRoXHJcbn0gZnJvbSAnLi9pbmZvTGF5b3V0JztcclxuaW1wb3J0IHtcclxuICB1bml0Um9zdGVySGVpZ2h0LFxyXG4gIHVuaXRSb3N0ZXJXaWR0aFxyXG59IGZyb20gJy4vcm9zdGVyTGF5b3V0JztcclxuaW1wb3J0IHtcclxuICBzdGFydEJhdHRsZVN0YXJ0WSxcclxuICBzdGFydEJhdHRsZUhlaWdodCxcclxuICBzdGFydEJhdHRsZVdpZHRoXHJcbn0gZnJvbSAnLi9ib3R0b21MYXlvdXQnO1xyXG5pbXBvcnQge1xyXG4gIHRpdGxlSGVpZ2h0XHJcbn0gZnJvbSAnLi91cHBlckxheW91dCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGFybXlMYXlvdXRIZWlnaHQsXHJcbiAgYXJteUxheW91dFdpZHRoLFxyXG4gIGluZm9MYXlvdXRIZWlnaHQsXHJcbiAgaW5mb0xheW91dFdpZHRoLFxyXG4gIHVuaXRSb3N0ZXJIZWlnaHQsXHJcbiAgdW5pdFJvc3RlcldpZHRoLFxyXG4gIHN0YXJ0QmF0dGxlU3RhcnRZLFxyXG4gIHN0YXJ0QmF0dGxlSGVpZ2h0LFxyXG4gIHN0YXJ0QmF0dGxlV2lkdGgsXHJcbiAgdGl0bGVIZWlnaHRcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHRpdGxlSGVpZ2h0XHJcbn0gZnJvbSAnLi9sYXlvdXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICB0aXRsZUhlaWdodFxyXG59XHJcbiIsImV4cG9ydCBsZXQgaG92ZXJlZFVuaXQ6YW55ID0gbnVsbDtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VIb3ZlcmVkVW5pdCA9ICh1bml0OmFueSkgPT4ge1xyXG4gIGlmKHVuaXQpIHtcclxuICAgIGhvdmVyZWRVbml0ID0gdW5pdDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtkaXNwbGF5QXJteX0gZnJvbSAnLi9kaXNwbGF5QXJteSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRpc3BsYXlBcm15XHJcbn1cclxuIiwiaW1wb3J0IHsgbWFpbk1lbnVDdHggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7IHNpZGUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUvc2lkZXMvc2lkZSc7XHJcbmltcG9ydCB7XHJcbiAgcGxheWVyQXJteSxcclxuICBjb21wdXRlckFybXlcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdG9yZS9yb3N0ZXIvYXJteSc7XHJcbmltcG9ydCB7XHJcbiAgdW5pdFJvc3RlcldpZHRoLFxyXG4gIHRpdGxlSGVpZ2h0XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtcclxuICBhcm15SW1nSGVpZ2h0LFxyXG4gIGFybXlJbWdXaWR0aFxyXG59IGZyb20gJy4uL2FybXlTZXR0aW5ncyc7XHJcbmltcG9ydCB7IHVuaXRJY29uSW1hZ2VzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3RvcmUvaW1hZ2VzL3VuaXRJY29uSW1hZ2VzJztcclxuXHJcbmV4cG9ydCBsZXQgZW1wdHlCb3g6YW55O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BsYXlBcm15ID0gKGk6bnVtYmVyID0gMSkgPT4ge1xyXG4gIGxldCBhcm15OmFueVtdID0gW107XHJcbiAgaWYoc2lkZSA9PT0gJ3BsYXllcicpIHtcclxuICAgIGFybXkgPSBwbGF5ZXJBcm15O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBhcm15ID0gY29tcHV0ZXJBcm15O1xyXG4gIH1cclxuXHJcbiAgaWYoYXJteS5sZW5ndGggPj0gMSAmJiBhcm15Lmxlbmd0aCA+PSBpKSB7XHJcbiAgICBsZXQgdW5pdCA9IGFybXlbaSAtIDFdO1xyXG4gICAgbGV0IHggPSB1bml0LmFybXlQb3NpdGlvbi54O1xyXG4gICAgbGV0IHkgPSB1bml0LmFybXlQb3NpdGlvbi55O1xyXG4gICAgbWFpbk1lbnVDdHguZHJhd0ltYWdlKHVuaXRJY29uSW1hZ2VzW3VuaXQubmFtZV0sIHgsIHksIGFybXlJbWdXaWR0aCwgYXJteUltZ0hlaWdodCk7XHJcbiAgICBpKys7XHJcbiAgICBkaXNwbGF5QXJteShpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gZHJhdyBlbXB0eSBib3hcclxuICAgIGxldCB1bml0TnVtYmVyID0gYXJteS5sZW5ndGg7XHJcbiAgICBsZXQgbWFyZ2luV2lkdGggPSBhcm15SW1nV2lkdGggKyAxMDtcclxuICAgIGxldCBtYXJnaW5IZWlnaHQgPSBhcm15SW1nSGVpZ2h0ICsgMTU7XHJcbiAgICBsZXQgZGVmYXVsdFdpZHRoID0gdW5pdFJvc3RlcldpZHRoICsgMjA7XHJcbiAgICBsZXQgeDpudW1iZXI7XHJcbiAgICBsZXQgeTpudW1iZXI7XHJcbiAgICBpZihhcm15Lmxlbmd0aCA9PT0gMCkgeyAvLyBpZiBubyB1bml0cyBpbiBhcm15XHJcbiAgICAgIHggPSB1bml0Um9zdGVyV2lkdGgrMjA7IC8vIHggYW5kIHkgZGVmYXVsdFxyXG4gICAgICB5ID0gdGl0bGVIZWlnaHQrNjA7XHJcbiAgICB9IGVsc2UgeyAvLyB0aGVyZSBhcmUgdW5pdHMgcmVtYWluIGluIGFybXlcclxuICAgICAgbGV0IHByZXZYID0gYXJteVthcm15Lmxlbmd0aCAtIDFdLmFybXlQb3NpdGlvbi54OyAvLyB4IGFuZCB5IGxhc3QgdW5pdCdzXHJcbiAgICAgIGxldCBwcmV2WSA9IGFybXlbYXJteS5sZW5ndGggLSAxXS5hcm15UG9zaXRpb24ueTsgLy8gYXJteSBwb3NpdGlvbiB4IGFuZFxyXG4gICAgICBpZih1bml0TnVtYmVyICUgNSA9PT0gMCkge1xyXG4gICAgICAgIHggPSBkZWZhdWx0V2lkdGg7XHJcbiAgICAgICAgeSA9IHByZXZZICsgbWFyZ2luSGVpZ2h0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHggPSBwcmV2WCArIG1hcmdpbldpZHRoO1xyXG4gICAgICAgIHkgPSBwcmV2WTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmKGkgPD0gMTApIHtcclxuICAgICAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNmZmYnO1xyXG4gICAgICBtYWluTWVudUN0eC5maWxsUmVjdCh4LCB5LCBhcm15SW1nV2lkdGgsIGFybXlJbWdIZWlnaHQpO1xyXG4gICAgICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAnIzAwMCc7XHJcbiAgICAgIG1haW5NZW51Q3R4LnN0cm9rZVJlY3QoeCwgeSwgYXJteUltZ1dpZHRoLCBhcm15SW1nSGVpZ2h0KTtcclxuXHJcbiAgICAgIGVtcHR5Qm94ID0ge1xyXG4gICAgICAgIGksXHJcbiAgICAgICAgeCxcclxuICAgICAgICB5LFxyXG4gICAgICAgIGZpbGxlZDogZmFsc2VcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVtcHR5Qm94ID0ge1xyXG4gICAgICAgIGksXHJcbiAgICAgICAgeCxcclxuICAgICAgICB5LFxyXG4gICAgICAgIGZpbGxlZDogdHJ1ZVxyXG4gICAgICB9O1xyXG4gICAgfSAgIFxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRyYXdSZW1vdmVJY29uXHJcbn0gZnJvbSAnLi9yZW1vdmVJY29uJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZHJhd1JlbW92ZUljb25cclxufVxyXG4iLCJpbXBvcnQge3NpZGV9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9tYWluTWVudS9zaWRlcy9zaWRlJztcclxuaW1wb3J0IHtcclxuICBjb21wdXRlckFybXksXHJcbiAgcGxheWVyQXJteVxyXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL3N0b3JlL3Jvc3Rlci9hcm15JztcclxuaW1wb3J0IHthcm15SW1nV2lkdGh9IGZyb20gJy4uL2FybXlTZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgY29uc3QgaXNVbml0U2hvdWxkQmVSZW1vdmVkID0gKG1vdXNlWDpudW1iZXIsIG1vdXNlWTpudW1iZXIpID0+IHtcclxuICBsZXQgYXJteTphbnlbXSA9IFtdO1xyXG4gIGlmKHNpZGUgPT09ICdwbGF5ZXInKSB7XHJcbiAgICBhcm15ID0gcGxheWVyQXJteTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXJteSA9IGNvbXB1dGVyQXJteTtcclxuICB9XHJcbiAgZm9yKGxldCB1bml0IG9mIGFybXkpIHtcclxuICAgIGxldCB4MCA9IHVuaXQuYXJteVBvc2l0aW9uLnggKyBhcm15SW1nV2lkdGggLSAxNTtcclxuICAgIGxldCB4MSA9IHVuaXQuYXJteVBvc2l0aW9uLnggKyBhcm15SW1nV2lkdGggLSA1O1xyXG4gICAgbGV0IHkwID0gdW5pdC5hcm15UG9zaXRpb24ueSArIDQ7XHJcbiAgICBsZXQgeTEgPSB1bml0LmFybXlQb3NpdGlvbi55ICsgMTU7XHJcbiAgICBpZihtb3VzZVggPj0geDAgJiYgbW91c2VYIDwgeDEgJiYgbW91c2VZID49IHkwICYmIG1vdXNlWSA8IHkxKSB7XHJcbiAgICAgIHJldHVybiB1bml0O1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRyYXdNb25leUJveFxyXG59IGZyb20gJy4vZHJhd01vbmV5Qm94JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZHJhd01vbmV5Qm94XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBjaGFuZ2VUb3RhbEdvbGQsXHJcbiAgZmlsbFRvdGFsR29sZCxcclxuICBzaG93VG90YWxHb2xkXHJcbn0gZnJvbSAnLi90b3RhbEdvbGQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjaGFuZ2VUb3RhbEdvbGQsXHJcbiAgZmlsbFRvdGFsR29sZCxcclxuICBzaG93VG90YWxHb2xkXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkaXNwbGF5Q2hvc2VuVW5pdHNcclxufSBmcm9tICcuL2FybXlMYXlvdXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkaXNwbGF5Q2hvc2VuVW5pdHNcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRyYXdCb3R0b21MYXlvdXRcclxufSBmcm9tICcuL2RyYXdsYXlvdXQnO1xyXG5pbXBvcnQge1xyXG4gIGZpbGxMYXlvdXRcclxufSBmcm9tICcuL2ZpbGxMYXlvdXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkcmF3Qm90dG9tTGF5b3V0LFxyXG4gIGZpbGxMYXlvdXRcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHN0YXJ0QmF0dGxlSGVpZ2h0LFxyXG4gIHN0YXJ0QmF0dGxlU3RhcnRZLFxyXG4gIHN0YXJ0QmF0dGxlV2lkdGhcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUnO1xyXG5pbXBvcnQge1xyXG4gIG1haW5NZW51Q3R4XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZpbGxMYXlvdXQgPSAoKSA9PiB7XHJcbiAgbWFpbk1lbnVDdHguY2xlYXJSZWN0KDAsIHN0YXJ0QmF0dGxlU3RhcnRZLCBzdGFydEJhdHRsZVdpZHRoLCBzdGFydEJhdHRsZUhlaWdodCk7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyMyYzJmMzMnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxSZWN0KDAsIHN0YXJ0QmF0dGxlU3RhcnRZLCBzdGFydEJhdHRsZVdpZHRoLCBzdGFydEJhdHRsZVdpZHRoKTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGJhdHRsZVNldHRpbmdzWCxcclxuICBiYXR0bGVTZXR0aW5nc1ksXHJcbiAgaGVpZ2h0LFxyXG4gIHdpZHRoXHJcbn0gZnJvbSAnLi4vLi4vaW5mb1NldHRpbmdzJztcclxuXHJcbmV4cG9ydCBjb25zdCBvbkNob29zZUJhdHRsZVNldHRpbmdzID0gKG1vdXNlWDpudW1iZXIsIG1vdXNlWTpudW1iZXIpID0+IHtcclxuICBsZXQgeDAgPSBiYXR0bGVTZXR0aW5nc1g7XHJcbiAgbGV0IHgxID0gYmF0dGxlU2V0dGluZ3NYICsgd2lkdGg7XHJcbiAgbGV0IHkwID0gYmF0dGxlU2V0dGluZ3NZO1xyXG4gIGxldCB5MSA9IGJhdHRsZVNldHRpbmdzWSArIGhlaWdodDtcclxuICBpZihtb3VzZVggPj0geDAgJiYgbW91c2VYIDwgeDEgJiYgbW91c2VZID49IHkwICYmIG1vdXNlWSA8IHkxKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgaGVpZ2h0LFxyXG4gIHVuaXRJbmZvWCxcclxuICB1bml0SW5mb1ksXHJcbiAgd2lkdGhcclxufSBmcm9tICcuLi8uLi9pbmZvU2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uQ2hvb3NlVW5pdEluZm8gPSAobW91c2VYOm51bWJlciwgbW91c2VZOm51bWJlcikgPT4ge1xyXG4gIGxldCB4MCA9IHVuaXRJbmZvWDtcclxuICBsZXQgeDEgPSB1bml0SW5mb1ggKyB3aWR0aDtcclxuICBsZXQgeTAgPSB1bml0SW5mb1k7XHJcbiAgbGV0IHkxID0gdW5pdEluZm9ZICsgaGVpZ2h0O1xyXG4gIGlmKG1vdXNlWCA+PSB4MCAmJiBtb3VzZVggPCB4MSAmJiBtb3VzZVkgPj0geTAgJiYgbW91c2VZIDwgeTEpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkaXNwbGF5SW5mb1xyXG59IGZyb20gJy4vZGlzcGxheUluZm8nO1xyXG5cclxuZXhwb3J0IHtcclxuICBkaXNwbGF5SW5mb1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYmF0dGxlU2V0dGluZ1N3aXRjaGVyXHJcbn0gZnJvbSAnLi9iYXR0bGVTZXR0aW5nU3dpdGNoZXInO1xyXG5pbXBvcnQge1xyXG4gIHNob3dTd2l0aGVyXHJcbn0gZnJvbSAnLi9zaG93U3dpdGNoZXInO1xyXG5pbXBvcnQge1xyXG4gIHVuaXRJbmZvU3dpdGNoZXJcclxufSBmcm9tICcuL3VuaXRJbmZvU3dpdGNoZXInO1xyXG5cclxuZXhwb3J0IHtcclxuICBiYXR0bGVTZXR0aW5nU3dpdGNoZXIsXHJcbiAgc2hvd1N3aXRoZXIsXHJcbiAgdW5pdEluZm9Td2l0Y2hlclxyXG59XHJcbiIsImltcG9ydCB7bWFpbk1lbnVDdHh9IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuaW1wb3J0IHtcclxuICBiYXR0bGVTZXR0aW5nc1gsXHJcbiAgYmF0dGxlU2V0dGluZ3NZLFxyXG4gIGhlaWdodCxcclxuICB3aWR0aFxyXG59IGZyb20gJy4uLy4uL2luZm9TZXR0aW5ncyc7XHJcbmltcG9ydCB7c2hvd0JhdHRsZVNldHRpbmdzfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUvc2hvdy9zaG93SW5mbyc7XHJcblxyXG5leHBvcnQgY29uc3QgYmF0dGxlU2V0dGluZ1N3aXRjaGVyID0gKCkgPT4ge1xyXG4gIGlmKHNob3dCYXR0bGVTZXR0aW5ncykge1xyXG4gICAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNmZmYnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAnI2NkZDFkNic7XHJcbiAgfVxyXG4gIG1haW5NZW51Q3R4LmZpbGxSZWN0KGJhdHRsZVNldHRpbmdzWCwgYmF0dGxlU2V0dGluZ3NZLCB3aWR0aCwgaGVpZ2h0KTtcclxuICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAnIzAwMCc7XHJcbiAgbWFpbk1lbnVDdHguc3Ryb2tlUmVjdChiYXR0bGVTZXR0aW5nc1gsIGJhdHRsZVNldHRpbmdzWSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgLy8gdGV4dFxyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMjRweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxUZXh0KCdCYXR0bGUgU2V0dGluZ3MnLCBiYXR0bGVTZXR0aW5nc1ggKyA1LCBiYXR0bGVTZXR0aW5nc1kgKyAyMCk7XHJcbn1cclxuIiwiaW1wb3J0IHttYWluTWVudUN0eH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge1xyXG4gIGhlaWdodCxcclxuICB1bml0SW5mb1gsXHJcbiAgdW5pdEluZm9ZLFxyXG4gIHdpZHRoXHJcbn0gZnJvbSAnLi4vLi4vaW5mb1NldHRpbmdzJztcclxuaW1wb3J0IHtcclxuICBzaG93VW5pdEluZm9cclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUvc2hvdy9zaG93SW5mbyc7XHJcblxyXG5leHBvcnQgY29uc3QgdW5pdEluZm9Td2l0Y2hlciA9ICgpID0+IHtcclxuICBpZihzaG93VW5pdEluZm8pIHtcclxuICAgIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICcjZmZmJztcclxuICB9IGVsc2Uge1xyXG4gICAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNjZGQxZDYnO1xyXG4gIH1cclxuICBtYWluTWVudUN0eC5maWxsUmVjdCh1bml0SW5mb1gsIHVuaXRJbmZvWSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyMwMDAnO1xyXG4gIG1haW5NZW51Q3R4LnN0cm9rZVJlY3QodW5pdEluZm9YLCB1bml0SW5mb1ksIHdpZHRoLCBoZWlnaHQpO1xyXG4gIC8vIHRleHRcclxuICBtYWluTWVudUN0eC5mb250ID0gJzI0cHggc2VyaWYnO1xyXG4gIG1haW5NZW51Q3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcclxuICBtYWluTWVudUN0eC5maWxsVGV4dCgnVW5pdCBJbmZvJywgdW5pdEluZm9YICsgMzUsIHVuaXRJbmZvWSArIDIwKTtcclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkaW5nQ3R4IH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9jb250ZXh0L2NvbnRleHRcIjtcclxuaW1wb3J0IHsgbG9hZGluZ0NhbnZhcyB9IGZyb20gXCIuLi8uLi9jb25maWcvY2FudmFzL2xvYWRpbmdcIjtcclxuaW1wb3J0IHsgTUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUIH0gZnJvbSBcIi4uLy4uL2NvbmZpZ1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdMb2FkaW5nQ2FudmFzID0gKCkgPT4ge1xyXG4gICAgbG9hZGluZ0NhbnZhcy5zdHlsZS56SW5kZXggPSAnNyc7XHJcbiAgICBsb2FkaW5nQ3R4LmZpbGxTdHlsZSA9ICcjY2NjJztcclxuICAgIGxvYWRpbmdDdHguZmlsbFJlY3QoMCwgMCwgTUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUKTtcclxuICAgIGxvYWRpbmdDdHguZm9udCA9IFwiNDhweCBzZXJpZlwiO1xyXG4gICAgbG9hZGluZ0N0eC5maWxsU3R5bGUgPSBcIiMwMDBcIjtcclxuICAgIGxldCB4ID0gKE1BUF9XSURUSCAvIDIpIC0gMTAwO1xyXG4gICAgbGV0IHkgPSAoQ0FOVkFTX0hFSUdIVCAvIDIpIC0gNTA7XHJcbiAgICBsb2FkaW5nQ3R4LmZpbGxUZXh0KFwiTG9hZGluZy4uLlwiLCB4LCB5KTtcclxufSIsImltcG9ydCB7XHJcbiAgZGVsZXRlTm9kZUZyb21Db21wdXRlck5vZGVzLFxyXG4gIGRlbGV0ZU5vZGVGcm9tUGxheWVyTm9kZXMsXHJcbn0gZnJvbSAnLi9ub2Rlcyc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRlbGV0ZU5vZGVGcm9tQ29tcHV0ZXJOb2RlcyxcclxuICBkZWxldGVOb2RlRnJvbVBsYXllck5vZGVzXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBncmlkU2l6ZSxcclxuICBNQVBfSEVJR0hULFxyXG4gIE1BUF9XSURUSFxyXG59IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7XHJcbiAgZGVsZXRlT2JqZWN0RnJvbUFycmF5LFxyXG4gIGdldE5vZGVGcm9tTWFwXHJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tICcuLi8uLi8uLi9tYXAvbm9kZXMvTWFwTm9kZSc7XHJcblxyXG5leHBvcnQgbGV0IGNvbXB1dGVyVW5pdHNOb2RlczogTWFwTm9kZVtdID0gW107XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUNvbXB1dGVyVW5pdHNOb2RlcyA9ICgpID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICBjb25zdCBjb21wdXRlclgwID0gTUFQX1dJRFRIIC0gKGdyaWRTaXplICogMik7XHJcbiAgICBjb25zdCBjb21wdXRlclgxID0gTUFQX1dJRFRIO1xyXG4gICAgY29uc3QgY29tcHV0ZXJZMCA9IDA7XHJcbiAgICBjb25zdCBjb21wdXRlclkxID0gTUFQX0hFSUdIVDtcclxuXHJcbiAgICBmb3IobGV0IHggPSBjb21wdXRlclgwOyB4IDw9IGNvbXB1dGVyWDE7IHggKz0gZ3JpZFNpemUpIHtcclxuICAgICAgZm9yKGxldCB5ID0gY29tcHV0ZXJZMDsgeSA8PSBjb21wdXRlclkxOyB5Kz0gZ3JpZFNpemUpIHtcclxuICAgICAgICBsZXQgbm9kZSA9IGdldE5vZGVGcm9tTWFwKHgsIHkpO1xyXG4gICAgICAgIGlmKG5vZGUpIHtcclxuICAgICAgICAgIGNvbXB1dGVyVW5pdHNOb2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzb2x2ZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlTm9kZUZyb21Db21wdXRlck5vZGVzID0gKG5vZGU6IE1hcE5vZGUpID0+IHtcclxuICBpZihub2RlKSB7XHJcbiAgICBjb21wdXRlclVuaXRzTm9kZXMgPSBkZWxldGVPYmplY3RGcm9tQXJyYXkobm9kZSwgY29tcHV0ZXJVbml0c05vZGVzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBncmlkU2l6ZSxcclxuICBNQVBfSEVJR0hULFxyXG59IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7XHJcbiAgZGVsZXRlT2JqZWN0RnJvbUFycmF5LFxyXG4gIGdldE5vZGVGcm9tTWFwXHJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tICcuLi8uLi8uLi9tYXAvbm9kZXMvTWFwTm9kZSc7XHJcblxyXG5leHBvcnQgbGV0IHBsYXllclVuaXRzTm9kZXM6IE1hcE5vZGVbXSA9IFtdO1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVQbGF5ZXJVbml0c05vZGVzID0gKCkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGNvbnN0IHBsYXllclgwID0gMDtcclxuICAgIGNvbnN0IHBsYXllclgxID0gZ3JpZFNpemUgKiAyO1xyXG4gICAgY29uc3QgcGxheWVyWTAgPSAwO1xyXG4gICAgY29uc3QgcGxheWVyWTEgPSBNQVBfSEVJR0hUO1xyXG4gICAgZm9yKGxldCB4ID0gcGxheWVyWDA7IHggPD0gcGxheWVyWDE7IHggKz0gZ3JpZFNpemUpIHtcclxuICAgICAgZm9yKGxldCB5ID0gcGxheWVyWTA7IHkgPD0gcGxheWVyWTE7IHkrPSBncmlkU2l6ZSkge1xyXG4gICAgICAgIGxldCBub2RlID0gZ2V0Tm9kZUZyb21NYXAoeCwgeSk7XHJcbiAgICAgICAgaWYobm9kZSkge1xyXG4gICAgICAgICAgcGxheWVyVW5pdHNOb2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVzb2x2ZSgpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZGVsZXRlTm9kZUZyb21QbGF5ZXJOb2RlcyA9IChub2RlOiBNYXBOb2RlKSA9PiB7XHJcbiAgaWYobm9kZSkge1xyXG4gICAgcGxheWVyVW5pdHNOb2RlcyA9IGRlbGV0ZU9iamVjdEZyb21BcnJheShub2RlLCBwbGF5ZXJVbml0c05vZGVzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtsYXVuY2hHYW1lfSBmcm9tICcuL2xhdW5jaCc7XHJcblxyXG5sYXVuY2hHYW1lKCk7XHJcbiIsImltcG9ydCB7bGF1bmNoQmF0dGxlfSBmcm9tICcuL2xhdW5jaEJhdHRsZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGxhdW5jaEJhdHRsZVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgTUFQX1dJRFRILFxyXG4gIENBTlZBU19IRUlHSFRcclxufSBmcm9tICcuLic7XHJcblxyXG5leHBvcnQgY29uc3QgYXV4aWxpYXJ5Q2FudmFzOmFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdXhpbGlhcnknKTtcclxuXHJcbmlmKGF1eGlsaWFyeUNhbnZhcykge1xyXG4gIGF1eGlsaWFyeUNhbnZhcy53aWR0aCA9IE1BUF9XSURUSDtcclxuICBhdXhpbGlhcnlDYW52YXMuaGVpZ2h0ID0gQ0FOVkFTX0hFSUdIVDtcclxufVxyXG4iLCJleHBvcnQgY29uc3QgTUFQX1dJRFRIOiBudW1iZXIgPSAxNTIwO1xyXG5leHBvcnQgY29uc3QgTUFQX0hFSUdIVDogbnVtYmVyID0gNjAwO1xyXG5leHBvcnQgY29uc3QgQ0FOVkFTX0hFSUdIVDogbnVtYmVyID0gNzIwO1xyXG4iLCJleHBvcnQgY29uc3QgZ3JpZFNpemU6bnVtYmVyID0gNDA7XHJcbiIsImltcG9ydCB7XHJcbiAgbWFpbk1lbnVNb2RlLFxyXG4gIHNldEJhdHRsZU1vZGUsXHJcbiAgc2V0TWFpbk1lbnVNb2RlXHJcbn0gZnJvbSAnLi9nbG9iYWxDb25maWcnO1xyXG5cclxuZXhwb3J0IHtcclxuICBtYWluTWVudU1vZGUsXHJcbiAgc2V0QmF0dGxlTW9kZSxcclxuICBzZXRNYWluTWVudU1vZGVcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIE1BUF9IRUlHSFQsXHJcbiAgTUFQX1dJRFRIXHJcbn0gZnJvbSAnLi4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDYW52YXM6YW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JhY2tncm91bmQnKTtcclxuXHJcbmlmKGJhY2tncm91bmRDYW52YXMpIHtcclxuICBiYWNrZ3JvdW5kQ2FudmFzLndpZHRoID0gTUFQX1dJRFRIO1xyXG4gIGJhY2tncm91bmRDYW52YXMuaGVpZ2h0ID0gTUFQX0hFSUdIVDtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIENBTlZBU19IRUlHSFQsXHJcbiAgTUFQX1dJRFRIXHJcbn0gZnJvbSAnLi4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbnZhczphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJyk7XHJcblxyXG5pZihjYW52YXMpIHtcclxuICBjYW52YXMud2lkdGggPSBNQVBfV0lEVEg7XHJcbiAgY2FudmFzLmhlaWdodCA9IENBTlZBU19IRUlHSFQ7XHJcbiAgY2FudmFzLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkXCI7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBNQVBfV0lEVEgsXHJcbiAgTUFQX0hFSUdIVFxyXG59IGZyb20gJy4uJztcclxuXHJcbmV4cG9ydCBjb25zdCB0ZXJyYWluOmFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXJyYWluJyk7XHJcblxyXG5pZih0ZXJyYWluKSB7XHJcbiAgdGVycmFpbi53aWR0aCA9IE1BUF9XSURUSDtcclxuICB0ZXJyYWluLmhlaWdodCA9IE1BUF9IRUlHSFQ7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBDQU5WQVNfSEVJR0hULFxyXG4gIE1BUF9XSURUSFxyXG59IGZyb20gJy4uJztcclxuXHJcbmV4cG9ydCBjb25zdCBkcmFnQW5kRHJvcENhbnZhczphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHJhZ0FuZERyb3AnKTtcclxuXHJcbmlmKGRyYWdBbmREcm9wQ2FudmFzKSB7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXMud2lkdGggPSBNQVBfV0lEVEg7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXMuaGVpZ2h0ID0gQ0FOVkFTX0hFSUdIVDtcclxufVxyXG4iLCJpbXBvcnQge01BUF9XSURUSCwgQ0FOVkFTX0hFSUdIVH0gZnJvbSAnLi4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1haW5NZW51OmFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYWluTWVudScpO1xyXG5cclxuaWYobWFpbk1lbnUpIHtcclxuICBtYWluTWVudS53aWR0aCA9IE1BUF9XSURUSDtcclxuICBtYWluTWVudS5oZWlnaHQgPSBDQU5WQVNfSEVJR0hUO1xyXG4gIG1haW5NZW51LnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkXCI7XHJcbn1cclxuIiwiaW1wb3J0IHtsb2FkSW1hZ2V9IGZyb20gJy4vbG9hZEltYWdlJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgbG9hZEltYWdlXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhZGROb2RlSW50b0FycmF5XHJcbn0gZnJvbSAnLi90b0FycmF5JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYWRkTm9kZUludG9BcnJheVxyXG59XHJcbiIsImltcG9ydCB7aXNPYmplY3RJbkFycmF5fSBmcm9tICcuLi8uLi9vYmplY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZE5vZGVJbnRvQXJyYXkgPSAobm9kZTphbnksIGFycjphbnlbXSkgPT4ge1xyXG4gIGxldCB1cGRhdGVkQXJyID0gT2JqZWN0LmFzc2lnbihbXSwgYXJyKTtcclxuICBpZighaXNPYmplY3RJbkFycmF5KG5vZGUsIGFycikpIHtcclxuICAgIHVwZGF0ZWRBcnIucHVzaChub2RlKTtcclxuICB9XHJcbiAgcmV0dXJuIHVwZGF0ZWRBcnI7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkZWxldGVPYmplY3RGcm9tQXJyYXksXHJcbiAgaXNPYmplY3RJbkFycmF5LFxyXG4gIGlzT2JqZWN0RW1wdHlcclxufSBmcm9tICcuL29ialV0aWxzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZGVsZXRlT2JqZWN0RnJvbUFycmF5LFxyXG4gIGlzT2JqZWN0SW5BcnJheSxcclxuICBpc09iamVjdEVtcHR5XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHMsXHJcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzXHJcbn0gZnJvbSAnLi9kaXN0YW5jZUluR3JpZHMnO1xyXG5cclxuZXhwb3J0IHtcclxuICBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHMsXHJcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzXHJcbn1cclxuIiwiaW1wb3J0IHtncmlkU2l6ZX0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL21hcCc7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RGlzdGFuY2VCZXR3ZWVuVW5pdEFuZE5vZGVJbkdyaWRzID0gKHVuaXQ6YW55LCBub2RlOmFueSk6bnVtYmVyID0+IHtcclxuICBsZXQgbm9kZVg6bnVtYmVyID0gbm9kZS54O1xyXG4gIGxldCBub2RlWTpudW1iZXIgPSBub2RlLnk7XHJcbiAgbGV0IHVuaXRYOm51bWJlciA9IHVuaXQuY3VycmVudE5vZGUueDtcclxuICBsZXQgdW5pdFk6bnVtYmVyID0gdW5pdC5jdXJyZW50Tm9kZS55O1xyXG4gIGxldCBkaXN0YW5jZVg6bnVtYmVyID0gKE1hdGguYWJzKHVuaXRYIC0gbm9kZVgpKSAvIGdyaWRTaXplO1xyXG4gIGxldCBkaXN0YW5jZVk6bnVtYmVyID0gKE1hdGguYWJzKHVuaXRZIC0gbm9kZVkpKSAvIGdyaWRTaXplO1xyXG4gIGxldCBkaXN0YW5jZTpudW1iZXIgPSBkaXN0YW5jZVggKyBkaXN0YW5jZVk7XHJcbiAgcmV0dXJuIGRpc3RhbmNlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzID0gKG5vZGUxOmFueSwgbm9kZTI6YW55KTpudW1iZXIgPT4ge1xyXG4gIGxldCBub2RlMVg6bnVtYmVyID0gbm9kZTEueDtcclxuICBsZXQgbm9kZTFZOm51bWJlciA9IG5vZGUxLnk7XHJcbiAgbGV0IG5vZGUyWDpudW1iZXIgPSBub2RlMi54O1xyXG4gIGxldCBub2RlMlk6bnVtYmVyID0gbm9kZTIueTtcclxuICBsZXQgZGlzdGFuY2VYOm51bWJlciA9IChNYXRoLmFicyhub2RlMVggLSBub2RlMlgpKSAvIGdyaWRTaXplO1xyXG4gIGxldCBkaXN0YW5jZVk6bnVtYmVyID0gKE1hdGguYWJzKG5vZGUxWSAtIG5vZGUyWSkpIC8gZ3JpZFNpemU7XHJcbiAgbGV0IGRpc3RhbmNlOm51bWJlciA9IGRpc3RhbmNlWCArIGRpc3RhbmNlWTtcclxuICByZXR1cm4gZGlzdGFuY2U7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBnZXROb2RlRnJvbUFycmF5XHJcbn0gZnJvbSAnLi9mcm9tQXJyYXknO1xyXG5pbXBvcnQge1xyXG4gIGdldENsb3Nlc3RUb0VuZW15U2lkZU5vZGVzLFxyXG4gIGdldENsb3Nlc3RUb0VuZW15Tm9kZXNcclxufSBmcm9tICcuL2Nsb3Nlc3RUb0VuZW15JztcclxuaW1wb3J0IHtcclxuICBnZXRGYXJ0aGVzdE5vZGVGcm9tRW5lbXksXHJcbiAgZ2V0RmFydGhlc3RYTm9kZXNcclxufSBmcm9tICcuL2ZhcnRoZXN0JztcclxuaW1wb3J0IHtcclxuICBnZXROb2RlRnJvbU1hcFxyXG59IGZyb20gJy4vZnJvbU1hcCc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0TWluVmFsdWVGcm9tTm9kZXMsXHJcbiAgZ2V0TWF4VmFsdWVGcm9tTm9kZXNcclxufSBmcm9tICcuL2Zyb21Ob2RlJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZ2V0Q2xvc2VzdFRvRW5lbXlTaWRlTm9kZXMsXHJcbiAgZ2V0Q2xvc2VzdFRvRW5lbXlOb2RlcyxcclxuICBnZXROb2RlRnJvbUFycmF5LFxyXG4gIGdldEZhcnRoZXN0Tm9kZUZyb21FbmVteSxcclxuICBnZXRGYXJ0aGVzdFhOb2RlcyxcclxuICBnZXROb2RlRnJvbU1hcCxcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRNYXhWYWx1ZUZyb21Ob2Rlc1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBnZXROb2RlRnJvbUFycmF5ID0gKG9iamVjdDphbnksIGFycjphbnlbXSk6YW55ID0+IHtcclxuICBmb3IobGV0IG5vZGUgb2YgYXJyKSB7XHJcbiAgICBpZihub2RlLnggPT09IG9iamVjdC54ICYmIG5vZGUueSAmJiBvYmplY3QueSkge1xyXG4gICAgICByZXR1cm4gbm9kZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2Rlc1xyXG59IGZyb20gJy4uLy4uJztcclxuaW1wb3J0IHtnZXRDbG9zZXN0Tm9kZVRvVW5pdH0gZnJvbSAnLi4vLi4vdW5pdC9hY3Rpb25zJztcclxuaW1wb3J0IHtoaWRpbmdFbmVtaWVzfSBmcm9tICcuLi8uLi8uLi9zdG9yZS9BSS9lbmVtaWVzL2hpZGluZ0VuZW1pZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldENsb3Nlc3RUb0VuZW15U2lkZU5vZGVzID0gKG5vZGVzOmFueSk6YW55W10gPT4ge1xyXG4gIGxldCBjbG9zZXN0Tm9kZXM6YW55W10gPSBbXTtcclxuICBsZXQgbWluVmFsdWUgPSBnZXRNaW5WYWx1ZUZyb21Ob2RlcygneCcsIG5vZGVzKTtcclxuICBmb3IobGV0IG5vZGUgb2Ygbm9kZXMpIHtcclxuICAgIGlmKG5vZGUueCA9PT0gbWluVmFsdWUpIHsgLy8gbWluIHggaXMgY2xvc2VyIHRvIGVuZW15KHBsYXllcikgc2lkZVxyXG4gICAgICBjbG9zZXN0Tm9kZXMucHVzaChub2RlKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGNsb3Nlc3ROb2RlcztcclxufVxyXG5cclxuLypcclxuICBnZXQgY2xvc2VzdCBub2RlIHRvIGVuZW15IHNpZGUgb3JcclxuICBoaWRlZCBlbmVtaWVzLCB0aGVzZSBub2RlcyBhcmVcclxuICBwcmlvcml0aXplIGZvciBleHBsb3JhdGlvblxyXG4qL1xyXG5leHBvcnQgY29uc3QgZ2V0Q2xvc2VzdFRvRW5lbXlOb2RlcyA9IChub2RlczphbnlbXSk6YW55W10gPT4ge1xyXG4gIGxldCBjbG9zZXN0Tm9kZXM6YW55W10gPSBbXTtcclxuICBpZihoaWRpbmdFbmVtaWVzLmxlbmd0aCA9PT0gMCkgeyAvLyBubyB1bml0cyBhcmUgc3BvdHRlZFxyXG4gICAgY2xvc2VzdE5vZGVzID0gZ2V0Q2xvc2VzdFRvRW5lbXlTaWRlTm9kZXMobm9kZXMpOyAvLyBnZXQgbm9kZXMgdGhhdCBjbG9zZSB0byBlbmVteSBzaWRlXHJcbiAgfSBlbHNlIHtcclxuICAgIGZvcihsZXQgaGlkaW5nRW5lbXkgb2YgaGlkaW5nRW5lbWllcykgeyAvLyB0aGVyZSBhcmUgaGlkZWQgZW5lbXlcclxuICAgICAgbGV0IGNsb3Nlc3ROb2RlID0gZ2V0Q2xvc2VzdE5vZGVUb1VuaXQoaGlkaW5nRW5lbXksIG5vZGVzKTtcclxuICAgICAgY2xvc2VzdE5vZGVzLnB1c2goY2xvc2VzdE5vZGUpOyAvLyBhZGQgY2xvc2VzdE5vZGUgaW50byBub2RlcyBhcnJheVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gY2xvc2VzdE5vZGVzO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgY29tcHV0ZXJVbml0cyxcclxuICBwbGF5ZXJVbml0cyxcclxuICB1bml0c1xyXG59IGZyb20gJy4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG5cclxuaW1wb3J0IHtncmlkU2l6ZX0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL21hcCc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvVW5pdHNJbkdyaWRzLFxyXG4gIGRlbGV0ZVVuaXRGcm9tQXJyYXlcclxufSBmcm9tICcuLi9nZW5lcmFsJztcclxuaW1wb3J0IHtnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHN9IGZyb20gJy4uLy4uL25vZGUnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5cclxuXHJcbi8qXHJcbiAgZ2V0IGNsb3Nlc3ROb2RlIGZyb20gbm9kZXMgYXJyYXkgdG8gc3BlY2lmaWMgdW5pdFxyXG4qL1xyXG5leHBvcnQgY29uc3QgZ2V0Q2xvc2VzdE5vZGVUb1VuaXQgPSAodW5pdDpVbml0LCBub2RlczphbnkpOmFueSA9PiB7XHJcbiAgbGV0IGNsb3Nlc3ROb2RlOmFueSA9IG5vZGVzWzBdO1xyXG4gIGZvcihsZXQgaSA9IDE7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgbGV0IGNsb3Nlc3ROb2RlRGlzdGFuY2UgPSBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHModW5pdCwgY2xvc2VzdE5vZGUpO1xyXG4gICAgbGV0IG5vZGVEaXN0YW5jZSA9IGdldERpc3RhbmNlQmV0d2VlblVuaXRBbmROb2RlSW5Hcmlkcyh1bml0LCBub2Rlc1tpXSk7XHJcbiAgICBpZihub2RlRGlzdGFuY2UgPCBjbG9zZXN0Tm9kZURpc3RhbmNlKSB7XHJcbiAgICAgIGNsb3Nlc3ROb2RlID0gbm9kZXNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjbG9zZXN0Tm9kZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGdldEJlc3RVbml0c0J5UHJvcGVydHkgPSAodW5pdHM6VW5pdFtdLCBwcm9wZXJ0eTpzdHJpbmcpOlVuaXRbXSA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRVbml0czphbnlbXSA9IE9iamVjdC5hc3NpZ24oW10sIHVuaXRzKTtcclxuICBsZXQgYmVzdFVuaXRzOlVuaXRbXSA9IFtdO1xyXG4gIGxldCBiZXN0VW5pdDphbnkgPSB1cGRhdGVkVW5pdHNbMF07XHJcbiAgLy8gZ2V0IGJlc3QgdW5pdFxyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCB1cGRhdGVkVW5pdHMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmKGJlc3RVbml0W3Byb3BlcnR5XSA8IHVwZGF0ZWRVbml0c1tpXVtwcm9wZXJ0eV0pIHtcclxuICAgICAgYmVzdFVuaXQgPSB1cGRhdGVkVW5pdHNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIGZpbmQgYWxsIGJlc3QgdW5pdHNcclxuICBmb3IobGV0IHVuaXQgb2YgdXBkYXRlZFVuaXRzKSB7XHJcbiAgICAgIGlmKHVuaXRbcHJvcGVydHldID09PSBiZXN0VW5pdFtwcm9wZXJ0eV0pIHtcclxuICAgICAgICBiZXN0VW5pdHMucHVzaCh1bml0KTtcclxuICAgICAgfVxyXG4gIH1cclxuICByZXR1cm4gYmVzdFVuaXRzO1xyXG59XHJcblxyXG4vKlxyXG4gIHJldHVybiBVbml0cyB0aGF0IGFyZSBjbG9zZXN0IHRvIHRoZSBub2RlIGNlbnRlclxyXG4qL1xyXG5leHBvcnQgY29uc3QgZmluZENsb3Nlc3RVbml0c1RvVGhlTm9kZUNlbnRlciA9IChub2RlOmFueSwgdW5pdHM6VW5pdFtdKTpVbml0W10gPT4ge1xyXG4gIGxldCB1cGRhdGVkVW5pdHM6VW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gIC8vIGNhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoZSBub2RlXHJcbiAgY29uc3QgY2VudGVyWDpudW1iZXIgPSBub2RlLnggKyAoZ3JpZFNpemUgKiAwLjUpO1xyXG4gIGNvbnN0IGNlbnRlclk6bnVtYmVyID0gbm9kZS55ICsgKGdyaWRTaXplICogMC41KTtcclxuICAvLyBmaW5kIGNsb3Nlc3QgdW5pdHNcclxuICBsZXQgY2xvc2VzdFVuaXRzOlVuaXRbXSA9IFtdO1xyXG4gIGxldCBjbG9zZXN0RGlzdGFuY2U6bnVtYmVyO1xyXG4gIGxldCBjbG9zZXN0VW5pdDpVbml0ID0gdXBkYXRlZFVuaXRzWzBdO1xyXG4gIGlmKHVwZGF0ZWRVbml0cy5sZW5ndGggPiAxKSB7IC8vIG1vcmUgdGhhbiAxIHVuaXRcclxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCB1cGRhdGVkVW5pdHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgY2xvc2VzdFVuaXRYOm51bWJlciA9IGNsb3Nlc3RVbml0LmNlbnRlclg7XHJcbiAgICAgIGNvbnN0IGNsb3Nlc3RVbml0WTpudW1iZXIgPSBjbG9zZXN0VW5pdC5jZW50ZXJZO1xyXG4gICAgICBjb25zdCBjdXJyZW50VW5pdFg6bnVtYmVyID0gdXBkYXRlZFVuaXRzW2ldLmNlbnRlclg7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRVbml0WTpudW1iZXIgPSB1cGRhdGVkVW5pdHNbaV0uY2VudGVyWTtcclxuXHJcbiAgICAgIC8vIGZpbmQgZGlmZmVyZW5jZSBpbiBYIGFuZCBZXHJcbiAgICAgIGNvbnN0IGNsb3Nlc3RVbml0RFg6bnVtYmVyID0gTWF0aC5hYnMoY2xvc2VzdFVuaXRYIC0gY2VudGVyWCk7XHJcbiAgICAgIGNvbnN0IGNsb3Nlc3RVbml0RFk6bnVtYmVyID0gTWF0aC5hYnMoY2xvc2VzdFVuaXRZIC0gY2VudGVyWSk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRVbml0RFg6bnVtYmVyID0gTWF0aC5hYnMoY3VycmVudFVuaXRYIC0gY2VudGVyWCk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRVbml0RFk6bnVtYmVyID0gTWF0aC5hYnMoY3VycmVudFVuaXRZIC0gY2VudGVyWSk7XHJcblxyXG4gICAgICAvLyBmaW5kIGRpc3RhbmNlXHJcbiAgICAgIGNvbnN0IGNsb3Nlc3RVbml0RGlzdDpudW1iZXIgPSBNYXRoLnNxcnQoTWF0aC5wb3coY2xvc2VzdFVuaXREWCwgMikgKyBNYXRoLnBvdyhjbG9zZXN0VW5pdERZLCAyKSk7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRVbml0RGlzdDpudW1iZXIgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudFVuaXREWCwgMikgKyBNYXRoLnBvdyhjdXJyZW50VW5pdERZLCAyKSk7XHJcbiAgICAgIGNsb3Nlc3REaXN0YW5jZSA9IGNsb3Nlc3RVbml0RGlzdDtcclxuICAgICAgLy8gY29tcGFyZSBkaXN0YW5jZVxyXG4gICAgICBpZihjdXJyZW50VW5pdERpc3QgPCBjbG9zZXN0VW5pdERpc3QpIHtcclxuICAgICAgICAvLyBub3cgY3VycmVudCB1bml0IGhhcyBiZWNvbWUgY2xvc2VzdCB1bml0XHJcbiAgICAgICAgY2xvc2VzdFVuaXQgPSB1cGRhdGVkVW5pdHNbaV07XHJcbiAgICAgICAgY2xvc2VzdERpc3RhbmNlID0gY3VycmVudFVuaXREaXN0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBub3cgYWRkIGFsbCB1bml0cyB3aXRoIHRoZSBjbG9zZXN0RGlzdGFuY2UgdG8gY2xvc2VzdFVuaXRzXHJcbiAgZm9yKGxldCB1bml0IG9mIHVwZGF0ZWRVbml0cykge1xyXG4gICAgY29uc3QgY3VycmVudFVuaXRYOm51bWJlciA9IHVuaXQuY2VudGVyWDtcclxuICAgIGNvbnN0IGN1cnJlbnRVbml0WTpudW1iZXIgPSB1bml0LmNlbnRlclk7XHJcblxyXG4gICAgLy8gZmluZCBkaWZmZXJlbmNlIGluIFggYW5kIFlcclxuICAgIGNvbnN0IGN1cnJlbnRVbml0RFg6bnVtYmVyID0gTWF0aC5hYnMoY3VycmVudFVuaXRYIC0gY2VudGVyWCk7XHJcbiAgICBjb25zdCBjdXJyZW50VW5pdERZOm51bWJlciA9IE1hdGguYWJzKGN1cnJlbnRVbml0WSAtIGNlbnRlclkpO1xyXG5cclxuICAgIC8vIGZpbmQgZGlzdGFuY2VcclxuICAgIGNvbnN0IGN1cnJlbnRVbml0RGlzdDpudW1iZXIgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudFVuaXREWCwgMikgKyBNYXRoLnBvdyhjdXJyZW50VW5pdERZLCAyKSk7XHJcbiAgICBpZihjdXJyZW50VW5pdERpc3QgPT09IGNsb3Nlc3REaXN0YW5jZSkge1xyXG4gICAgICBjbG9zZXN0VW5pdHMucHVzaCh1bml0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBjbG9zZXN0VW5pdHM7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBnZXRNaW5WYWx1ZUZyb21Ob2RlcyxcclxuICBnZXRNYXhWYWx1ZUZyb21Ob2RlcyxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHNcclxufSBmcm9tICcuLi8uLic7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RmFydGhlc3ROb2RlRnJvbUVuZW15ID0gKGVuZW15OmFueSwgbm9kZXM6YW55W10pOmFueSA9PiB7XHJcbiAgbGV0IGZhcnRoZXN0Tm9kZTphbnkgPSBub2Rlc1swXTtcclxuICBmb3IobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIGxldCBmYXJ0aGVzdE5vZGVEaXN0YW5jZSA9IGdldERpc3RhbmNlQmV0d2VlblVuaXRBbmROb2RlSW5HcmlkcyhlbmVteSwgZmFydGhlc3ROb2RlKTtcclxuICAgIGxldCBub2RlRGlzdGFuY2UgPSBnZXREaXN0YW5jZUJldHdlZW5Vbml0QW5kTm9kZUluR3JpZHMoZW5lbXksIG5vZGVzW2ldKTtcclxuICAgIGlmKG5vZGVEaXN0YW5jZSA+IGZhcnRoZXN0Tm9kZURpc3RhbmNlKSB7XHJcbiAgICAgIGZhcnRoZXN0Tm9kZSA9IG5vZGVzW2ldO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFydGhlc3ROb2RlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RmFydGhlc3RYTm9kZXMgPSAobm9kZXM6YW55W10pOmFueVtdID0+IHtcclxuICBsZXQgZmFydGhlc3ROb2RlczphbnlbXSA9IFtdO1xyXG4gIGxldCBtaW5WYWx1ZSA9IGdldE1pblZhbHVlRnJvbU5vZGVzKCd4Jywgbm9kZXMpO1xyXG4gIGxldCBtYXhWYWx1ZSA9IGdldE1heFZhbHVlRnJvbU5vZGVzKCd4Jywgbm9kZXMpO1xyXG4gIGZvcihsZXQgbm9kZSBvZiBub2Rlcykge1xyXG4gICAgaWYobm9kZS54ID09PSBtaW5WYWx1ZSB8fCBub2RlLnggPT09IG1heFZhbHVlKSB7XHJcbiAgICAgIGZhcnRoZXN0Tm9kZXMucHVzaChub2RlKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZhcnRoZXN0Tm9kZXM7XHJcbn1cclxuIiwiaW1wb3J0IHtjbGVhck1hcH0gZnJvbSAnLi9jbGVhck1hcCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGNsZWFyTWFwXHJcbn1cclxuIiwiaW1wb3J0IHtjdHh9IGZyb20gJy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuaW1wb3J0IHtcclxuICBNQVBfV0lEVEgsXHJcbiAgQ0FOVkFTX0hFSUdIVFxyXG59IGZyb20gJy4uLy4uL2NvbmZpZyc7XHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJNYXAgPSAoKSA9PiB7XHJcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBNQVBfV0lEVEgsIENBTlZBU19IRUlHSFQpO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZHJhd0dyaWRcclxufSBmcm9tICcuL2RyYXdHcmlkJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZHJhd0dyaWRcclxufVxyXG4iLCJpbXBvcnQge2NhbnZhc30gZnJvbSAnLi4vLi4vY29uZmlnL2NhbnZhcyc7XHJcbmltcG9ydCB7Y3R4fSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgTUFQX1dJRFRILFxyXG4gIE1BUF9IRUlHSFQsXHJcbiAgZ3JpZFNpemVcclxufSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdHcmlkID0gKCkgPT4ge1xyXG4gIGZvcihsZXQgeSA9IDA7IHkgPD0gTUFQX0hFSUdIVDsgeSs9IGdyaWRTaXplKSB7XHJcbiAgICBmb3IobGV0IHggPSAwOyB4IDw9IE1BUF9XSURUSDsgeCs9IGdyaWRTaXplKSB7XHJcbiAgICAgIGN0eC5zdHJva2VSZWN0KHgsIHksIGdyaWRTaXplLCBncmlkU2l6ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYWRkTmVpZ2hib3JzLFxyXG4gIG5laWdoYm9yc1xyXG59IGZyb20gJy4vYWRkTmVpZ2hib3JzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYWRkTmVpZ2hib3JzLFxyXG4gIG5laWdoYm9yc1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgTUFQX0hFSUdIVCxcclxuICBncmlkU2l6ZSxcclxuICBNQVBfV0lEVEhcclxufSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tICcuLi9ub2Rlcy9NYXBOb2RlJztcclxuXHJcbmV4cG9ydCBjb25zdCBuZWlnaGJvcnMgPSAobWFwOiBNYXBOb2RlW10sIG5vZGU6IE1hcE5vZGUpOiBNYXBOb2RlW10gPT4ge1xyXG4gIGxldCBkaXJzID0gW1xyXG4gICAge3g6IC1ncmlkU2l6ZSwgeTogLWdyaWRTaXplfSxcclxuICAgIHt4OiAwLCB5OiAtZ3JpZFNpemUsIGRpc3RhbmNlOiAxMH0sXHJcbiAgICB7eDogZ3JpZFNpemUsIHk6IC1ncmlkU2l6ZX0sXHJcbiAgICB7eDogLWdyaWRTaXplLCB5OiAwfSxcclxuICAgIHt4OiBncmlkU2l6ZSwgeTogMH0sXHJcbiAgICB7eDogLWdyaWRTaXplLCB5OiBncmlkU2l6ZX0sXHJcbiAgICB7eDogMCwgeTogZ3JpZFNpemV9LFxyXG4gICAge3g6IGdyaWRTaXplLCB5OiBncmlkU2l6ZX1cclxuICBdO1xyXG4gIGxldCBub2RlTmVpZ2hib3JzOiBNYXBOb2RlW10gPSBbXTtcclxuICBmb3IobGV0IGRpciBvZiBkaXJzKSB7XHJcbiAgICBsZXQgbmVpZ2hib3IgPSB7XHJcbiAgICAgIHg6IG5vZGUueCArIGRpci54LFxyXG4gICAgICB5OiBub2RlLnkgKyBkaXIueVxyXG4gICAgfVxyXG4gICAgaWYobmVpZ2hib3IueCA+PSAwICYmIG5laWdoYm9yLnggPD0gTUFQX1dJRFRIICYmIG5laWdoYm9yLnkgPj0gMCAmJiBuZWlnaGJvci55IDw9IE1BUF9IRUlHSFQpIHtcclxuICAgICAgbGV0IGZvdW5kTm9kZTogTWFwTm9kZTtcclxuICAgICAgZm9yKGxldCBub2RlIG9mIG1hcCkge1xyXG4gICAgICAgIGlmKG5laWdoYm9yLnggPT09IG5vZGUueCAmJiBuZWlnaGJvci55ID09PSBub2RlLnkpIHtcclxuICAgICAgICAgIGZvdW5kTm9kZSA9IG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmKGZvdW5kTm9kZSkge1xyXG4gICAgICAgIG5vZGVOZWlnaGJvcnMucHVzaChmb3VuZE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBub2RlTmVpZ2hib3JzO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYWRkTmVpZ2hib3JzID0gKG1hcDphbnlbXSkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGZvcihsZXQgbm9kZSBvZiBtYXApIHtcclxuICAgICAgbGV0IG4gPSBuZWlnaGJvcnMobWFwLCBub2RlKTtcclxuICAgICAgbm9kZS5uZWlnaGJvcnMgPSBuO1xyXG4gICAgfVxyXG4gICAgcmVzb2x2ZSgpO1xyXG4gIH0pO1xyXG4gIFxyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlTm9kZXN9IGZyb20gJy4vY3JlYXRlTm9kZXMnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjcmVhdGVOb2Rlc1xyXG59XHJcbiIsImltcG9ydCB7IE1BUF9XSURUSCwgTUFQX0hFSUdIVCwgZ3JpZFNpemUgfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XHJcblxyXG5jbGFzcyBNYXBOb2RlIHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBpZih4ICUgZ3JpZFNpemUgIT09IDAgfHwgeSAlIGdyaWRTaXplICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vZGUgY29vcmRpbmF0ZXMgZG8gbm90IGNvcnJlc3BvbmRzIHRvIG1hcCBncmlkIHNpemVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHggPj0gMCAmJiB4IDw9IE1BUF9XSURUSCAmJiB5ID49IDAgJiYgeSA8PSBNQVBfSEVJR0hUKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlIGlzIG91dCBvZiBib3VuZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1hcE5vZGU7IiwiaW1wb3J0IHtcclxuICBjcmVhdGVPbmVPYnN0YWNsZVxyXG59IGZyb20gJy4vY3JlYXRlT2JzdGFjbGUnO1xyXG5cclxuaW1wb3J0IHtcclxuICBjcmVhdGVPYnN0YWNsZXNcclxufSBmcm9tICcuL2NyZWF0ZU9ic3RhY2xlcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVVuaXRPYnN0YWNsZVxyXG59IGZyb20gJy4vdW5pdE9ic3RhY2xlJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgY3JlYXRlT25lT2JzdGFjbGUsXHJcbiAgY3JlYXRlT2JzdGFjbGVzLFxyXG4gIGNyZWF0ZVVuaXRPYnN0YWNsZVxyXG59XHJcbiIsImltcG9ydCB7IGdyaWRTaXplIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHtcclxuICBkZWxldGVPYmplY3RGcm9tQXJyYXksXHJcbiAgZHJhd09ic3RhY2xlXHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZU9uZU9ic3RhY2xlID0gKG1hcDphbnlbXSwgcG9zaXRpb25YOm51bWJlciwgcG9zaXRpb25ZOm51bWJlciwgdHlwZTpzdHJpbmc9J2ZvcmVzdCcpID0+IHtcclxuICBsZXQgbm9kZSA9IHtcclxuICAgIHg6IHBvc2l0aW9uWCxcclxuICAgIHk6IHBvc2l0aW9uWVxyXG4gIH07XHJcbiAgaWYodHlwZSA9PT0gJ2ZvcmVzdCcpIGRyYXdPYnN0YWNsZShub2RlLngsIG5vZGUueSwgZ3JpZFNpemUsIGdyaWRTaXplLCAnLi9zcmMvaW1nL3RlcnJhaW4vdHJlZXMucG5nJyk7XHJcbiAgZWxzZSBpZih0eXBlID09PSAnbW91bnRhaW4nKSBkcmF3T2JzdGFjbGUobm9kZS54LCBub2RlLnksIGdyaWRTaXplLCBncmlkU2l6ZSwnLi9zcmMvaW1nL3RlcnJhaW4vbW91bnRhaW4ucG5nJyk7XHJcbiAgZWxzZSBpZih0eXBlID09PSAncml2ZXInKSBkcmF3T2JzdGFjbGUobm9kZS54LCBub2RlLnksIGdyaWRTaXplLCBncmlkU2l6ZSwnLi9zcmMvaW1nL3RlcnJhaW4vcml2ZXIuanBnJyk7XHJcbiAgcmV0dXJuIGRlbGV0ZU9iamVjdEZyb21BcnJheShub2RlLCBtYXApXHJcbn1cclxuIiwiaW1wb3J0IHtpbml0aWFsTWFwfSBmcm9tICcuLi9jcmVhdGVNYXAvaW5pdGlhbE1hcCc7XHJcbmltcG9ydCB7IGdyaWRTaXplIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHtcclxuICBkZWxldGVPYmplY3RGcm9tQXJyYXksXHJcbiAgZHJhd09ic3RhY2xlXHJcbn0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZU9ic3RhY2xlcyA9IChzdGFydFg6bnVtYmVyLCBmaW5pc2hYOm51bWJlciwgc3RhcnRZOm51bWJlciwgZmluaXNoWTpudW1iZXIsIHR5cGU6c3RyaW5nPSdmb3Jlc3QnKSA9PiB7XHJcbiAgbGV0IG5ld01hcDphbnlbXSA9IGluaXRpYWxNYXA7XHJcbiAgZm9yKGxldCB4ID0gc3RhcnRYOyB4IDw9IGZpbmlzaFg7IHggKz0gZ3JpZFNpemUpIHtcclxuICAgIGZvcihsZXQgeSA9IHN0YXJ0WTsgeSA8PSBmaW5pc2hZOyB5ICs9IGdyaWRTaXplKSB7XHJcbiAgICAgIGxldCBub2RlID0ge1xyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeVxyXG4gICAgICB9XHJcbiAgICAgIG5ld01hcCA9IGRlbGV0ZU9iamVjdEZyb21BcnJheShub2RlLCBuZXdNYXApO1xyXG4gICAgICBsZXQgc3JjOnN0cmluZztcclxuICAgICAgaWYodHlwZSA9PT0gJ2ZvcmVzdCcpIHNyYz0nLi9zcmMvaW1nL3RlcnJhaW4vdHJlZXMucG5nJztcclxuICAgICAgZWxzZSBpZih0eXBlID09PSAnbW91bnRhaW4nKSBzcmM9Jy9zcmMvaW1nL3RlcnJhaW4vbW91bnRhaW4ucG5nJztcclxuICAgICAgZWxzZSBpZih0eXBlID09PSAncml2ZXInKSBzcmM9Jy4vc3JjL2ltZy90ZXJyYWluL3JpdmVyLmpwZyc7XHJcbiAgICAgIGRyYXdPYnN0YWNsZShub2RlLngsIG5vZGUueSwgZ3JpZFNpemUsIGdyaWRTaXplLCBzcmMpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbmV3TWFwO1xyXG59XHJcbiIsImltcG9ydCB7ZGVsZXRlT2JqZWN0RnJvbUFycmF5fSBmcm9tICcuLi8uLi91dGlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlVW5pdE9ic3RhY2xlID0gKG1hcDphbnlbXSwgcG9zaXRpb25YOm51bWJlciwgcG9zaXRpb25ZOm51bWJlcikgPT4ge1xyXG4gIGxldCBub2RlID0ge1xyXG4gICAgeDogcG9zaXRpb25YLFxyXG4gICAgeTogcG9zaXRpb25ZXHJcbiAgfTtcclxuICByZXR1cm4gZGVsZXRlT2JqZWN0RnJvbUFycmF5KG5vZGUsIG1hcClcclxufVxyXG4iLCJpbXBvcnQgeyBncmlkU2l6ZSB9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcclxuaW1wb3J0IHsgc2VhcmNoTWFwIH0gZnJvbSBcIi4uLy4uL21hcC9jcmVhdGVNYXAvaW5pdGlhbE1hcFwiO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tIFwiLi4vLi4vbWFwL25vZGVzL01hcE5vZGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmaW5kWEluU2VhcmNoTWFwID0gKFxyXG4gICAgbGVmdDogbnVtYmVyLFxyXG4gICAgcmlnaHQ6IG51bWJlcixcclxuICAgIHNlYXJjaENvb3JkaW5hdGU6IG51bWJlcixcclxuKTogTWFwTm9kZVtdID0+IHtcclxuICAgIGlmKHJpZ2h0ID49IGxlZnQpIHtcclxuICAgICAgICBsZXQgbWVkaXVtID0gTWF0aC5mbG9vcihsZWZ0ICsgKHJpZ2h0IC0gbGVmdCkgLyAyKTtcclxuICAgICAgICBsZXQgY29vcmRpbmF0ZSA9IG1lZGl1bSAqIGdyaWRTaXplO1xyXG4gICAgICAgIGlmKHNlYXJjaENvb3JkaW5hdGUgPj0gY29vcmRpbmF0ZSAmJiBzZWFyY2hDb29yZGluYXRlIDwgY29vcmRpbmF0ZSArIGdyaWRTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hNYXBbY29vcmRpbmF0ZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoc2VhcmNoQ29vcmRpbmF0ZSA9PT0gY29vcmRpbmF0ZSArIGdyaWRTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hNYXBbY29vcmRpbmF0ZSArIGdyaWRTaXplXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjb29yZGluYXRlID4gc2VhcmNoQ29vcmRpbmF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmluZFhJblNlYXJjaE1hcChsZWZ0LCBtZWRpdW0gLSAxLCBzZWFyY2hDb29yZGluYXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjb29yZGluYXRlIDwgc2VhcmNoQ29vcmRpbmF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmluZFhJblNlYXJjaE1hcChtZWRpdW0gKyAxLCByaWdodCwgc2VhcmNoQ29vcmRpbmF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY29vcmRpbmF0ZVlCaW5hcnlTZWFyY2ggPSAoXHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICByaWdodDogbnVtYmVyLFxyXG4gICAgc2VhcmNoQ29vcmRpbmF0ZTogbnVtYmVyLFxyXG4gICAgbWFwOiBNYXBOb2RlW10pOiBNYXBOb2RlID0+IHtcclxuICAgIGlmKHJpZ2h0ID49IGxlZnQpIHtcclxuICAgICAgICBsZXQgbWVkaXVtID0gTWF0aC5mbG9vcihsZWZ0ICsgKHJpZ2h0IC0gbGVmdCkgLyAyKTtcclxuICAgICAgICBsZXQgbm9kZTogTWFwTm9kZSA9IG1hcFttZWRpdW1dO1xyXG4gICAgICAgIGlmKCFub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihzZWFyY2hDb29yZGluYXRlID49IG5vZGUueSAmJiBzZWFyY2hDb29yZGluYXRlIDwgbm9kZS55ICsgZ3JpZFNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hcFttZWRpdW1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHNlYXJjaENvb3JkaW5hdGUgPT09IG5vZGUueSArIGdyaWRTaXplKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXBbbWVkaXVtICsgMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYobm9kZS55ID4gc2VhcmNoQ29vcmRpbmF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY29vcmRpbmF0ZVlCaW5hcnlTZWFyY2gobGVmdCwgbWVkaXVtIC0gMSwgc2VhcmNoQ29vcmRpbmF0ZSwgbWFwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihub2RlLnkgPCBzZWFyY2hDb29yZGluYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb29yZGluYXRlWUJpbmFyeVNlYXJjaChtZWRpdW0gKyAxLCByaWdodCwgc2VhcmNoQ29vcmRpbmF0ZSwgbWFwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gIEdldCBtaW4gdmFsdWUgb2YgdGhlIG5vZGUgZnJvbSB0aGUgYXJyYXlcclxuKi9cclxuZXhwb3J0IGNvbnN0IGdldE1pblZhbHVlRnJvbU5vZGVzID0gKHNlYXJjaFZhbHVlOmFueSwgbm9kZXM6YW55W10pOmFueSA9PiB7XHJcbiAgbGV0IG1pbiA9IG5vZGVzWzBdO1xyXG4gIGZvcihsZXQgaSA9IDE7IGkgPCBub2Rlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgaWYobWluW3NlYXJjaFZhbHVlXSA+IG5vZGVzW2ldW3NlYXJjaFZhbHVlXSkge1xyXG4gICAgICBtaW4gPSBub2Rlc1tpXTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1pbltzZWFyY2hWYWx1ZV07XHJcbn1cclxuXHJcbi8qXHJcbiAgR2V0IG1pbiB2YWx1ZSBvZiB0aGUgbm9kZSBmcm9tIHRoZSBhcnJheVxyXG4qL1xyXG5leHBvcnQgY29uc3QgZ2V0TWF4VmFsdWVGcm9tTm9kZXMgPSAoc2VhcmNoVmFsdWU6YW55LG5vZGVzOmFueVtdKTphbnkgPT4ge1xyXG4gIGxldCBtYXggPSBub2Rlc1swXTtcclxuICBmb3IobGV0IGkgPSAxOyBpIDwgbm9kZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmKG1heFtzZWFyY2hWYWx1ZV0gPCBub2Rlc1tpXVtzZWFyY2hWYWx1ZV0pIHtcclxuICAgICAgbWF4ID0gbm9kZXNbaV07XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtYXhbc2VhcmNoVmFsdWVdO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZ2V0UmFuZG9tTm9kZVxyXG59IGZyb20gJy4vcmFuZG9tJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZ2V0UmFuZG9tTm9kZVxyXG59XHJcbiIsImltcG9ydCB7c2h1ZmZsZU5vZGVzfSBmcm9tICcuLi9zaHVmZmxlJztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRSYW5kb21Ob2RlID0gKG5vZGVzOmFueVtdKTphbnkgPT4ge1xyXG5cdGxldCBzb3J0ZWROb2RlczphbnlbXSA9IHNodWZmbGVOb2Rlcyhub2Rlcyk7XHJcblx0cmV0dXJuIHNvcnRlZE5vZGVzWzBdO1xyXG59XHJcbiIsImNvbnN0IHN3YXAgPSAoYXJyOmFueVtdLCBhOm51bWJlciwgYjpudW1iZXIpID0+IHtcclxuXHRsZXQgdGVtcCA9IGFyclthXTtcclxuXHRhcnJbYV0gPSBhcnJbYl07XHJcblx0YXJyW2JdID0gdGVtcDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFzc2lnblJhbmRvbVZhbHVlID0gKG5vZGVzOmFueVtdKTphbnlbXSA9PiB7XHJcblx0Zm9yKGxldCBub2RlIG9mIG5vZGVzKSB7XHJcblx0XHRsZXQgcmFuZG9tVmFsdWUgPSBNYXRoLnJhbmRvbSgpO1xyXG5cdFx0bm9kZS5yYW5kb21WYWx1ZSA9IHJhbmRvbVZhbHVlO1xyXG5cdH1cclxuXHRyZXR1cm4gbm9kZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzaHVmZmxlTm9kZXMgPSAobm9kZXM6YW55W10pOmFueVtdID0+IHtcclxuXHRsZXQgdXBkYXRlZE5vZGVzOmFueVtdID0gT2JqZWN0LmFzc2lnbihbXSwgbm9kZXMpO1xyXG5cdGxldCByYW5kb21WYWx1ZU5vZGVzOmFueVtdID0gYXNzaWduUmFuZG9tVmFsdWUodXBkYXRlZE5vZGVzKTtcclxuXHRmb3IobGV0IGkgPSAwOyBpIDwgcmFuZG9tVmFsdWVOb2Rlcy5sZW5ndGg7ICsraSkge1xyXG5cdFx0bGV0IG1pbiA9IGk7XHJcblx0XHRmb3IobGV0IGogPSBpICsgMTsgaiA8IHJhbmRvbVZhbHVlTm9kZXMubGVuZ3RoOyArK2opIHtcclxuXHRcdFx0aWYocmFuZG9tVmFsdWVOb2Rlc1tqXS5yYW5kb21WYWx1ZSA9PT0gcmFuZG9tVmFsdWVOb2Rlc1ttaW5dLnJhbmRvbVZhbHVlKSB7XHJcblx0XHRcdFx0XHRtaW4gPSBqO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHJhbmRvbVZhbHVlTm9kZXNbal0ucmFuZG9tVmFsdWUgPCByYW5kb21WYWx1ZU5vZGVzW21pbl0ucmFuZG9tVmFsdWUpIHtcclxuXHRcdFx0XHRtaW4gPSBqO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZihtaW4gIT09IGkpIHtcclxuXHRcdFx0c3dhcChyYW5kb21WYWx1ZU5vZGVzLCBtaW4sIGkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRsZXQgc2h1ZmZsZWROb2RlczphbnlbXSA9IFtdO1xyXG5cdGZvcihsZXQgbm9kZSBvZiByYW5kb21WYWx1ZU5vZGVzKSB7XHJcblx0XHRkZWxldGUgbm9kZS5yYW5kb21WYWx1ZTtcclxuXHRcdHNodWZmbGVkTm9kZXMucHVzaChub2RlKTtcclxuXHR9XHJcblx0cmV0dXJuIHNodWZmbGVkTm9kZXM7XHJcbn07XHJcbiIsImltcG9ydCB7Z2V0U3Vycm91bmRlZEJsb2NrZWROb2Rlc30gZnJvbSAnLi9nZXRTdXJyb3VuZGVkQmxvY2tlZE5vZGVzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZ2V0U3Vycm91bmRlZEJsb2NrZWROb2Rlc1xyXG59XHJcbiIsImltcG9ydCB7Z2V0U3Vycm91bmRlZE5vZGVzfSBmcm9tICcuLi8uLi9zdXJyb3VuZGVkJztcclxuaW1wb3J0IHtcclxuICBwbGF5ZXJVbml0cyxcclxuICBjb21wdXRlclVuaXRzXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7XHJcbiAgYWRkTm9kZUludG9BcnJheSxcclxuICBkZWxldGVVbml0RnJvbUFycmF5XHJcbn0gZnJvbSAnLi4vLi4nO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG4vKlxyXG4gZ2V0IGNsb3Nlc3QgdG8gdW5pdCBub2RlcyB3aGVyZSBhbGxpZWRVbml0cyBhcmUgbG9jYXRlZFxyXG4gb3IgbW92aW5nIHRvXHJcbiovXHJcbmV4cG9ydCBjb25zdCBnZXRTdXJyb3VuZGVkQmxvY2tlZE5vZGVzID0gKHVuaXQ6VW5pdCkgPT4ge1xyXG4gIGxldCBzdXJyb3VuZGVkTm9kZXMgPSBnZXRTdXJyb3VuZGVkTm9kZXModW5pdCwgMSk7XHJcbiAgbGV0IHN1cnJvdW5kZWRCbG9ja2VkTm9kZXM6YW55W10gPSBbXTtcclxuICBsZXQgYWxsaWVkVW5pdHM6VW5pdFtdO1xyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgYWxsaWVkVW5pdHMgPSBwbGF5ZXJVbml0cztcclxuICB9IGVsc2Uge1xyXG4gICAgYWxsaWVkVW5pdHMgPSBjb21wdXRlclVuaXRzO1xyXG4gIH1cclxuICBsZXQgdXBkYXRlZFVuaXRzOlVuaXRbXSA9IGRlbGV0ZVVuaXRGcm9tQXJyYXkodW5pdCwgYWxsaWVkVW5pdHMpO1xyXG4gIGZvcihsZXQgbm9kZSBvZiBzdXJyb3VuZGVkTm9kZXMpIHtcclxuICAgIGZvcihsZXQgYWxsaWVkVW5pdCBvZiB1cGRhdGVkVW5pdHMpIHtcclxuICAgICAgaWYoYWxsaWVkVW5pdC5jdXJyZW50Tm9kZS54ID09PSBub2RlLnggJiYgYWxsaWVkVW5pdC5jdXJyZW50Tm9kZS55ID09PSBub2RlLnkpIHtcclxuICAgICAgICAgIHN1cnJvdW5kZWRCbG9ja2VkTm9kZXMgPSBhZGROb2RlSW50b0FycmF5KG5vZGUsIHN1cnJvdW5kZWRCbG9ja2VkTm9kZXMpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGFsbGllZFVuaXQubmV4dE5vZGUueCA9PT0gbm9kZS54ICYmIGFsbGllZFVuaXQubmV4dE5vZGUueSA9PT0gbm9kZS55KSB7XHJcbiAgICAgICAgICBzdXJyb3VuZGVkQmxvY2tlZE5vZGVzID0gYWRkTm9kZUludG9BcnJheShub2RlLCBzdXJyb3VuZGVkQmxvY2tlZE5vZGVzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc3Vycm91bmRlZEJsb2NrZWROb2RlcztcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHBsYXllclVuaXRzLFxyXG4gIGNvbXB1dGVyVW5pdHNcclxufSBmcm9tICcuLi8uLi9zdG9yZS91bml0L3VuaXRzJztcclxuaW1wb3J0IHtnZXRTdXJyb3VuZGVkTm9kZXN9IGZyb20gJy4vZ2V0U3Vycm91bmRlZE5vZGVzJztcclxuaW1wb3J0IHtkZWxldGVVbml0RnJvbUFycmF5fSBmcm9tICcuLi91bml0L2dlbmVyYWwnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFN1cnJvdW5kZWRFbmVtaWVzID0gKHVuaXQ6VW5pdCwgcmFuZ2U6bnVtYmVyID0gMSk6VW5pdFtdID0+IHtcclxuICBsZXQgc3Vycm91bmRlZEVuZW1pZXM6VW5pdFtdID0gW107XHJcbiAgbGV0IGVuZW1pZXM6VW5pdFtdID0gW107XHJcbiAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBwbGF5ZXJVbml0cyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBjb21wdXRlclVuaXRzKTtcclxuICB9XHJcblxyXG4gIGxldCBub2RlcyA9IGdldFN1cnJvdW5kZWROb2Rlcyh1bml0LCByYW5nZSk7XHJcbiAgZm9yKGxldCBub2RlIG9mIG5vZGVzKSB7XHJcbiAgICBmb3IobGV0IGVuZW15IG9mIGVuZW1pZXMpIHtcclxuICAgICAgaWYobm9kZS54ID09PSBlbmVteS54ICYmIG5vZGUueSA9PT0gZW5lbXkueSkge1xyXG4gICAgICAgIHN1cnJvdW5kZWRFbmVtaWVzLnB1c2goZW5lbXkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzdXJyb3VuZGVkRW5lbWllcztcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNvbXB1dGVyVW5pdHMsXHJcbiAgcGxheWVyVW5pdHNcclxufSBmcm9tICcuLi8uLi9zdG9yZS91bml0L3VuaXRzJztcclxuaW1wb3J0IHtnZXRTdXJyb3VuZGVkTm9kZXN9IGZyb20gJy4vZ2V0U3Vycm91bmRlZE5vZGVzJztcclxuaW1wb3J0IHtnZXROb2RlRnJvbU1hcH0gZnJvbSAnLi4vbm9kZS9nZXQvZnJvbU1hcCc7XHJcbmltcG9ydCB7ZGVsZXRlVW5pdEZyb21BcnJheX0gZnJvbSAnLi4vdW5pdC9nZW5lcmFsJztcclxuaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRTdXJyb3VuZGVkQWxsaWVzID0gKHVuaXQ6VW5pdCk6VW5pdFtdID0+IHtcclxuICBsZXQgc3Vycm91bmRlZEFsbGllczpVbml0W10gPSBbXTtcclxuICBsZXQgYWxsaWVzOlVuaXRbXSA9IFtdO1xyXG4gIGxldCB1cGRhdGVkQWxsaWVzOlVuaXRbXSA9IFtdO1xyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICBhbGxpZXMgPSBPYmplY3QuYXNzaWduKFtdLCBjb21wdXRlclVuaXRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgYWxsaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgcGxheWVyVW5pdHMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlZEFsbGllcyA9IGRlbGV0ZVVuaXRGcm9tQXJyYXkodW5pdCwgYWxsaWVzKTtcclxuXHJcbiAgbGV0IG5vZGVzID0gZ2V0U3Vycm91bmRlZE5vZGVzKHVuaXQsIDMpO1xyXG4gIGZvcihsZXQgbm9kZSBvZiBub2Rlcykge1xyXG4gICAgZm9yKGxldCBhbGx5IG9mIHVwZGF0ZWRBbGxpZXMpIHtcclxuICAgICAgbGV0IGFsbHlOb2RlID0gZ2V0Tm9kZUZyb21NYXAoYWxseS54LCBhbGx5LnkpO1xyXG4gICAgICBpZihub2RlLnggPT09IGFsbHlOb2RlLnggJiYgbm9kZS55ID09PSBhbGx5Tm9kZS55KSB7XHJcbiAgICAgICAgc3Vycm91bmRlZEFsbGllcy5wdXNoKGFsbHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzdXJyb3VuZGVkQWxsaWVzO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZ2V0VW5pdHNNaW5Qcm9wZXJ0eSxcclxuICBnZXRVbml0c01heFByb3BlcnR5XHJcbn0gZnJvbSAnLi9wcm9wZXJ0eSc7XHJcbmltcG9ydCB7XHJcbiAgYW5vdGhlclVuaXRJc09uVGhlV2F5XHJcbn0gZnJvbSAnLi91bml0UG9zaXRpb24nO1xyXG5pbXBvcnQge1xyXG4gIGFkZFVuaXRJbnRvQXJyYXksXHJcbiAgZGVsZXRlVW5pdEZyb21BcnJheSxcclxuICBkZWxldGVVbml0RnJvbUFybXksXHJcbiAgZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvVW5pdHNJbkdyaWRzLFxyXG4gIGlzVW5pdEluQXJyYXlcclxufSBmcm9tICcuL2dlbmVyYWwnO1xyXG5cclxuZXhwb3J0IHtcclxuICBhZGRVbml0SW50b0FycmF5LFxyXG4gIGFub3RoZXJVbml0SXNPblRoZVdheSxcclxuICBkZWxldGVVbml0RnJvbUFycmF5LFxyXG4gIGRlbGV0ZVVuaXRGcm9tQXJteSxcclxuICBnZXREaXN0YW5jZUJldHdlZW5Ud29Vbml0c0luR3JpZHMsXHJcbiAgZ2V0VW5pdHNNaW5Qcm9wZXJ0eSxcclxuICBnZXRVbml0c01heFByb3BlcnR5LFxyXG4gIGlzVW5pdEluQXJyYXlcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGdldFVuaXRzTWluUHJvcGVydHksXHJcbiAgZ2V0VW5pdHNNYXhQcm9wZXJ0eVxyXG59IGZyb20gJy4vcHJvcGVydHknO1xyXG5cclxuZXhwb3J0IHtcclxuICBnZXRVbml0c01pblByb3BlcnR5LFxyXG4gIGdldFVuaXRzTWF4UHJvcGVydHlcclxufVxyXG4iLCIvKlxyXG4gIGZpbmQgcHJvcGVydHkgd2l0aCBtaW4gdmFsdWUgYW1vbmcgdW5pdHNcclxuICBlLmcgdW5pdDEuc3BlZWQgPSA2XHJcbiAgICAgIHVuaXQyLnNwZWVkID0gMThcclxuICAgICAgcmV0dXJuIDZcclxuKi9cclxuZXhwb3J0IGNvbnN0IGdldFVuaXRzTWluUHJvcGVydHkgPSAocHJvcGVydHk6YW55LCB1bml0czphbnlbXSk6bnVtYmVyID0+IHtcclxuICBpZih1bml0cy5sZW5ndGggPiAwKSB7XHJcbiAgICBsZXQgbWluUHJvcGVydHk6bnVtYmVyID0gdW5pdHNbMF1bcHJvcGVydHldO1xyXG4gICAgZm9yKGxldCBpID0gMTsgaSA8IHVuaXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmKG1pblByb3BlcnR5ID4gdW5pdHNbaV1bcHJvcGVydHldKSB7XHJcbiAgICAgICAgbWluUHJvcGVydHkgPSB1bml0c1tpXVtwcm9wZXJ0eV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtaW5Qcm9wZXJ0eTtcclxuICB9XHJcbn1cclxuXHJcbi8qXHJcbiAgZmluZCBwcm9wZXJ0eSB3aXRoIG1heCB2YWx1ZSBhbW9uZyB1bml0c1xyXG4gIGUuZyB1bml0MS5zcGVlZCA9IDE3XHJcbiAgICAgIHVuaXQyLnNwZWVkID0gMTBcclxuICAgICAgcmV0dXJuIDE3XHJcbiovXHJcbmV4cG9ydCBjb25zdCBnZXRVbml0c01heFByb3BlcnR5ID0gKHByb3BlcnR5OmFueSwgdW5pdHM6YW55W10pOm51bWJlciA9PiB7XHJcbiAgaWYodW5pdHMubGVuZ3RoID4gMCkge1xyXG4gICAgbGV0IG1heFByb3BlcnR5Om51bWJlciA9IHVuaXRzWzBdW3Byb3BlcnR5XTtcclxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCB1bml0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZihtYXhQcm9wZXJ0eSA8IHVuaXRzW2ldW3Byb3BlcnR5XSkge1xyXG4gICAgICAgIG1heFByb3BlcnR5ID0gdW5pdHNbaV1bcHJvcGVydHldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWF4UHJvcGVydHk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7YW5vdGhlclVuaXRJc09uVGhlV2F5fSBmcm9tICcuL3Bvc2l0aW9uJztcclxuaW1wb3J0IHtnZXRVbml0c09uVGhlTm9kZX0gZnJvbSAnLi9nZXRVbml0c09uVGhlTm9kZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGFub3RoZXJVbml0SXNPblRoZVdheSxcclxuICBnZXRVbml0c09uVGhlTm9kZVxyXG59XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4uLy4uLy4uL3VuaXQvdHlwZXMvVW5pdCc7XHJcbmltcG9ydCB7ZGVsZXRlVW5pdEZyb21BcnJheX0gZnJvbSAnLi4vZ2VuZXJhbCc7XHJcbmltcG9ydCB7IHVuaXRzIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcblxyXG5leHBvcnQgY29uc3QgYW5vdGhlclVuaXRJc09uVGhlV2F5ID0gKGN1cnJlbnRVbml0OiBVbml0KTogYm9vbGVhbiA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRVbml0czogVW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gIGxldCBvdGhlclVuaXRzOiBVbml0W10gPSBkZWxldGVVbml0RnJvbUFycmF5KGN1cnJlbnRVbml0LCB1cGRhdGVkVW5pdHMpO1xyXG4gIGxldCBjdXJyZW50VW5pdE5leHROb2RlID0gY3VycmVudFVuaXQubmV4dE5vZGU7XHJcblxyXG4gIGZvcihsZXQgb3RoZXJVbml0IG9mIG90aGVyVW5pdHMpIHtcclxuICAgIGlmKGN1cnJlbnRVbml0TmV4dE5vZGUueCA9PT0gb3RoZXJVbml0LmN1cnJlbnROb2RlLnggJiYgY3VycmVudFVuaXROZXh0Tm9kZS55ID09PSBvdGhlclVuaXQuY3VycmVudE5vZGUueSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoY3VycmVudFVuaXROZXh0Tm9kZS54ID09PSBvdGhlclVuaXQubmV4dE5vZGUueCAmJiBjdXJyZW50VW5pdE5leHROb2RlLnkgPT09IG90aGVyVW5pdC5uZXh0Tm9kZS55KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4uLy4uLy4uL3VuaXQvdHlwZXMvVW5pdCc7XHJcbmltcG9ydCB7ZGVsZXRlVW5pdEZyb21BcnJheX0gZnJvbSAnLi4vZ2VuZXJhbCc7XHJcblxyXG5cclxuLypcclxuICByZXR1cm4gYWxsIHVuaXRzIHRoYXQgaXMgbG9jYXRlZFxyXG4gIG9yIG1vdmluZyB0byB0aGUgcGFydGljdWxhciBub2RlXHJcbiovXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VW5pdHNPblRoZU5vZGUgPSAobm9kZTphbnksIHVuaXRzOlVuaXRbXSwgY3VycmVudFVuaXQ6VW5pdCA9IG51bGwpOlVuaXRbXSA9PiB7XHJcbiAgbGV0IHVwZGF0ZWRVbml0czpVbml0W10gPSBPYmplY3QuYXNzaWduKFtdLCB1bml0cyk7XHJcbiAgbGV0IG90aGVyVW5pdHM6VW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gIGlmKGN1cnJlbnRVbml0KSB7XHJcbiAgICBvdGhlclVuaXRzID0gZGVsZXRlVW5pdEZyb21BcnJheShjdXJyZW50VW5pdCwgdW5pdHMpO1xyXG4gIH1cclxuXHJcbiAgY29uc3Qgbm9kZVg6bnVtYmVyID0gbm9kZS54O1xyXG4gIGNvbnN0IG5vZGVZOm51bWJlciA9IG5vZGUueTtcclxuICBsZXQgdW5pdHNPblRoZU5vZGU6VW5pdFtdID0gW107XHJcblxyXG4gIGZvcihsZXQgb3RoZXJVbml0IG9mIG90aGVyVW5pdHMpIHtcclxuICAgIGNvbnN0IG90aGVyVW5pdEN1cnJlbnROb2RlWDpudW1iZXIgPSBvdGhlclVuaXQuY3VycmVudE5vZGUueDtcclxuICAgIGNvbnN0IG90aGVyVW5pdEN1cnJlbnROb2RlWTpudW1iZXIgPSBvdGhlclVuaXQuY3VycmVudE5vZGUueTtcclxuICAgIGNvbnN0IG90aGVyVW5pdE5leHROb2RlWDpudW1iZXIgPSBvdGhlclVuaXQubmV4dE5vZGUueDtcclxuICAgIGNvbnN0IG90aGVyVW5pdE5leHROb2RlWTpudW1iZXIgPSBvdGhlclVuaXQubmV4dE5vZGUueTtcclxuICAgIC8vIG90aGVyIHVuaXQgaXMgY3VycmVudGx5IGlzIG9uIHRoYXQgbm9kZVxyXG4gICAgaWYob3RoZXJVbml0Q3VycmVudE5vZGVYID09PSBub2RlWCAmJiBvdGhlclVuaXRDdXJyZW50Tm9kZVkgPT09IG5vZGVZKSB7XHJcbiAgICAgIHVuaXRzT25UaGVOb2RlLnB1c2gob3RoZXJVbml0KTtcclxuICAgIH1cclxuICAgIC8vIG90aGVyIHVuaXQgaXMgdXAgdG8gbW92ZSB0byB0aGF0IG5vZGVcclxuICAgIGVsc2UgaWYob3RoZXJVbml0TmV4dE5vZGVYID09PSBub2RlWCAmJiBvdGhlclVuaXROZXh0Tm9kZVkgPT09IG5vZGVZKSB7XHJcbiAgICAgIHVuaXRzT25UaGVOb2RlLnB1c2gob3RoZXJVbml0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB1bml0c09uVGhlTm9kZTtcclxufVxyXG4iLCJpbXBvcnQge2RyYXdCYWNrZ3JvdW5kfSBmcm9tICcuL2RyYXdCYWNrZ3JvdW5kJztcclxuaW1wb3J0IHtkcmF3T2JzdGFjbGV9IGZyb20gJy4vZHJhd09ic3RhY2xlJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZHJhd0JhY2tncm91bmQsXHJcbiAgZHJhd09ic3RhY2xlXHJcbn1cclxuIiwiaW1wb3J0IHtiYWNrZ3JvdW5kQ3R4fSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7bG9hZEltYWdlfSBmcm9tICcuLic7XHJcbmltcG9ydCB7TUFQX1dJRFRILCBNQVBfSEVJR0hUfSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdCYWNrZ3JvdW5kID0gKHNyYzpzdHJpbmcpID0+IHtcclxuICBsb2FkSW1hZ2Uoc3JjLCAoZXJyOmFueSwgaW1nOmFueSkgPT4ge1xyXG4gICAgYmFja2dyb3VuZEN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBNQVBfV0lEVEgsIE1BUF9IRUlHSFQpO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7dGVycmFpbkN0eH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge2xvYWRJbWFnZX0gZnJvbSAnLi4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdPYnN0YWNsZSA9ICh4Om51bWJlciwgeTpudW1iZXIsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlciwgc3JjOnN0cmluZykgPT4ge1xyXG4gIGxvYWRJbWFnZShzcmMsIChlcnI6YW55LCBpbWc6YW55KSA9PiB7XHJcbiAgICB0ZXJyYWluQ3R4LmRyYXdJbWFnZShpbWcsIHgsIHksIHdpZHRoLCBoZWlnaHQpO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgQXJjaGVycyxcclxuICBIZWF2eUluZmFudHJ5LFxyXG4gIEhlYXZ5Q2F2YWxyeSxcclxuICBIb3BsaXRlcyxcclxuICBMaWdodEluZmFudHJ5LFxyXG4gIExpZ2h0Q2F2YWxyeSxcclxuICBNaWxpdGlhLFxyXG4gIFBlbHRhc3RzLFxyXG4gIFBpa2VtZW4sXHJcbiAgU2NvdXRzXHJcbn0gIGZyb20gJy4uL3R5cGVzJztcclxuaW1wb3J0IHsgdW5pdElkIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0SWQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNob29zZVVuaXRUeXBlID0gKHR5cGU6c3RyaW5nLCB4Om51bWJlciwgeTpudW1iZXIsIGNvbnRyb2xCeTpzdHJpbmcpID0+IHtcclxuICBpZih0eXBlID09PSAnYXJjaGVycycgfHwgdHlwZSA9PT0gJ0FyY2hlcnMnKSB7XHJcbiAgICByZXR1cm4gbmV3IEFyY2hlcnModW5pdElkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gIH1cclxuICBlbHNlIGlmKHR5cGUgPT09ICdoZWF2eUNhdmFscnknIHx8IHR5cGUgPT09ICdIZWF2eUNhdmFscnknKSB7XHJcbiAgICByZXR1cm4gbmV3IEhlYXZ5Q2F2YWxyeSh1bml0SWQsIHgsIHksIGNvbnRyb2xCeSk7XHJcbiAgfVxyXG4gIGVsc2UgaWYodHlwZSA9PT0gJ2hlYXZ5SW5mYW50cnknIHx8IHR5cGUgPT09ICdIZWF2eUluZmFudHJ5Jykge1xyXG4gICAgcmV0dXJuIG5ldyBIZWF2eUluZmFudHJ5KHVuaXRJZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICB9XHJcbiAgZWxzZSBpZih0eXBlID09PSAnaG9wbGl0ZXMnIHx8IHR5cGUgPT09ICdIb3BsaXRlcycpIHtcclxuICAgIHJldHVybiBuZXcgSG9wbGl0ZXModW5pdElkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gIH1cclxuICBlbHNlIGlmKHR5cGUgPT09ICdsaWdodENhdmFscnknIHx8IHR5cGUgPT09ICdMaWdodENhdmFscnknKSB7XHJcbiAgICByZXR1cm4gbmV3IExpZ2h0Q2F2YWxyeSh1bml0SWQsIHgsIHksIGNvbnRyb2xCeSk7XHJcbiAgfVxyXG4gIGVsc2UgaWYodHlwZSA9PT0gJ2xpZ2h0SW5mYW50cnknIHx8IHR5cGUgPT09ICdMaWdodEluZmFudHJ5Jykge1xyXG4gICAgcmV0dXJuIG5ldyBMaWdodEluZmFudHJ5KHVuaXRJZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICB9XHJcbiAgZWxzZSBpZih0eXBlID09PSAnbWlsaXRpYScgfHwgdHlwZSA9PT0gJ01pbGl0aWEnKSB7XHJcbiAgICByZXR1cm4gbmV3IE1pbGl0aWEodW5pdElkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gIH1cclxuICBlbHNlIGlmKHR5cGUgPT09ICdwZWx0YXN0cycgfHwgdHlwZSA9PT0gJ1BlbHRhc3RzJykge1xyXG4gICAgcmV0dXJuIG5ldyBQZWx0YXN0cyh1bml0SWQsIHgsIHksIGNvbnRyb2xCeSk7XHJcbiAgfVxyXG4gIGVsc2UgaWYodHlwZSA9PT0gJ3Bpa2VtZW4nIHx8IHR5cGUgPT09ICdQaWtlbWVuJykge1xyXG4gICAgcmV0dXJuIG5ldyBQaWtlbWVuKHVuaXRJZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICB9XHJcbiAgZWxzZSBpZih0eXBlID09PSAnc2NvdXRzJyB8fCB0eXBlID09PSAnU2NvdXRzJykge1xyXG4gICAgcmV0dXJuIG5ldyBTY291dHModW5pdElkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gIH0gXHJcbiAgZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBleGlzdGluZyB1bml0IHR5cGUgXCIgKyB0eXBlKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi9Vbml0JztcclxuXHJcbmNsYXNzIEFyY2hlcnMgZXh0ZW5kcyBVbml0IHtcclxuICAvLyBnZW5lcmFsXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZyA9ICdIaWdoIHJhbmdlIHNraXJtaXNoZXJzIGFybWVkIHdpdGggYm93cyc7XHJcbiAgY29zdDogbnVtYmVyID0gNTA7XHJcbiAgYWR2YW50YWdlT3Zlcjogc3RyaW5nW10gPSBbXHJcbiAgICAnUGlrZW1lbicsICdIb3BsaXRlcydcclxuICBdO1xyXG4gIHZ1bG5lcmFibGVBZ2FpbnN0OiBzdHJpbmdbXSA9IFtcclxuICAgICdMaWdodENhdmFscnknLCAnSGVhdnlDYXZhbHJ5J1xyXG4gIF07XHJcbiAgLy8gQ2hhcmFjdGVyaXN0aWNzXHJcbiAgbmFtZTogc3RyaW5nID0gJ0FyY2hlcnMnO1xyXG4gIHR5cGU6IHN0cmluZyA9ICdza2lybWlzaGVycyc7XHJcbiAgaW1nU3JjOnN0cmluZyA9ICcuL3NyYy9pbWcvdW5pdHMvcGlrZW1lbi5qcGcnO1xyXG4gIGhlYWx0aDogbnVtYmVyID0gMjU7XHJcbiAgc3BlZWQ6IG51bWJlciA9IDI1O1xyXG4gIGFybW91cjogbnVtYmVyID0gMjtcclxuICByYW5nZTogbnVtYmVyID0gODtcclxuICBtb2JpbGl0eTogbnVtYmVyID0gNDtcclxuICBtZWxlZURhbWFnZTogbnVtYmVyID0gNztcclxuICBtaXNzaWxlRGFtYWdlOiBudW1iZXIgPSA3O1xyXG4gIHNob3RzUmVtYWluZWQ6bnVtYmVyID0gMTA7XHJcbiAgY2hhcmdlOiBudW1iZXIgPSAxO1xyXG4gIGRpc2NpcGxpbmU6IG51bWJlciA9IDQwO1xyXG4gIHdlaWdodDogbnVtYmVyID0gMjA7XHJcbiAgaW5pdGlhbEhlYWx0aDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDpudW1iZXIsIHg6bnVtYmVyLCB5Om51bWJlciwgY29udHJvbEJ5OnN0cmluZz0ncGxheWVyJykge1xyXG4gICAgc3VwZXIoaWQsIHgsIHksIGNvbnRyb2xCeSk7XHJcbiAgICB0aGlzLmluaXRpYWxIZWFsdGggPSB0aGlzLmhlYWx0aDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFyY2hlcnM7XHJcbiIsImltcG9ydCB7XHJcbiAgcmFkaXVzXHJcbn0gZnJvbSAnLi91bml0Q29uZmlnJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgcmFkaXVzXHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IHJhZGl1czpudW1iZXIgPSAxMztcclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi9Vbml0JztcclxuXHJcbmNsYXNzIEhlYXZ5Q2F2YWxyeSBleHRlbmRzIFVuaXQge1xyXG4gIC8vIGdlbmVyYWxcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gYGhlYXZ5IGFuZCBjYXZhbHJ5IGFpbWVkIHRvIGJyZWFrIHRocm91Z2ggZW5lbXkncyBsaW5lc2A7XHJcbiAgY29zdDogbnVtYmVyID0gMTUwO1xyXG4gIGFkdmFudGFnZU92ZXI6IHN0cmluZ1tdID0gW1xyXG4gICAgJ0FyY2hlcnMnLCAnUGVsdGFzdHMnXHJcbiAgXTtcclxuICB2dWxuZXJhYmxlQWdhaW5zdDogc3RyaW5nW10gPSBbXHJcbiAgICAnUGlrZW1lbicsICdIb3BsaXRlcydcclxuICBdO1xyXG4gIC8vIENoYXJhY3RlcmlzdGljc1xyXG4gIG5hbWU6IHN0cmluZyA9ICdIZWF2eUNhdmFscnknO1xyXG4gIHR5cGU6IHN0cmluZyA9ICdjYXZhbHJ5JztcclxuICBpbWdTcmM6c3RyaW5nID0gJy4vc3JjL2ltZy91bml0cy9waWtlbWVuLmpwZyc7XHJcbiAgaGVhbHRoOiBudW1iZXIgPSAxNTA7XHJcbiAgc3BlZWQ6IG51bWJlciA9IDM1O1xyXG4gIGFybW91cjogbnVtYmVyID0gODtcclxuICByYW5nZTogbnVtYmVyID0gMDtcclxuICBtb2JpbGl0eTogbnVtYmVyID0gNTtcclxuICBtZWxlZURhbWFnZTogbnVtYmVyID0gMTI7XHJcbiAgbWlzc2lsZURhbWFnZTogbnVtYmVyID0gMDtcclxuICBjaGFyZ2U6IG51bWJlciA9IDg7XHJcbiAgZGlzY2lwbGluZTogbnVtYmVyID0gNzA7XHJcbiAgaW5pdGlhbFdlaWdodDogbnVtYmVyID0gMTAwO1xyXG4gIHdlaWdodDogbnVtYmVyID0gdGhpcy5pbml0aWFsV2VpZ2h0O1xyXG4gIGluaXRpYWxIZWFsdGg6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6bnVtYmVyLCB4Om51bWJlciwgeTpudW1iZXIsIGNvbnRyb2xCeTpzdHJpbmc9J3BsYXllcicpIHtcclxuICAgIHN1cGVyKGlkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gICAgdGhpcy5pbml0aWFsSGVhbHRoID0gdGhpcy5oZWFsdGg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIZWF2eUNhdmFscnk7XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4vVW5pdCc7XHJcblxyXG5jbGFzcyBIZWF2eUluZmFudHJ5IGV4dGVuZHMgVW5pdCB7XHJcbiAgLy8gZ2VuZXJhbFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnSGVhdmlseSBhcm1lZCBpbmZhbnRyeSB0cmFpbmVkIHRvIG1vdW50IGZyb250YWwgYXNzYXVsdHMnO1xyXG4gIGNvc3Q6IG51bWJlciA9IDcwO1xyXG4gIGFkdmFudGFnZU92ZXI6IHN0cmluZ1tdID0gW1xyXG4gICAgJ0xpZ2h0SW5mYW50cnknLCAnTWlsaXRpYSdcclxuICBdO1xyXG4gIHZ1bG5lcmFibGVBZ2FpbnN0OiBzdHJpbmdbXSA9IFtdO1xyXG4gIC8vIENoYXJhY3RlcmlzdGljc1xyXG4gIG5hbWU6IHN0cmluZyA9ICdIZWF2eUluZmFudHJ5JztcclxuICB0eXBlOiBzdHJpbmcgPSAnaW5mYW50cnknO1xyXG4gIGltZ1NyYzpzdHJpbmcgPSAnLi9zcmMvaW1nL3VuaXRzL3Bpa2VtZW4uanBnJztcclxuICBoZWFsdGg6IG51bWJlciA9IDE3MDtcclxuICBzcGVlZDogbnVtYmVyID0gMTg7XHJcbiAgYXJtb3VyOiBudW1iZXIgPSA4O1xyXG4gIHJhbmdlOiBudW1iZXIgPSAwO1xyXG4gIG1vYmlsaXR5OiBudW1iZXIgPSAzO1xyXG4gIG1lbGVlRGFtYWdlOiBudW1iZXIgPSAxMjtcclxuICBtaXNzaWxlRGFtYWdlOiBudW1iZXIgPSAwO1xyXG4gIGNoYXJnZTogbnVtYmVyID0gNDtcclxuICBkaXNjaXBsaW5lOiBudW1iZXIgPSA3MDtcclxuICBpbml0aWFsV2VpZ2h0OiBudW1iZXIgPSA2MDtcclxuICB3ZWlnaHQ6IG51bWJlciA9IHRoaXMuaW5pdGlhbFdlaWdodDtcclxuICBpbml0aWFsSGVhbHRoOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkOm51bWJlciwgeDpudW1iZXIsIHk6bnVtYmVyLCBjb250cm9sQnk6c3RyaW5nPSdwbGF5ZXInKSB7XHJcbiAgICBzdXBlcihpZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICAgIHRoaXMuaW5pdGlhbEhlYWx0aCA9IHRoaXMuaGVhbHRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSGVhdnlJbmZhbnRyeTtcclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi9Vbml0JztcclxuXHJcbmNsYXNzIEhvcGxpdGVzIGV4dGVuZHMgVW5pdCB7XHJcbiAgLy8gZ2VuZXJhbFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnSW5mYW50cnkgYXJtZWQgd2l0aCBzcGVhcnMgYW5kIHNoaWVsZHMnO1xyXG4gIGNvc3Q6IG51bWJlciA9IDgwO1xyXG4gIGFkdmFudGFnZU92ZXI6IHN0cmluZ1tdID0gW1xyXG4gICAgJ0xpZ2h0Q2F2YWxyeScsICdIZWF2eUNhdmFscnknXHJcbiAgXTtcclxuICB2dWxuZXJhYmxlQWdhaW5zdDogc3RyaW5nW10gPSBbXHJcbiAgICAnQXJjaGVycycsICdQZWx0YXN0cydcclxuICBdO1xyXG4gIC8vIENoYXJhY3RlcmlzdGljc1xyXG4gIG5hbWU6IHN0cmluZyA9ICdIb3BsaXRlcyc7XHJcbiAgdHlwZTogc3RyaW5nID0gJ3NwZWFybWVuJztcclxuICBpbWdTcmM6c3RyaW5nID0gJy4vc3JjL2ltZy91bml0cy9ob3BsaXRlcy5qcGcnO1xyXG4gIGhlYWx0aDogbnVtYmVyID0gMTkwO1xyXG4gIHNwZWVkOiBudW1iZXIgPSAxMjtcclxuICBhcm1vdXI6IG51bWJlciA9IDc7XHJcbiAgcmFuZ2U6IG51bWJlciA9IDA7XHJcbiAgbW9iaWxpdHk6IG51bWJlciA9IDE7XHJcbiAgbWVsZWVEYW1hZ2U6IG51bWJlciA9IDE2O1xyXG4gIG1pc3NpbGVEYW1hZ2U6IG51bWJlciA9IDA7XHJcbiAgY2hhcmdlOiBudW1iZXIgPSAxO1xyXG4gIGRpc2NpcGxpbmU6IG51bWJlciA9IDkwO1xyXG4gIGluaXRpYWxXZWlnaHQ6IG51bWJlciA9IDcwO1xyXG4gIHdlaWdodCA9IHRoaXMuaW5pdGlhbFdlaWdodDtcclxuICBpbml0aWFsSGVhbHRoOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkOm51bWJlciwgeDpudW1iZXIsIHk6bnVtYmVyLCBjb250cm9sQnk6c3RyaW5nPSdwbGF5ZXInKSB7XHJcbiAgICBzdXBlcihpZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICAgIHRoaXMuaW5pdGlhbEhlYWx0aCA9IHRoaXMuaGVhbHRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSG9wbGl0ZXM7XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4vVW5pdCc7XHJcblxyXG5jbGFzcyBMaWdodENhdmFscnkgZXh0ZW5kcyBVbml0IHtcclxuICAvLyBnZW5lcmFsXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZyA9ICdMaWdodCBhbmQgZmFzdCBjYXZhbHJ5JztcclxuICBjb3N0OiBudW1iZXIgPSA5MDtcclxuICBhZHZhbnRhZ2VPdmVyOiBzdHJpbmdbXSA9IFtcclxuICAgICdBcmNoZXJzJywgJ1BlbHRhc3RzJ1xyXG4gIF07XHJcbiAgdnVsbmVyYWJsZUFnYWluc3Q6IHN0cmluZ1tdID0gW1xyXG4gICAgJ0hvcGxpdGVzJywgJ1Bpa2VtZW4nXHJcbiAgXTtcclxuICAvLyBDaGFyYWN0ZXJpc3RpY3NcclxuICBuYW1lOiBzdHJpbmcgPSAnTGlnaHRDYXZhbHJ5JztcclxuICB0eXBlOiBzdHJpbmcgPSAnY2F2YWxyeSc7XHJcbiAgaW1nU3JjOnN0cmluZyA9ICcuL3NyYy9pbWcvdW5pdHMvbGlnaHRDYXZhbHJ5LnBuZyc7XHJcbiAgaGVhbHRoOiBudW1iZXIgPSA4MDtcclxuICBzcGVlZDogbnVtYmVyID0gNDA7XHJcbiAgYXJtb3VyOiBudW1iZXIgPSAyO1xyXG4gIHJhbmdlOiBudW1iZXIgPSAwO1xyXG4gIG1vYmlsaXR5OiBudW1iZXIgPSA3O1xyXG4gIG1lbGVlRGFtYWdlOiBudW1iZXIgPSA4O1xyXG4gIG1pc3NpbGVEYW1hZ2U6IG51bWJlciA9IDA7XHJcbiAgY2hhcmdlOiBudW1iZXIgPSA2O1xyXG4gIGRpc2NpcGxpbmU6IG51bWJlciA9IDQwO1xyXG4gIGluaXRpYWxXZWlnaHQ6IG51bWJlciA9IDgwO1xyXG4gIHdlaWdodDogbnVtYmVyID0gdGhpcy5pbml0aWFsV2VpZ2h0O1xyXG4gIGluaXRpYWxIZWFsdGg6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6bnVtYmVyLCB4Om51bWJlciwgeTpudW1iZXIsIGNvbnRyb2xCeTpzdHJpbmc9J3BsYXllcicpIHtcclxuICAgIHN1cGVyKGlkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gICAgdGhpcy5pbml0aWFsSGVhbHRoID0gdGhpcy5oZWFsdGg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMaWdodENhdmFscnk7XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4vVW5pdCc7XHJcblxyXG5jbGFzcyBMaWdodEluZmFudHJ5IGV4dGVuZHMgVW5pdCB7XHJcbiAgLy8gZ2VuZXJhbFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnRnJvbnRsaW5lIHNvbGRpZXJzIHRyYWluZWQgZm9yIGhhbmQtdG8taGFuZCBjb21iYXQgd2l0aCB0aGVpciBlbmVtaWVzJztcclxuICBjb3N0OiBudW1iZXIgPSAzMDtcclxuICBhZHZhbnRhZ2VPdmVyOiBzdHJpbmdbXSA9IFtdO1xyXG4gIHZ1bG5lcmFibGVBZ2FpbnN0OiBzdHJpbmdbXSA9IFtdO1xyXG4gIC8vIENoYXJhY3RlcmlzdGljc1xyXG4gIG5hbWU6IHN0cmluZyA9ICdMaWdodEluZmFudHJ5JztcclxuICB0eXBlOiBzdHJpbmcgPSAnaW5mYW50cnknO1xyXG4gIGltZ1NyYzpzdHJpbmcgPSAnLi9zcmMvaW1nL3VuaXRzL3Bpa2VtZW4uanBnJztcclxuICBoZWFsdGg6IG51bWJlciA9IDgwO1xyXG4gIHNwZWVkOiBudW1iZXIgPSAyMjtcclxuICBhcm1vdXI6IG51bWJlciA9IDI7XHJcbiAgcmFuZ2U6IG51bWJlciA9IDA7XHJcbiAgbW9iaWxpdHk6IG51bWJlciA9IDU7XHJcbiAgbWVsZWVEYW1hZ2U6IG51bWJlciA9IDg7XHJcbiAgbWlzc2lsZURhbWFnZTogbnVtYmVyID0gMDtcclxuICBjaGFyZ2U6IG51bWJlciA9IDI7XHJcbiAgZGlzY2lwbGluZTogbnVtYmVyID0gMzA7XHJcbiAgaW5pdGlhbFdlaWdodDogbnVtYmVyID0gNDA7XHJcbiAgd2VpZ2h0OiBudW1iZXIgPSB0aGlzLmluaXRpYWxXZWlnaHQ7XHJcbiAgaW5pdGlhbEhlYWx0aDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDpudW1iZXIsIHg6bnVtYmVyLCB5Om51bWJlciwgY29udHJvbEJ5OnN0cmluZz0ncGxheWVyJykge1xyXG4gICAgc3VwZXIoaWQsIHgsIHksIGNvbnRyb2xCeSk7XHJcbiAgICB0aGlzLmluaXRpYWxIZWFsdGggPSB0aGlzLmhlYWx0aDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExpZ2h0SW5mYW50cnk7XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4vVW5pdCc7XHJcblxyXG5jbGFzcyBNaWxpdGlhIGV4dGVuZHMgVW5pdCB7XHJcbiAgLy8gZ2VuZXJhbFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSBgQSBtaWxpdGFyeSBmb3JjZSB0aGF0IGlzIHJhaXNlZCBmcm9tIHRoZSBjaXZpbCBwb3B1bGF0aW9uIHRvIHN1cHBsZW1lbnQgYSByZWd1bGFyIGFybXkgaW4gYW4gZW1lcmdlbmN5LmA7XHJcbiAgY29zdDogbnVtYmVyID0gMjA7XHJcbiAgYWR2YW50YWdlT3Zlcjogc3RyaW5nW10gPSBbXTtcclxuICB2dWxuZXJhYmxlQWdhaW5zdDogc3RyaW5nW10gPSBbXTtcclxuICAvLyBDaGFyYWN0ZXJpc3RpY3NcclxuICBuYW1lOiBzdHJpbmcgPSAnTWlsaXRpYSc7XHJcbiAgdHlwZTogc3RyaW5nID0gJ2luZmFudHJ5JztcclxuICBpbWdTcmM6c3RyaW5nID0gJy4vc3JjL2ltZy91bml0cy9waWtlbWVuLmpwZyc7XHJcbiAgaGVhbHRoOiBudW1iZXIgPSAxMjA7XHJcbiAgc3BlZWQ6IG51bWJlciA9IDI1O1xyXG4gIGFybW91cjogbnVtYmVyID0gMTtcclxuICByYW5nZTogbnVtYmVyID0gMDtcclxuICBtb2JpbGl0eTogbnVtYmVyID0gMztcclxuICBtZWxlZURhbWFnZTogbnVtYmVyID0gNztcclxuICBtaXNzaWxlRGFtYWdlOiBudW1iZXIgPSAwO1xyXG4gIGNoYXJnZTogbnVtYmVyID0gMTtcclxuICBkaXNjaXBsaW5lOiBudW1iZXIgPSAxMDtcclxuICBpbml0aWFsV2VpZ2h0OiBudW1iZXIgPSAzMDtcclxuICB3ZWlnaHQ6IG51bWJlciA9IHRoaXMuaW5pdGlhbFdlaWdodDtcclxuICBpbml0aWFsSGVhbHRoOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkOm51bWJlciwgeDpudW1iZXIsIHk6bnVtYmVyLCBjb250cm9sQnk6c3RyaW5nPSdwbGF5ZXInKSB7XHJcbiAgICBzdXBlcihpZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICAgIHRoaXMuaW5pdGlhbEhlYWx0aCA9IHRoaXMuaGVhbHRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWlsaXRpYTtcclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi9Vbml0JztcclxuXHJcbmNsYXNzIFBlbHRhc3RzIGV4dGVuZHMgVW5pdCB7XHJcbiAgLy8gZ2VuZXJhbFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmcgPSAnTG93IHJhbmdlIHNraXJtaXNoZXJzIGFybWVkIHdpdGggamF2ZWxpbnMnO1xyXG4gIGNvc3Q6IG51bWJlciA9IDUwO1xyXG4gIGFkdmFudGFnZU92ZXI6IHN0cmluZ1tdID0gW1xyXG4gICAgJ0hvcGxpdGVzJywgJ1Bpa2VtZW4nXHJcbiAgXTtcclxuICB2dWxuZXJhYmxlQWdhaW5zdDogc3RyaW5nW10gPSBbXHJcbiAgICAnTGlnaHRDYXZhbHJ5JywgJ0hlYXZ5Q2F2YWxyeSdcclxuICBdO1xyXG4gIC8vIENoYXJhY3RlcmlzdGljc1xyXG4gIG5hbWU6IHN0cmluZyA9ICdQZWx0YXN0cyc7XHJcbiAgdHlwZTogc3RyaW5nID0gJ3NraXJtaXNoZXJzJztcclxuICBpbWdTcmM6c3RyaW5nID0gJy4vc3JjL2ltZy91bml0cy9waWtlbWVuLmpwZyc7XHJcbiAgaGVhbHRoOiBudW1iZXIgPSA1MDtcclxuICBzcGVlZDogbnVtYmVyID0gMjI7XHJcbiAgYXJtb3VyOiBudW1iZXIgPSA0O1xyXG4gIHJhbmdlOiBudW1iZXIgPSAzO1xyXG4gIGFtbXVuaXRpb246bnVtYmVyID0gIDEwO1xyXG4gIG1vYmlsaXR5OiBudW1iZXIgPSA2O1xyXG4gIG1lbGVlRGFtYWdlOiBudW1iZXIgPSA0O1xyXG4gIG1pc3NpbGVEYW1hZ2U6IG51bWJlciA9IDEyO1xyXG4gIHNob3RzUmVtYWluZWQ6bnVtYmVyID0gNTtcclxuICBjaGFyZ2U6IG51bWJlciA9IDE7XHJcbiAgZGlzY2lwbGluZTogbnVtYmVyID0gNTA7XHJcbiAgaW5pdGlhbFdlaWdodDogbnVtYmVyID0gMjU7XHJcbiAgd2VpZ2h0OiBudW1iZXIgPSB0aGlzLmluaXRpYWxXZWlnaHQ7XHJcbiAgaW5pdGlhbEhlYWx0aDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZDpudW1iZXIsIHg6bnVtYmVyLCB5Om51bWJlciwgY29udHJvbEJ5OnN0cmluZz0ncGxheWVyJykge1xyXG4gICAgc3VwZXIoaWQsIHgsIHksIGNvbnRyb2xCeSk7XHJcbiAgICB0aGlzLmluaXRpYWxIZWFsdGggPSB0aGlzLmhlYWx0aDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBlbHRhc3RzO1xyXG4iLCJpbXBvcnQgVW5pdCBmcm9tICcuL1VuaXQnO1xyXG5cclxuY2xhc3MgUGlrZW1lbiBleHRlbmRzIFVuaXQge1xyXG4gIC8vIGdlbmVyYWxcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gJ0luZmFudHJ5IGFybWVkIHdpdGggbG9uZyBzcGVhcnMnO1xyXG4gIGNvc3Q6IG51bWJlciA9IDgwO1xyXG4gIGFkdmFudGFnZU92ZXI6IHN0cmluZ1tdID0gW1xyXG4gICAgJ0hlYXZ5Q2F2YWxyeScsICdMaWdodENhdmFscnknXHJcbiAgXTtcclxuICB2dWxuZXJhYmxlQWdhaW5zdDogc3RyaW5nW10gPSBbXHJcbiAgICAnQXJjaGVycycsICdQZWx0YXN0cydcclxuICBdO1xyXG4gIC8vIENoYXJhY3RlcmlzdGljc1xyXG4gIG5hbWU6IHN0cmluZyA9ICdQaWtlbWVuJztcclxuICB0eXBlOiBzdHJpbmcgPSAnc3BlYXJtZW4nO1xyXG4gIGltZ1NyYzpzdHJpbmcgPSAnLi9zcmMvaW1nL3VuaXRzL3Bpa2VtZW4uanBnJztcclxuICBoZWFsdGg6IG51bWJlciA9IDEyMDtcclxuICBzcGVlZDogbnVtYmVyID0gMTA7XHJcbiAgYXJtb3VyOiBudW1iZXIgPSA0O1xyXG4gIHJhbmdlOiBudW1iZXIgPSAwO1xyXG4gIG1vYmlsaXR5OiBudW1iZXIgPSAxO1xyXG4gIG1lbGVlRGFtYWdlOiBudW1iZXIgPSAyNDtcclxuICBtaXNzaWxlRGFtYWdlOiBudW1iZXIgPSAwO1xyXG4gIGNoYXJnZTogbnVtYmVyID0gMTtcclxuICBkaXNjaXBsaW5lOiBudW1iZXIgPSA4MDtcclxuICBpbml0aWFsV2VpZ2h0OiBudW1iZXIgPSA5MDtcclxuICB3ZWlnaHQ6IG51bWJlciA9IHRoaXMuaW5pdGlhbFdlaWdodDtcclxuICBpbml0aWFsSGVhbHRoOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkOm51bWJlciwgeDpudW1iZXIsIHk6bnVtYmVyLCBjb250cm9sQnk6c3RyaW5nPSdwbGF5ZXInKSB7XHJcbiAgICBzdXBlcihpZCwgeCwgeSwgY29udHJvbEJ5KTtcclxuICAgIHRoaXMuaW5pdGlhbEhlYWx0aCA9IHRoaXMuaGVhbHRoO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGlrZW1lbjtcclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi9Vbml0JztcclxuXHJcbmNsYXNzIFNjb3V0cyBleHRlbmRzIFVuaXQge1xyXG4gIC8vIGdlbmVyYWxcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nID0gYHNtYWxsIGFuZCBtb2JpbGUgYmFuZCB0aGF0IGludGVkZWQgdG8gZGVzY292ZXIgdGhlIG1hcGA7XHJcbiAgY29zdDogbnVtYmVyID0gMjA7XHJcbiAgYWR2YW50YWdlT3Zlcjogc3RyaW5nW10gPSBbXTtcclxuICB2dWxuZXJhYmxlQWdhaW5zdDogc3RyaW5nW10gPSBbXTtcclxuICAvLyBDaGFyYWN0ZXJpc3RpY3NcclxuICBuYW1lOiBzdHJpbmcgPSAnU2NvdXRzJztcclxuICB0eXBlOiBzdHJpbmcgPSAnc2NvdXRzJztcclxuICBpbWdTcmM6c3RyaW5nID0gJy4vc3JjL2ltZy91bml0cy9waWtlbWVuLmpwZyc7XHJcbiAgaGVhbHRoOiBudW1iZXIgPSA2MDtcclxuICBzcGVlZDogbnVtYmVyID0gMjc7XHJcbiAgYXJtb3VyOiBudW1iZXIgPSAxO1xyXG4gIHJhbmdlOiBudW1iZXIgPSAwO1xyXG4gIG1vYmlsaXR5OiBudW1iZXIgPSA5O1xyXG4gIG1lbGVlRGFtYWdlOiBudW1iZXIgPSA3O1xyXG4gIG1pc3NpbGVEYW1hZ2U6IG51bWJlciA9IDA7XHJcbiAgY2hhcmdlOiBudW1iZXIgPSAxO1xyXG4gIGRpc2NpcGxpbmU6IG51bWJlciA9IDEwO1xyXG4gIGluaXRpYWxXZWlnaHQ6IG51bWJlciA9IDIwO1xyXG4gIHdlaWdodDogbnVtYmVyID0gdGhpcy5pbml0aWFsV2VpZ2h0O1xyXG4gIGluaXRpYWxIZWFsdGg6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoaWQ6bnVtYmVyLCB4Om51bWJlciwgeTpudW1iZXIsIGNvbnRyb2xCeTpzdHJpbmc9J3BsYXllcicpIHtcclxuICAgIHN1cGVyKGlkLCB4LCB5LCBjb250cm9sQnkpO1xyXG4gICAgdGhpcy5pbml0aWFsSGVhbHRoID0gdGhpcy5oZWFsdGg7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTY291dHM7XHJcbiIsImltcG9ydCB7Z3JpZFNpemUsIENBTlZBU19IRUlHSFR9IGZyb20gJy4uLy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7YXNzaWduQ3VycmVudGx5Q2hvc2VuVW5pdH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC9jdXJyZW50bHlDaG9zZW5Vbml0JztcclxuaW1wb3J0IFVuaXQgZnJvbSAnLi4vdHlwZXMvVW5pdCc7XHJcbmltcG9ydCB7IHBsYXllclVuaXRzIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7IFVOSVRfTEVGVF9QQU5FTF9XSURUSCwgVU5JVF9JQ09OX1dJRFRILCBVTklUX1BBTkVMX0hFSUdIVCwgVU5JVF9JQ09OX0hFSUdIVCB9IGZyb20gJy4uLy4uL1VJL2JhdHRsZVVJL3VuaXRQYW5lbC9zZXR0aW5ncyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IG9uQ2hvb3NlVW5pdCA9ICh1bml0czpVbml0W10sIG1vdXNlWDpudW1iZXIsIG1vdXNlWTpudW1iZXIpID0+IHtcclxuICBsZXQgZm91bmRVbml0ID0gbnVsbDtcclxuICBmb3IobGV0IHVuaXQgb2YgdW5pdHMpIHtcclxuICAgIGxldCBib3R0b21SaWdodFggPSB1bml0LnggKyBncmlkU2l6ZTtcclxuICAgIGxldCBib3R0b21SaWdodFkgPSB1bml0LnkgKyBncmlkU2l6ZTtcclxuICAgIGlmKG1vdXNlWCA+PSB1bml0LnggJiYgbW91c2VYIDwgYm90dG9tUmlnaHRYICYmIG1vdXNlWSA+PSB1bml0LnkgJiYgbW91c2VZIDwgYm90dG9tUmlnaHRZKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd1bml0JywgdW5pdC5uYW1lLCAnIHdhcyBjaG9zZW4nKTtcclxuICAgICAgdW5pdC5pc0N1cnJlbnRseUNob3NlbiA9IHRydWU7XHJcbiAgICAgIGZvdW5kVW5pdCA9IHVuaXQ7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IHN0YXJ0WCA9IFVOSVRfTEVGVF9QQU5FTF9XSURUSDtcclxuICBsZXQgeTAgPSBDQU5WQVNfSEVJR0hUIC0gVU5JVF9QQU5FTF9IRUlHSFQ7XHJcbiAgbGV0IHkxID0geTAgKyBVTklUX0lDT05fSEVJR0hUO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBwbGF5ZXJVbml0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgbGV0IHgwID0gc3RhcnRYICsgKFVOSVRfSUNPTl9XSURUSCAqIChpICsgMSkpO1xyXG4gICAgbGV0IHgxID0geDAgKyBVTklUX0lDT05fV0lEVEg7XHJcbiAgICBpZihtb3VzZVggPj0geDAgJiYgbW91c2VYIDwgeDEgJiYgbW91c2VZID49IHkwICYmIG1vdXNlWSA8IHkxKSB7XHJcbiAgICAgIGxldCB1bml0ID0gcGxheWVyVW5pdHNbaV07XHJcbiAgICAgIHVuaXQuaXNDdXJyZW50bHlDaG9zZW4gPSB0cnVlO1xyXG4gICAgICBmb3VuZFVuaXQgPSB1bml0O1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgYXNzaWduQ3VycmVudGx5Q2hvc2VuVW5pdChmb3VuZFVuaXQpO1xyXG59XHJcbiIsImltcG9ydCB7Y3JlYXRlVW5pdH0gZnJvbSAnLi9jcmVhdGVVbml0JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgY3JlYXRlVW5pdFxyXG59XHJcbiIsImltcG9ydCB7YXJtb3VyUGVuZXRyYXRpb259IGZyb20gJy4vYXJtb3VyJztcclxuaW1wb3J0IHtjaGVja0F0dGFja1NpZGV9IGZyb20gJy4vYXR0YWNrU2lkZSc7XHJcbmltcG9ydCB7XHJcbiAgY2hhcmdlLFxyXG4gIGNhbGN1bGF0ZUNoYXJnZVxyXG59IGZyb20gJy4vY2hhcmdlJztcclxuaW1wb3J0IHtcclxuICBjYWxjdWxhdGVEYW1hZ2UsXHJcbiAgY2FsY3VsYXRlRGFtYWdlQmFzZU9uRW5lbXlQb3NpdGlvbixcclxuICBjYWxjdWxhdGVEYW1hZ2VXaGVuSXRzTGVzc1RoYW5PbmVcclxufSBmcm9tICcuL2RhbWFnZSc7XHJcbmltcG9ydCB7XHJcbiAgcmVtb3ZlVW5pdEZyb21FbmVtaWVzRmlnaHRBZ2FpbnN0LFxyXG4gIGZpbmRVbml0SW5GaWdodEFnYWluc3RcclxufSBmcm9tICcuL2ZpZ2h0QWdhaW5zdCc7XHJcbmltcG9ydCB7XHJcbiAgaXNVbml0RmlnaHRpbmcsXHJcbiAgY2hlY2tIZWFsdGgsXHJcbiAgbWVsZWVBdHRhY2ssXHJcbiAgbWVsZWVDb21iYXRcclxufSBmcm9tICcuL21lbGVlJztcclxuXHJcbmltcG9ydCB7XHJcblxyXG59IGZyb20gJy4vbWlzc2lsZSc7XHJcblxyXG5pbXBvcnQge1xyXG4gIHJlZnJlc2htZW50XHJcbn0gZnJvbSAnLi9yZWZyZXNobWVudCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGFybW91clBlbmV0cmF0aW9uLFxyXG4gIGNoZWNrQXR0YWNrU2lkZSxcclxuICBjaGFyZ2UsXHJcbiAgY2FsY3VsYXRlQ2hhcmdlLFxyXG4gIGNhbGN1bGF0ZURhbWFnZSxcclxuICBjYWxjdWxhdGVEYW1hZ2VCYXNlT25FbmVteVBvc2l0aW9uLFxyXG4gIGNhbGN1bGF0ZURhbWFnZVdoZW5JdHNMZXNzVGhhbk9uZSxcclxuICByZW1vdmVVbml0RnJvbUVuZW1pZXNGaWdodEFnYWluc3QsXHJcbiAgZmluZFVuaXRJbkZpZ2h0QWdhaW5zdCxcclxuICBpc1VuaXRGaWdodGluZyxcclxuICBjaGVja0hlYWx0aCxcclxuICBtZWxlZUF0dGFjayxcclxuICBtZWxlZUNvbWJhdCxcclxuICByZWZyZXNobWVudFxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBhcm1vdXJQZW5ldHJhdGlvbiA9IChkYW1hZ2U6bnVtYmVyLCBhcm1vdXI6bnVtYmVyKSA9PiB7XHJcbiAgbGV0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgaWYoZGFtYWdlID4gYXJtb3VyKSB7XHJcbiAgICBpZihyYW5kb20gPCAwLjEwKSB7XHJcbiAgICAgIHJldHVybiBkYW1hZ2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGRhbWFnZSA8IDAuMSkge1xyXG4gICAgICByZXR1cm4gTWF0aC5yb3VuZChkYW1hZ2UgLSAoYXJtb3VyIC8gMikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBkYW1hZ2UgLSBhcm1vdXI7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGVsc2UgaWYoZGFtYWdlIDw9IGFybW91cikge1xyXG4gICAgaWYocmFuZG9tIDwgMC4yKSB7XHJcbiAgICAgIHJldHVybiAxO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7Z3JpZFNpemV9IGZyb20gJy4uLy4uLy4uL2NvbmZpZyc7XHJcbi8qXHJcbiAgQ2hlY2sgaW4gd2hhdCBzaWRlIG9mIHRoZSBlbmVteSBhdHRhY2sgd2lsbFxyXG4gIGJlIHBvaW50ZWQoZnJvbnQsIHNpZGUsIHJlYXIpXHJcbiovXHJcbmV4cG9ydCBjb25zdCBjaGVja0F0dGFja1NpZGUgPSAodW5pdDphbnksIGVuZW15OmFueSkgPT4ge1xyXG4gIGxldCBlbmVteUN1cnJOb2RlID0gZW5lbXkuY3VycmVudE5vZGU7XHJcbiAgbGV0IHVuaXROb2RlID0gdW5pdC5jdXJyZW50Tm9kZTtcclxuICBpZihlbmVteS5maWd0aEFnYWluc3QuZnJvbnQuaWQgPT09IHVuaXQuaWQpIHtcclxuICAgIHJldHVybiAnZnJvbnQnO1xyXG4gIH1cclxuXHJcbiAgZWxzZSBpZighZW5lbXkuaXNGaWdodGluZyAmJiBlbmVteS5pc01vdmluZykgeyAvLyBlbmVteSBub3QgZmlnaHRpbmcgYnV0IG1vdmluZ1xyXG4gICAgbGV0IGVuZW15TmV4dE5vZGUgPSBlbmVteS5uZXh0Tm9kZTtcclxuICAgIGlmKGVuZW15TmV4dE5vZGUueCA9PT0gdW5pdE5vZGUueCAmJiBlbmVteU5leHROb2RlLnkgPT09IHVuaXROb2RlLnkpIHsgLy8gZW5lbXkgaW4gZnJvbXQgb24gdW5pdFxyXG4gICAgIHJldHVybiAnZnJvbnQnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihlbmVteU5leHROb2RlLnggLSB1bml0Tm9kZS54ID4gZ3JpZFNpemUgfHwgZW5lbXlOZXh0Tm9kZS55IC0gdW5pdE5vZGUueSA+IGdyaWRTaXplKSB7IC8vIGVuZW15IGlzIGdvaW5nIHRvIHRoZSBvdGhlciBzaWRlIHRoYW4gdW5pdFxyXG4gICAgICByZXR1cm4gJ2JhY2snO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICdzaWRlJztcclxuICB9XHJcblxyXG4gIGVsc2UgaWYoZW5lbXkuaXNGaWdodGluZykgeyAvLyBlbmVteSBpcyBmaWdodGluZ1xyXG4gICAgbGV0IGZyb250VW5pdE5vZGUgPSBlbmVteS5maWd0aEFnYWluc3QuZnJvbnQuY3VycmVudE5vZGU7XHJcbiAgICBpZih1bml0Tm9kZS54ID09PSBlbmVteUN1cnJOb2RlLnggJiYgdW5pdE5vZGUueCA9PT0gZnJvbnRVbml0Tm9kZS54KSB7IC8vIHVuaXRzIHN0YW5kaW5nIGluIGxpbmVcclxuICAgICAgcmV0dXJuICdiYWNrJztcclxuICAgIH1cclxuICAgIGVsc2UgaWYodW5pdE5vZGUueSA9PT0gZW5lbXlDdXJyTm9kZS55ICYmIHVuaXROb2RlLnkgPT09IGZyb250VW5pdE5vZGUueSkgeyAvL3VuaXRzIHN0YW5kaW5nIGluIGxpbmVcclxuICAgICAgcmV0dXJuICdiYWNrJztcclxuICAgIH1cclxuICAgIC8vIHVuaXQgaXMgc3RhbmRpbmcgaW4gZGlhZ29uYWwgbGluZSwgc28gcG9zaXRpb24gaXMgYmFja1xyXG4gICAgZWxzZSBpZihNYXRoLmFicyhmcm9udFVuaXROb2RlLnggLSBlbmVteUN1cnJOb2RlLngpID09PSBncmlkU2l6ZSAmJiBNYXRoLmFicyhmcm9udFVuaXROb2RlLnggLSB1bml0Tm9kZS54KSA9PT0gZ3JpZFNpemUgKiAyKSB7XHJcbiAgICAgIHJldHVybiAnYmFjayc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKE1hdGguYWJzKGZyb250VW5pdE5vZGUueSAtIGVuZW15Q3Vyck5vZGUueSkgPT09IGdyaWRTaXplICYmIE1hdGguYWJzKGZyb250VW5pdE5vZGUueSAtIHVuaXROb2RlLnkpID09PSBncmlkU2l6ZSAqIDIpIHtcclxuICAgICAgcmV0dXJuICdiYWNrJztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ3NpZGUnO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNoYXJnZSxcclxuICBjYWxjdWxhdGVDaGFyZ2VcclxufSBmcm9tICcuL2NoYXJnZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGNoYXJnZSxcclxuICBjYWxjdWxhdGVDaGFyZ2VcclxufVxyXG4iLCJpbXBvcnQge2NoZWNrQXR0YWNrU2lkZX0gZnJvbSAnLi4vYXR0YWNrU2lkZSc7XHJcbmltcG9ydCB7Y2FsY3VsYXRlRGFtYWdlV2hlbkl0c0xlc3NUaGFuT25lfSBmcm9tICcuLi9kYW1hZ2UnO1xyXG4vKlxyXG4gIFNpbmdsZSB0aW1lIGF0dGFjaywgdGhhdCBmaXJlcyBvbmx5IHdoZW4gb25lIHVuaXRcclxuICBoYXMgcnVzaGVkIGluIGZ1bGwgc3BlZWQgaW50byBhbm90aGVyXHJcbiovXHJcbmV4cG9ydCBjb25zdCBjaGFyZ2UgPSAoYXR0YWNrVW5pdDphbnksIGRlZmVuZFVuaXQ6YW55KSA9PiB7XHJcbiAgbGV0IGF0dGFja0FuZ2xlID0gY2hlY2tBdHRhY2tTaWRlKGF0dGFja1VuaXQsIGRlZmVuZFVuaXQpO1xyXG4gIGxldCBjaGFyZ2UgPSBjYWxjdWxhdGVDaGFyZ2UoYXR0YWNrVW5pdCwgZGVmZW5kVW5pdCwgYXR0YWNrQW5nbGUpO1xyXG4gIGRlZmVuZFVuaXQuaGVhbHRoID0gTWF0aC5yb3VuZChkZWZlbmRVbml0LmhlYWx0aCAtIGNoYXJnZSk7XHJcbn1cclxuXHJcbi8qXHJcbiAgY2FsY3VsYXRlIGNoYXJnZSBiYXNlZCBvbiBwb3NpdGlvblxyXG4gIG9mIHRoZSBlbmVteVxyXG4qL1xyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlQ2hhcmdlID0gKHVuaXQ6YW55LCBlbmVteTphbnksIGNoYXJnZVBvc2l0aW9uOnN0cmluZykgPT4ge1xyXG4gIGlmKGNoYXJnZVBvc2l0aW9uID09PSAnZnJvbnQnKSB7XHJcbiAgICBsZXQgaW5pdGlhbENoYXJnZSA9IHVuaXQuY2hhcmdlIC0gZW5lbXkuYXJtb3VyO1xyXG4gICAgaWYoaW5pdGlhbENoYXJnZSA8IDEpIHtcclxuICAgICAgcmV0dXJuIGNhbGN1bGF0ZURhbWFnZVdoZW5JdHNMZXNzVGhhbk9uZShpbml0aWFsQ2hhcmdlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbml0aWFsQ2hhcmdlO1xyXG4gIH1cclxuICBlbHNlIGlmKGNoYXJnZVBvc2l0aW9uID09PSAnc2lkZScpIHtcclxuICAgIGxldCBpbml0aWFsQ2hhcmdlID0gKHVuaXQuY2hhcmdlICogMS41KSAtIGVuZW15LmFybW91cjtcclxuICAgIGlmKGluaXRpYWxDaGFyZ2UgPCAxKSB7XHJcbiAgICAgIHJldHVybiBjYWxjdWxhdGVEYW1hZ2VXaGVuSXRzTGVzc1RoYW5PbmUoaW5pdGlhbENoYXJnZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5pdGlhbENoYXJnZTtcclxuICB9XHJcbiAgZWxzZSBpZihjaGFyZ2VQb3NpdGlvbiA9PT0gJ2JhY2snKSB7XHJcbiAgICByZXR1cm4gdW5pdC5jaGFyZ2U7IC8vIGJhY2sgb2YgdGhlIHVuaXQgY2hhcmdlIGNhbGN1bGF0ZWQgd2l0aG91dCBlbmVteSdzIGFybW91clxyXG4gIH1cclxufVxyXG4iLCIvLyBjYWxjdWxhdGUgdW5pdCBtZWxlZSBkYW1hZ2UgYnkgdW5pdCdzIGhlYWx0aCBhbmQgY29uZGl0aW9uXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVEYW1hZ2UgPSAoYXR0YWNrVW5pdDphbnksIGRhbWFnZTpudW1iZXIpID0+IHtcclxuICBsZXQgaGVhbHRoID0gYXR0YWNrVW5pdC5oZWFsdGg7XHJcbiAgbGV0IGNvbmRpdGlvbiA9IGF0dGFja1VuaXQuY29uZGl0aW9uO1xyXG4gIGlmKGhlYWx0aCA+PSA4MCAmJiBjb25kaXRpb24gPj0gODApIHtcclxuICAgIHJldHVybiBkYW1hZ2U7XHJcbiAgfVxyXG4gIGVsc2UgaWYoKGhlYWx0aCA+PSA4MCAmJiBjb25kaXRpb24gPj0gNTApIHx8IChjb25kaXRpb24gPj0gODAgJiYgaGVhbHRoID49IDUwKSkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoMC45ICogZGFtYWdlKTsgLy8gOTAlIG9mIGRhbWFnZVxyXG4gIH1cclxuICBlbHNlIGlmKGhlYWx0aCA+PSA1MCAmJiBjb25kaXRpb24gPj0gNTApIHtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKDAuOCAqIGRhbWFnZSk7XHJcbiAgfVxyXG4gIGVsc2UgaWYoaGVhbHRoID49IDUwIHx8IGNvbmRpdGlvbiA+PSA1MCkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoMC43ICogZGFtYWdlKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgwLjYgKiBkYW1hZ2UpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZURhbWFnZUJhc2VPbkVuZW15UG9zaXRpb24gPSAoZGFtYWdlOm51bWJlciwgZW5lbXlQb3NpdGlvbjpzdHJpbmcpID0+IHtcclxuICBpZihkYW1hZ2UgPD0gMSkge1xyXG4gICAgcmV0dXJuIGNhbGN1bGF0ZURhbWFnZVdoZW5JdHNMZXNzVGhhbk9uZShkYW1hZ2UpO1xyXG4gIH1cclxuICBpZihlbmVteVBvc2l0aW9uID09PSAnZnJvbnQnKSB7IC8vIGZyb250IGVuZW15IGdhaW4gMTAwJSBkYW1hZ2VcclxuICAgIHJldHVybiBkYW1hZ2U7XHJcbiAgfVxyXG4gIGVsc2UgaWYoZW5lbXlQb3NpdGlvbiA9PT0gJ2ZsYW5rJykgeyAvLyBmbGFuayBlbmVteSBnYWluIG9ubHkgMzAlIGRhbWFnZVxyXG4gICAgbGV0IGluaXRpYWxEYW1hZ2UgPSAgTWF0aC5yb3VuZChkYW1hZ2UgKiAwLjMpO1xyXG4gICAgaWYoaW5pdGlhbERhbWFnZSA8PSAxKSB7XHJcbiAgICAgIHJldHVybiBjYWxjdWxhdGVEYW1hZ2VXaGVuSXRzTGVzc1RoYW5PbmUoaW5pdGlhbERhbWFnZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5pdGlhbERhbWFnZTtcclxuICB9XHJcbiAgZWxzZSBpZihlbmVteVBvc2l0aW9uID09PSAncmVhcicpIHtcclxuICAgIGxldCBpbml0aWFsRGFtYWdlID0gIE1hdGgucm91bmQoZGFtYWdlICogMC4xKTsgLy8gYmFjayBlbmVteSBnYWluIG9ubHkgMTAlIG9mIGRhbWFnZVxyXG4gICAgaWYoaW5pdGlhbERhbWFnZSA8PSAxKSB7XHJcbiAgICAgIHJldHVybiBjYWxjdWxhdGVEYW1hZ2VXaGVuSXRzTGVzc1RoYW5PbmUoaW5pdGlhbERhbWFnZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5pdGlhbERhbWFnZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVEYW1hZ2VXaGVuSXRzTGVzc1RoYW5PbmUgPSAoZGFtYWdlOm51bWJlcikgPT4ge1xyXG4gIGxldCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gIGlmKHJhbmRvbSA+IDAuNSkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiAxO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHVuaXRzLFxyXG4gIHBsYXllclVuaXRzLFxyXG4gIGNvbXB1dGVyVW5pdHMsXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7cmVtb3ZlVW5pdH0gZnJvbSAnLi4vLi4vcmVtb3ZlJztcclxuaW1wb3J0IHtpc09iamVjdEVtcHR5LCBkZWxldGVPYmplY3RGcm9tQXJyYXl9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcclxuXHJcbi8qXHJcbiAgbG9vcCB0aHJvdWdoIGFsbCBlbmVtaWVzJyBmaWd0aEFnYWluc3QgYXJyYXlcclxuICBpZiB1bml0IGlzIGZpbmRlZCB0aGVyZSwgcmVtb3ZlIGl0IGZyb20gdGhlcmVcclxuKi9cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVVuaXRGcm9tRW5lbWllc0ZpZ2h0QWdhaW5zdCA9ICh1bml0OmFueSkgPT4ge1xyXG4gIGxldCBlbmVtaWVzOmFueVtdO1xyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICBlbmVtaWVzID0gcGxheWVyVW5pdHM7XHJcbiAgfSBlbHNlIHtcclxuICAgIGVuZW1pZXMgPSBjb21wdXRlclVuaXRzO1xyXG4gIH1cclxuICBpZihlbmVtaWVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgZm9yKGxldCBlbmVteSBvZiBlbmVtaWVzKSB7XHJcbiAgICAgIGVuZW15LnJlbW92ZUVuZW15RnJvbUZpZ2h0QWdhaW5zdCh1bml0KTsgLy8gcmVtb3ZlIHVuaXQgZnJvbSBlbmVteSdzIGZpZ3RoQWdhaW5zdFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZpbmRVbml0SW5GaWdodEFnYWluc3QgPSAodW5pdDphbnkpID0+IHtcclxuICBsZXQgZW5lbWllczphbnlbXSA9IFtdO1xyXG4gIGxldCBmaW5kZWRVbml0czphbnlbXSA9IFtdO1xyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAnY29tcHV0ZXInKSB7IC8vIGVuZW1pZXMgZm9yIGNvbXB1dGVyIGFyZSBwbGF5ZXJzVW5pdHNcclxuICAgIGVuZW1pZXMgPSBwbGF5ZXJVbml0cztcclxuICB9XHJcbiAgZWxzZSBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ3BsYXllcicpIHsgLy8gZW5lbWllcyBmb3IgcGxheWVyIGFyZSBjb21wdXRlcnNVbml0c1xyXG4gICAgZW5lbWllcyA9IGNvbXB1dGVyVW5pdHM7XHJcbiAgfVxyXG4gIGZvcihsZXQgZW5lbXkgb2YgZW5lbWllcykge1xyXG4gICAgbGV0IGZpZ3RoQWdhaW5zdCA9IGVuZW15LmZpZ3RoQWdhaW5zdDtcclxuICAgIGlmKGZpZ3RoQWdhaW5zdC5mcm9udC5pZCA9PT0gdW5pdC5pZCkgeyAvLyB1bml0IGlzIGluc2lkZSBmcm9udFxyXG4gICAgICBmaW5kZWRVbml0cy5wdXNoKGVuZW15KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoZmlndGhBZ2FpbnN0LnJlYXIuaWQgPT09IHVuaXQuaWQpIHsgLy8gdW5pdCBpcyBmaW5kZWQgYXMgcmVhciB1bml0XHJcbiAgICAgIGZpbmRlZFVuaXRzLnB1c2goZW5lbXkpO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBmbGFua1VuaXQgb2YgZmlndGhBZ2FpbnN0LmZsYW5rKSB7XHJcbiAgICAgIGlmKGZsYW5rVW5pdC5pZCA9PT0gdW5pdC5pZCkgeyAvLyB1bml0IGlzIGZpbmRlZCBhcyBmbGFuayB1bml0XHJcbiAgICAgICAgZmluZGVkVW5pdHMucHVzaChlbmVteSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGZpbmRlZFVuaXRzO1xyXG59XHJcbiIsImltcG9ydCB7dW5pdHN9IGZyb20gJy4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG5pbXBvcnQge3JlbW92ZVVuaXR9IGZyb20gJy4uLy4uL3JlbW92ZSc7XHJcbmltcG9ydCB7XHJcbiAgcmVtb3ZlVW5pdEZyb21TcG90dGVkVW5pdHMsXHJcbn0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvdW5pdC9zcG90dGVkVW5pdHMnO1xyXG5pbXBvcnQge2ZpbmRVbml0SW5GaWdodEFnYWluc3R9IGZyb20gJy4uL2ZpZ2h0QWdhaW5zdCc7XHJcbmltcG9ydCB7aXNVbml0RmlnaHRpbmd9IGZyb20gJy4vY2hlY2tGaWdodGluZyc7XHJcbmltcG9ydCB7Y3R4fSBmcm9tICcuLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7cmVmcmVzaG1lbnR9IGZyb20gJy4uL3JlZnJlc2htZW50JztcclxuaW1wb3J0IHtncmlkU2l6ZX0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0hlYWx0aCA9ICgpID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICBmb3IobGV0IHVuaXQgb2YgdW5pdHMpIHtcclxuICAgICAgaWYodW5pdC5oZWFsdGggPD0gMCkgeyAvLyB1bml0IGlzIGRlc3Ryb3llZFxyXG4gICAgICAgIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykgeyAvLyBpZiB1bml0IGlzIGRlc3Ryb3llZCByZW1vdmUgaXQgZnJvbSBzcG90dGVkVW5pdHNcclxuICAgICAgICAgIHJlbW92ZVVuaXRGcm9tU3BvdHRlZFVuaXRzKHVuaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihmaW5kVW5pdEluRmlnaHRBZ2FpbnN0KHVuaXQpLmxlbmd0aCA+IDApIHsgLy8gaWYgdW5pdCBpcyBmaWd0aEFnYWluc3Qgc29tZSBlbmVtaWVzXHJcbiAgICAgICAgICBmb3IobGV0IGVuZW15IG9mIGZpbmRVbml0SW5GaWdodEFnYWluc3QodW5pdCkpIHsgLy8gZGVsZXRlIHRoaXMgdW5pdCBmcm9tIGFsbCBlbmVteSdzIGZpZ2h0aW5nXHJcbiAgICAgICAgICAgIGVuZW15LnJlbW92ZUVuZW15RnJvbUZpZ2h0QWdhaW5zdCh1bml0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVtb3ZlVW5pdCh1bml0KTtcclxuICAgICAgICBjdHguY2xlYXJSZWN0KHVuaXQueCwgdW5pdC55LCBncmlkU2l6ZSwgZ3JpZFNpemUpOyAvLyByZW1vdmUgdW5pdCBmcm9tIHRoZSBtYXBcclxuICAgICAgfSBlbHNlIHsgLy8gdW5pdCBzdGlsbCBhbGl2ZVxyXG4gICAgICAgIGlzVW5pdEZpZ2h0aW5nKHVuaXQpO1xyXG4gICAgICAgIHJlZnJlc2htZW50KHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXNvbHZlKCk7XHJcbiAgfSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgcmVtb3ZlRnJvbVVuaXRzIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7IHJlbW92ZVVuaXRGcm9tVmlzaWJsZVVuaXRzIH0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC92aXNpYmxlVW5pdHMnO1xyXG5pbXBvcnQgeyByZW1vdmVGcm9tUmV2ZWFsZWRVbml0cyB9IGZyb20gJy4uLy4uL3N0b3JlL0FJL2VuZW1pZXMvcmV2ZWFsZWRFbmVtaWVzJztcclxuaW1wb3J0IFVuaXQgZnJvbSAnLi4vdHlwZXMvVW5pdCc7XHJcbmltcG9ydCB7IGNsZWFyVW5pdEltYWdlIH0gZnJvbSAnLi4vZHJhdy9kcmF3VW5pdCc7XHJcbmltcG9ydCB7IHJlbW92ZVVuaXRGcm9tU3BvdHRlZFVuaXRzIH0gZnJvbSAnLi4vLi4vc3RvcmUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVVuaXQgPSAodW5pdDogVW5pdCkgPT4ge1xyXG4gIGlmKHVuaXQpIHtcclxuICAgIGNsZWFyVW5pdEltYWdlKHVuaXQpO1xyXG4gICAgcmVtb3ZlRnJvbVVuaXRzKHVuaXQpO1xyXG4gICAgcmVtb3ZlVW5pdEZyb21WaXNpYmxlVW5pdHModW5pdCk7XHJcbiAgICByZW1vdmVVbml0RnJvbVNwb3R0ZWRVbml0cyh1bml0KTtcclxuICAgIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJykge1xyXG4gICAgICByZW1vdmVGcm9tUmV2ZWFsZWRVbml0cyh1bml0KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgYXNzaWduQ3VycmVudGx5Q2hvc2VuVW5pdCB9IGZyb20gJy4vY3VycmVudGx5Q2hvc2VuVW5pdCc7XHJcbmltcG9ydCB7XHJcbiAgYWRkVW5pdFRvU3BvdHRlZFVuaXRzLFxyXG4gIHNwb3R0ZWRVbml0cyxcclxuICByZW1vdmVVbml0RnJvbVNwb3R0ZWRVbml0c1xyXG59IGZyb20gJy4vc3BvdHRlZFVuaXRzJztcclxuaW1wb3J0IHtcclxuICBpbmNVbml0SWQsXHJcbiAgdW5pdElkXHJcbn0gZnJvbSAnLi91bml0SWQnO1xyXG5pbXBvcnQge1xyXG4gIGFkZFVuaXRJbnRvVmlzaWJsZVVuaXRzLFxyXG4gIHJlbW92ZVVuaXRGcm9tVmlzaWJsZVVuaXRzXHJcbn0gZnJvbSAnLi92aXNpYmxlVW5pdHMnO1xyXG5cclxuZXhwb3J0IHtcclxuICBhc3NpZ25DdXJyZW50bHlDaG9zZW5Vbml0LFxyXG4gIGFkZFVuaXRUb1Nwb3R0ZWRVbml0cyxcclxuICBzcG90dGVkVW5pdHMsXHJcbiAgcmVtb3ZlVW5pdEZyb21TcG90dGVkVW5pdHMsXHJcbiAgaW5jVW5pdElkLFxyXG4gIHVuaXRJZCxcclxuICBhZGRVbml0SW50b1Zpc2libGVVbml0cyxcclxuICByZW1vdmVVbml0RnJvbVZpc2libGVVbml0c1xyXG59XHJcbiIsIi8qXHJcbiAgSWYgdW5pdCBpcyBub3QgbW92aW5nIGFuZCBub3QgZmlnaHRpbmdcclxuICBzbyBpbmNyZWFzZSB1bml0J3MgY29uZGl0aW9uXHJcbiovXHJcbmV4cG9ydCBjb25zdCByZWZyZXNobWVudCA9ICh1bml0OmFueSkgPT4ge1xyXG4gIGlmKCF1bml0LmlzRmlnaHRpbmcgJiYgIXVuaXQuaXNNb3ZpbmcpIHtcclxuICAgIGlmKHVuaXQuY29uZGl0aW9uIDwgMTAwKSB7IC8vIGNvbmRpdGlvbiBjYW5ub3QgYmUgbW9yZSB0aGFuIDEwMFxyXG4gICAgICB1bml0LmluY3JlYXNlQ29uZGl0aW9uKDEpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyByYW5kb21pemVNZWxlZURhbWFnZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3JhbmRvbS9tZWxlZURhbWFnZSc7XHJcbmltcG9ydCB7XHJcbiAgY2FsY3VsYXRlRGFtYWdlLFxyXG4gIGNhbGN1bGF0ZURhbWFnZUJhc2VPbkVuZW15UG9zaXRpb25cclxufSBmcm9tICcuLi9kYW1hZ2UnO1xyXG5pbXBvcnQgeyBhcm1vdXJQZW5ldHJhdGlvbiB9IGZyb20gJy4uL2FybW91cic7XHJcbmltcG9ydCB7IHJlbW92ZVVuaXQgfSBmcm9tICcuLi8uLi9yZW1vdmUnO1xyXG5pbXBvcnQgeyBVbml0IH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xyXG5pbXBvcnQgeyBkcmF3VW5pdEljb24gfSBmcm9tICcuLi8uLi8uLi9VSS9iYXR0bGVVSS91bml0UGFuZWwvaWNvbi9kcmF3VW5pdEljb24nO1xyXG5pbXBvcnQgeyBkaXNwbGF5VW5pdEljb25zIH0gZnJvbSAnLi4vLi4vLi4vVUkvYmF0dGxlVUkvdW5pdFBhbmVsL2Rpc3BsYXkvZGlzcGxheVVuaXRJY29ucyc7XHJcblxyXG5leHBvcnQgY29uc3QgbWVsZWVBdHRhY2sgPSAoYXR0YWNrVW5pdDogVW5pdCwgZGVmZW5kVW5pdDogVW5pdCwgZW5lbXlQb3NpdGlvbjpzdHJpbmc9J2Zyb250JykgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGxldCBpbml0aWFsRGFtYWdlID0gcmFuZG9taXplTWVsZWVEYW1hZ2UoYXR0YWNrVW5pdC5tZWxlZURhbWFnZSk7XHJcbiAgICBsZXQgbWVsZWVEYW1hZ2UgPSBjYWxjdWxhdGVEYW1hZ2UoYXR0YWNrVW5pdCwgaW5pdGlhbERhbWFnZSk7XHJcbiAgICBpZihtZWxlZURhbWFnZSA8IDEpIG1lbGVlRGFtYWdlID0gMTsgLy8gZGFtYWdlIGNhbm5vdCBiZSBsZXNzIHRoYW4gMVxyXG4gICAgbGV0IGRhbWFnZSA9IGNhbGN1bGF0ZURhbWFnZUJhc2VPbkVuZW15UG9zaXRpb24obWVsZWVEYW1hZ2UsIGVuZW15UG9zaXRpb24pO1xyXG4gICAgbGV0IGFybW91ciA9IGRlZmVuZFVuaXQuYXJtb3VyO1xyXG4gICAgaWYoZGVmZW5kVW5pdC5oZWFsdGggPD0gMCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdkZWZlbmRVbml0IGlzIGRlc3Ryb3llZCcpO1xyXG4gICAgICBhdHRhY2tVbml0LnJlbW92ZUVuZW15RnJvbUZpZ2h0QWdhaW5zdChkZWZlbmRVbml0KTtcclxuICAgICAgcmVtb3ZlVW5pdChkZWZlbmRVbml0KTtcclxuICAgICAgZGlzcGxheVVuaXRJY29ucygpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkZWZlbmRVbml0LmhlYWx0aCA9IE1hdGgucm91bmQoZGVmZW5kVW5pdC5oZWFsdGggLSAoYXJtb3VyUGVuZXRyYXRpb24oZGFtYWdlLCBhcm1vdXIpKSk7XHJcbiAgICBhdHRhY2tVbml0LmNvbmRpdGlvbiAtPSAxO1xyXG4gICAgZHJhd1VuaXRJY29uKGRlZmVuZFVuaXQpO1xyXG4gICAgcmVzb2x2ZSgpO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7IHVuaXRzIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7IGlzT2JqZWN0RW1wdHkgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IG1lbGVlQXR0YWNrIH0gZnJvbSAnLic7XHJcbmltcG9ydCB7IGRyYXdVbml0SWNvbiB9IGZyb20gJy4uLy4uLy4uL1VJL2JhdHRsZVVJL3VuaXRQYW5lbC9pY29uL2RyYXdVbml0SWNvbic7XHJcblxyXG5leHBvcnQgY29uc3QgbWVsZWVDb21iYXQgPSAoKSA9PiB7XHJcbiAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICBpZighaXNPYmplY3RFbXB0eSh1bml0LmZpZ3RoQWdhaW5zdC5mcm9udCkpIHsgLy8gdW5pdCBoYXZlIGZyb250IGVuZW15XHJcbiAgICAgIGlmKCF1bml0LmZpZ3RoQWdhaW5zdC5mcm9udC5pc0ZpZ2h0aW5nKSB7IC8vIHVuaXQgaXMgZ2V0dGluZyBvdXQgb2YgY29tYmF0XHJcbiAgICAgICAgZHJhd1VuaXRJY29uKHVuaXQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBtZWxlZUF0dGFjayh1bml0LCB1bml0LmZpZ3RoQWdhaW5zdC5mcm9udCwgJ2Zyb250Jyk7XHJcbiAgICB9XHJcbiAgICBpZighaXNPYmplY3RFbXB0eSh1bml0LmZpZ3RoQWdhaW5zdC5yZWFyKSkgeyAvLyB1bml0IGhhdmUgcmVhciBlbmVteVxyXG4gICAgICBpZighdW5pdC5maWd0aEFnYWluc3QucmVhci5pc0ZpZ2h0aW5nKSB7IC8vIHVuaXQgaXMgZ2V0dGluZyBvdXQgb2YgY29tYmF0XHJcbiAgICAgICAgZHJhd1VuaXRJY29uKHVuaXQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBtZWxlZUF0dGFjayh1bml0LCB1bml0LmZpZ3RoQWdhaW5zdC5yZWFyLCAncmVhcicpO1xyXG4gICAgfVxyXG4gICAgaWYodW5pdC5maWd0aEFnYWluc3QuZmxhbmsubGVuZ3RoID4gMCkgeyAvLyB1bml0IGhhdmUgZmxuayBlbmVtaWVzXHJcbiAgICAgIGZvcihsZXQgZW5lbXkgb2YgdW5pdC5maWd0aEFnYWluc3QuZmxhbmspIHtcclxuICAgICAgICBpZighZW5lbXkuaXNGaWdodGluZykgeyAvLyB1bml0IGlzIGdldHRpbmcgb3V0IG9mIGNvbWJhdFxyXG4gICAgICAgICAgZHJhd1VuaXRJY29uKHVuaXQpO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZWxlZUF0dGFjayh1bml0LCBlbmVteSwgJ2ZsYW5rJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHthdHRhY2tFbmVteX0gZnJvbSAnLi9hdHRhY2snO1xyXG5pbXBvcnQge21vdmVUb30gZnJvbSAnLi9tb3ZlVG8nO1xyXG5pbXBvcnQge3B1cnN1ZVVuaXR9IGZyb20gJy4vcHVyc3VlVW5pdCc7XHJcbmltcG9ydCB7dXBkYXRlVW5pdH0gZnJvbSAnLi91cGRhdGVVbml0JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgYXR0YWNrRW5lbXksXHJcbiAgbW92ZVRvLFxyXG4gIHB1cnN1ZVVuaXQsXHJcbiAgdXBkYXRlVW5pdFxyXG59XHJcbiIsImltcG9ydCBVbml0IGZyb20gJy4uLy4uL3R5cGVzL1VuaXQnO1xyXG5pbXBvcnQge2dldE5vZGVGcm9tTWFwfSBmcm9tICcuLi8uLi8uLi91dGlscy9ub2RlL2dldC9mcm9tTWFwJztcclxuaW1wb3J0IHtpbml0aWFsTWFwfSBmcm9tICcuLi8uLi8uLi9tYXAvY3JlYXRlTWFwL2luaXRpYWxNYXAnO1xyXG5pbXBvcnQge3B1cnN1ZVVuaXR9IGZyb20gJy4vcHVyc3VlVW5pdCc7XHJcbmltcG9ydCB7YVN0YXJ9IGZyb20gJy4uLy4uLy4uL3BhdGgvYVN0YXIvQVN0YXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF0dGFja0VuZW15ID0gKHVuaXQ6VW5pdCwgZW5lbXk6VW5pdCk6dm9pZCA9PiB7XHJcbiAgaWYodW5pdC5pc01vdmluZykgeyAvLyBpZiB1bml0J3MgbW92aW5nIGRvbid0IGZpcmUgcHVyc3VlIGZ1bmN0aW9uXHJcbiAgICB1bml0LnNldFVuaXRUb1B1cnN1ZShlbmVteSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IHVuaXRYOm51bWJlciA9IHVuaXQueDtcclxuICAgIGNvbnN0IHVuaXRZOm51bWJlciA9IHVuaXQueTtcclxuICAgIGNvbnN0IGVuZW15WDpudW1iZXIgPSBlbmVteS54O1xyXG4gICAgY29uc3QgZW5lbXlZOm51bWJlciA9IGVuZW15Lnk7XHJcbiAgICB1bml0LnNldFVuaXRUb1B1cnN1ZShlbmVteSk7XHJcbiAgICBsZXQgc3RhcnROb2RlID0gZ2V0Tm9kZUZyb21NYXAodW5pdFgsIHVuaXRZKTtcclxuICAgIGxldCBmaW5pc2hOb2RlID0gZ2V0Tm9kZUZyb21NYXAoZW5lbXlYLCBlbmVteVkpO1xyXG4gICAgbGV0IHBhdGg6YW55ID0gYVN0YXIoaW5pdGlhbE1hcCwgc3RhcnROb2RlLCBmaW5pc2hOb2RlKTtcclxuICAgIHB1cnN1ZVVuaXQodW5pdCwgZW5lbXksIGVuZW15WCwgZW5lbXlZLCAwLCBwYXRoLCB0cnVlKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGZpbmRQYXRoRnJvbU9uZU5vZGVUb0Fub3RoZXIgPSAoc3RhcnRYOm51bWJlciwgc3RhcnRZOm51bWJlciwgZmluaXNoWDpudW1iZXIsIGZpbmlzaFk6bnVtYmVyKSA9PiB7XHJcbi8vIG5haXZlTGluZURyYXdpbmdBbGdvcml0aG1cclxuLy8gYWxnb3JpdGhtOlxyXG4vLyAgIGR4ID0geDIgLSB4MVxyXG4vLyAgIGR5ID0geTIgLSB5MVxyXG4vLyAgIGZvciB4IGZyb20geDEgdG8geDIge1xyXG4vLyAgICB5ID0geTEgKyBkeSAqICh4IC0geDEpIC8gZHhcclxuLy8gICAgcGxvdCh4LCB5KVxyXG4vLyB9XHJcbiAgbGV0IGR4ID0gZmluaXNoWCAtIHN0YXJ0WDtcclxuICBsZXQgZHkgPSBmaW5pc2hZIC0gc3RhcnRZO1xyXG4gIGxldCB4MSA9IHN0YXJ0WDtcclxuICBsZXQgeDIgPSBmaW5pc2hYO1xyXG4gIGxldCB5MSA9IHN0YXJ0WTtcclxuICBsZXQgeTIgPSBmaW5pc2hZO1xyXG4gIGxldCBwYXRoID0gW107XHJcbiAgaWYoeDEgPT09IHgyICYmIHkxID09PSB5Mikge1xyXG4gICAgcGF0aC5wdXNoKHt4OiB4MSwgeSA6IHkxfSk7XHJcbiAgICByZXR1cm4gcGF0aDtcclxuICB9XHJcbiAgaWYoeDEgPD0geDIpIHtcclxuICAgIGlmKE1hdGguYWJzKGR4KSA+PSBNYXRoLmFicyhkeSkpIHtcclxuICAgICAgaWYoeTEgPiB5Mikge1xyXG4gICAgICAgIGZvcihsZXQgeCA9IHgxOyB4IDw9IHgyOyArK3gpIHtcclxuICAgICAgICAgIGxldCB5ID0gTWF0aC5yb3VuZCh5MSArIGR5ICogKHggLSB4MSkgLyBkeCk7XHJcbiAgICAgICAgICBwYXRoLnB1c2goe3gsIHl9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoeTEgPD0geTIpIHtcclxuICAgICAgICBmb3IobGV0IHggPSB4MTsgeCA8PSB4MjsgKyt4KSB7XHJcbiAgICAgICAgICBsZXQgeSA9IE1hdGgucm91bmQoeTEgKyBkeSAqICh4IC0geDEpIC8gZHgpO1xyXG4gICAgICAgICAgcGF0aC5wdXNoKHt4LCB5fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihNYXRoLmFicyhkeCkgPCBNYXRoLmFicyhkeSkpIHtcclxuICAgICAgaWYoeTEgPiB5Mikge1xyXG4gICAgICAgIGZvcihsZXQgeSA9IHkxOyB5ID49IHkyOyAtLXkpIHtcclxuICAgICAgICAgIGxldCB4ID0gTWF0aC5yb3VuZCh4MSArIGR4ICogKHkgLSB5MSkgLyBkeSk7XHJcbiAgICAgICAgICBwYXRoLnB1c2goe3gsIHl9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoeTEgPD0geTIpIHtcclxuICAgICAgICBmb3IobGV0IHkgPSB5MTsgeSA8PSB5MjsgKyt5KSB7XHJcbiAgICAgICAgICBsZXQgeCA9IE1hdGgucm91bmQoeDEgKyBkeCAqICh5IC0geTEpIC8gZHkpO1xyXG4gICAgICAgICAgcGF0aC5wdXNoKHt4LCB5fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmKHgxID4geDIpIHtcclxuICAgIGlmKE1hdGguYWJzKGR4KSA+PSBNYXRoLmFicyhkeSkpIHtcclxuICAgICAgaWYoeTEgPiB5Mikge1xyXG4gICAgICAgIGZvcihsZXQgeCA9IHgxOyB4ID49IHgyOyAtLXgpIHtcclxuICAgICAgICAgIGxldCB5ID0gTWF0aC5yb3VuZCh5MSArIGR5ICogKHggLSB4MSkgLyBkeCk7XHJcbiAgICAgICAgICBwYXRoLnB1c2goe3gsIHl9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoeTEgPD0geTIpIHtcclxuICAgICAgICBmb3IobGV0IHggPSB4MTsgeCA+PSB4MjsgLS14KSB7XHJcbiAgICAgICAgICBsZXQgeSA9IE1hdGgucm91bmQoeTEgKyBkeSAqICh4IC0geDEpIC8gZHgpO1xyXG4gICAgICAgICAgcGF0aC5wdXNoKHt4LCB5fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihNYXRoLmFicyhkeCkgPCBNYXRoLmFicyhkeSkpIHtcclxuICAgICAgaWYoeTEgPiB5Mikge1xyXG4gICAgICAgIGZvcihsZXQgeSA9IHkxOyB5ID49IHkyOyAtLXkpIHtcclxuICAgICAgICAgIGxldCB4ID0gTWF0aC5yb3VuZCh4MSArIGR4ICogKHkgLSB5MSkgLyBkeSk7XHJcbiAgICAgICAgICBwYXRoLnB1c2goe3gsIHl9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoeTEgPD0geTIpIHtcclxuICAgICAgICBmb3IobGV0IHkgPSB5MTsgeSA8PSB5MjsgKyt5KSB7XHJcbiAgICAgICAgICBsZXQgeCA9IE1hdGgucm91bmQoeDEgKyBkeCAqICh5IC0geTEpIC8gZHkpO1xyXG4gICAgICAgICAgcGF0aC5wdXNoKHt4LCB5fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBwYXRoO1xyXG59XHJcbiIsImltcG9ydCB7aXNPYmplY3RFbXB0eX0gZnJvbSAnLi4vLi4nO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi8uLi91bml0L3R5cGVzL1VuaXQnO1xyXG4vKlxyXG4gIEFuYWx5emUgY2hhbmNlIHRvIGdldCBvdXQgZnJvbSB0aGUgY29tYmF0XHJcbiAgYW5kIHByb3ZpZGUgY29uY2x1c2lvbiBpbiBib29sZWFuIGZvcm1cclxuICB1bml0IGlzIG91dCBvZiBjb21iYXQgb3QgY29udGludWUgZmlnaHRpbmdcclxuKi9cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVDaGFuY2VUb0dldE91dE9mQ29tYmF0ID0gKHVuaXQ6VW5pdCk6bnVtYmVyID0+IHtcclxuICBsZXQgY2hhbmNlOm51bWJlciA9IDA7XHJcbiAgbGV0IG51bWJlck9mRW5lbXk6bnVtYmVyID0gMDtcclxuICBsZXQgdW5pdFNwZWVkOm51bWJlciA9IHVuaXQuc3BlZWQ7XHJcbiAgbGV0IHVuaXRNb2JpbGl0eTpudW1iZXIgPSB1bml0Lm1vYmlsaXR5O1xyXG4gIGxldCB0b3RhbEVuZW15U3BlZWQ6bnVtYmVyID0gMDtcclxuICBsZXQgdW5pdEhhc0VuZW15SW5UaGVCYWNrOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgaWYoIWlzT2JqZWN0RW1wdHkodW5pdC5maWd0aEFnYWluc3QuZnJvbnQpKSB7IC8vIHVuaXQgaXMgZmlnaHRpbmcgd2l0aCBlbmVteSBpbiBmcm9udCBvZiBpdFxyXG4gICAgbnVtYmVyT2ZFbmVteSsrOyAvLyBpbmNyZWFzZSBudW1iZXIgb2YgZW5lbXlcclxuICAgIHRvdGFsRW5lbXlTcGVlZCArPSB1bml0LmZpZ3RoQWdhaW5zdC5mcm9udC5zcGVlZDsgLy8gYWRkIGZyb250IGVuZW15J3Mgc3BlZWQgdG8gdGhlIHRvdGFsIGVuZW15IHNwZWVkXHJcbiAgfVxyXG4gIGlmKCFpc09iamVjdEVtcHR5KHVuaXQuZmlndGhBZ2FpbnN0LnJlYXIpKSB7IC8vIHVuaXQgaXMgZmlnaHRpbmcgd2l0aCBlbmVteSBpbiB0aGUgYmFja1xyXG4gICAgbnVtYmVyT2ZFbmVteSsrOyAvLyBpbmNyZWFzZSBudW1iZXIgb2YgZW5lbXlcclxuICAgIHRvdGFsRW5lbXlTcGVlZCArPSB1bml0LmZpZ3RoQWdhaW5zdC5yZWFyLnNwZWVkOyAvLyBhZGQgcmVhciBlbmVteSdzIHNwZWVkIHRvIHRoZSB0b3RhbCBlbmVteSBzcGVlZFxyXG4gICAgdW5pdEhhc0VuZW15SW5UaGVCYWNrID0gdHJ1ZTtcclxuICB9XHJcbiAgaWYodW5pdC5maWd0aEFnYWluc3QuZmxhbmsubGVuZ3RoID4gMCkge1xyXG4gICAgZm9yKGxldCBlbmVteSBvZiB1bml0LmZpZ3RoQWdhaW5zdC5mbGFuaykgeyAvLyBsb29wIHRocm91Z2ggYWxsIGZsYW5rIHVuaXRzXHJcbiAgICAgIG51bWJlck9mRW5lbXkrKztcclxuICAgICAgdG90YWxFbmVteVNwZWVkICs9IGVuZW15LnNwZWVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gZXZlcnkgZW5lbXkgZGVzY3JlYXNlcyBjaGFuY2UgdG8gcmV0cmlldGVcclxuICBpZihudW1iZXJPZkVuZW15ID09PSAxKSB7XHJcbiAgICBjaGFuY2UgLT0gMC4xO1xyXG4gIH1cclxuICBlbHNlIGlmKG51bWJlck9mRW5lbXkgPT09IDIpIHtcclxuICAgIGNoYW5jZSAtPSAwLjM7XHJcbiAgfVxyXG4gIGVsc2UgaWYobnVtYmVyT2ZFbmVteSA+IDIgJiYgbnVtYmVyT2ZFbmVteSA8PSA0KSB7XHJcbiAgICBjaGFuY2UgLT0gMC40O1xyXG4gIH1cclxuICBlbHNlIGlmKG51bWJlck9mRW5lbXkgPiA0KSB7XHJcbiAgICBjaGFuY2UgLT0gMC41O1xyXG4gIH1cclxuXHJcbiAgLy8gZW5lbXkgaGFzIGJhY2tlZCB1bml0XHJcbiAgaWYodW5pdEhhc0VuZW15SW5UaGVCYWNrKSB7XHJcbiAgICBjaGFuY2UgLT0gMC41O1xyXG4gIH1cclxuXHJcbiAgLy8gZGVzY3JlYXNlIGNoYW5jZSBiYXNlZCBvbiB1bml0J3MgY29uZGl0aW9uXHJcbiAgaWYodW5pdC5jb25kaXRpb24gPj0gNTAgJiYgdW5pdC5jb25kaXRpb24gPCA4MCkge1xyXG4gICAgY2hhbmNlIC09IDAuMTtcclxuICB9XHJcbiAgZWxzZSBpZih1bml0LmNvbmRpdGlvbiA+PSAyNSAmJiB1bml0LmNvbmRpdGlvbiA8IDUwKSB7XHJcbiAgICBjaGFuY2UgLT0gMC4yO1xyXG4gIH1cclxuICBlbHNlIGlmKHVuaXQuY29uZGl0aW9uIDwgMjUpIHtcclxuICAgIGNoYW5jZSAtPSAwLjQ7XHJcbiAgfVxyXG5cclxuICAvLyBpbmNyZWFzZSBjaGFuY2UgYmFzZWQgb24gc3BlZWQgYWR2YW50YWdlXHJcbiAgaWYodW5pdC5zcGVlZCA+PSB0b3RhbEVuZW15U3BlZWQpIHsgLy8gdW5pdCBoYXMgc3BlZWQgYWR2YW50YWdlXHJcbiAgICBpZigodW5pdC5zcGVlZCAvIHRvdGFsRW5lbXlTcGVlZCkgPj0gMykge1xyXG4gICAgICBjaGFuY2UgKz0gMC44O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZigodW5pdC5zcGVlZCAvIHRvdGFsRW5lbXlTcGVlZCkgPiAyICYmICh1bml0LnNwZWVkIC8gdG90YWxFbmVteVNwZWVkKSA8IDMpIHtcclxuICAgICAgY2hhbmNlICs9IDAuNjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoKHVuaXQuc3BlZWQgLyB0b3RhbEVuZW15U3BlZWQpID49IDEpIHtcclxuICAgICAgY2hhbmNlICs9IDAuNDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjaGFuY2UgKz0gMC4yO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7IC8vIHVuaXQgZG9lc24ndCBoYXZlIHNwZWVkIGFkdmFudGFnZVxyXG4gICAgaWYodG90YWxFbmVteVNwZWVkIC8gdW5pdC5zcGVlZCA8PSAxLjI1KSB7IC8vIGVuZW1pZXMgZG9uJ3QgaGF2ZSB0b3RhbCBzcGVlZCBhZHZhbnRhZ2VcclxuICAgICAgY2hhbmNlICs9IDAuMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vaW5jcmVhc2UgY2hhbmNlIGJhc2VkIG9uIG1vYmlsaXR5XHJcbiAgaWYodW5pdC5tb2JpbGl0eSA+PSAyICYmIHVuaXQubW9iaWxpdHkgPCAzKSB7XHJcbiAgICBjaGFuY2UgKz0gMC4xO1xyXG4gIH1cclxuICBlbHNlIGlmKHVuaXRNb2JpbGl0eSA+PSAzICYmIHVuaXRNb2JpbGl0eSA8IDUpIHtcclxuICAgIGNoYW5jZSArPSAwLjM7XHJcbiAgfVxyXG4gIGVsc2UgaWYodW5pdE1vYmlsaXR5ID09PSA1KSB7XHJcbiAgICBjaGFuY2UgKz0gMC41O1xyXG4gIH1cclxuICBlbHNlIGlmKHVuaXRNb2JpbGl0eSA+PSA1ICYmIHVuaXRNb2JpbGl0eSA8IDcpIHtcclxuICAgIGNoYW5jZSArPSAwLjc7XHJcbiAgfVxyXG4gIGVsc2UgaWYodW5pdE1vYmlsaXR5ID49IDcgJiYgdW5pdE1vYmlsaXR5IDwgOCkge1xyXG4gICAgY2hhbmNlICs9IDAuODtcclxuICB9XHJcbiAgZWxzZSBpZih1bml0TW9iaWxpdHkgPj0gOCkge1xyXG4gICAgY2hhbmNlICs9IDAuOTtcclxuICB9XHJcblxyXG4gIC8vIGNoYW5jZSBjYW5ub3QgYmUgbGVzcyB0aGF0IDAgYW5kIGdyZWF0ZXIgdGhhbiAxXHJcbiAgaWYoY2hhbmNlIDw9IDApIGNoYW5jZSA9IDAuMTtcclxuICBpZihjaGFuY2UgPj0gMSkgY2hhbmNlID0gMC45O1xyXG5cclxuICByZXR1cm4gY2hhbmNlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdW5pdENhbkdldE91dE9mQ29tYmF0ID0gKHVuaXQ6VW5pdCk6Ym9vbGVhbiA9PiB7XHJcbiAgbGV0IGNoYW5jZTpudW1iZXIgPSBjYWxjdWxhdGVDaGFuY2VUb0dldE91dE9mQ29tYmF0KHVuaXQpO1xyXG4gIGxldCByYW5kb20gPSBNYXRoLnJhbmRvbSgpO1xyXG4gIGlmKHJhbmRvbSA+PSAwICYmIHJhbmRvbSA8PSBjaGFuY2UpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuIiwiaW1wb3J0IHtkcmF3VW5pdH0gZnJvbSAnLi4vLi4nO1xyXG5pbXBvcnQge2dyaWRTaXplfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xyXG5pbXBvcnQge2N0eH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQgVW5pdCBmcm9tICcuLi8uLi90eXBlcy9Vbml0JztcclxuaW1wb3J0IHt1cGRhdGVVbml0fSBmcm9tICcuL3VwZGF0ZVVuaXQnO1xyXG5pbXBvcnQge3B1cnN1ZVVuaXR9IGZyb20gJy4vcHVyc3VlVW5pdCc7XHJcbmltcG9ydCB7IHBhdGhDdHggfSBmcm9tICcuLi8uLi8uLi9jb25maWcvY29udGV4dC9jb250ZXh0JztcclxuaW1wb3J0IHsgZHJhd1BhdGggfSBmcm9tICcuLi8uLi8uLi9wYXRoJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgbWFrZU1vdmVtZW50SW5VcGRhdGVVbml0ID0gKHVuaXQ6VW5pdCwgY3VycmVudE5vZGU6YW55LCBuZXh0Tm9kZTphbnksIHBhdGg6YW55W10sIGFsbFBhdGg6YW55W10sIGN1cnJYOm51bWJlciwgY3Vyclk6bnVtYmVyLCBpOm51bWJlciwgbm9kZUk6IG51bWJlcikgPT4ge1xyXG4gIC8vIHVuaXQgaGFzIHJlYWNoZWQgZGVzdGluYXRpb24gcG9pbnRcclxuICBpZih1bml0LnggPT09IG5leHROb2RlLnggJiYgdW5pdC55ID09PSBuZXh0Tm9kZS55KSB7XHJcbiAgICBub2RlSSsrO1xyXG4gICAgdXBkYXRlVW5pdCh1bml0LCBhbGxQYXRoLCBub2RlSSwgY3VyclgsIGN1cnJZLCBudWxsLCBmYWxzZSk7XHJcbiAgfVxyXG4gIGlmKGkgPj0gcGF0aC5sZW5ndGgpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgLy8gZGVsZXRlIHByZXZpb3VzIHN0YXRlXHJcbiAgbGV0IGRlbGV0ZVgsIGRlbGV0ZVk7XHJcbiAgaWYoaSA+IDApIHtcclxuICAgIGRlbGV0ZVggPSBwYXRoW2kgLSAxXS54IC0gKGdyaWRTaXplICogMC41KTtcclxuICAgIGRlbGV0ZVkgPSBwYXRoW2kgLSAxXS55IC0gKGdyaWRTaXplICogMC41KTtcclxuICB9IGVsc2Uge1xyXG4gICAgZGVsZXRlWCA9IHBhdGhbaV0ueCAgLSAoZ3JpZFNpemUgKiAwLjUpO1xyXG4gICAgZGVsZXRlWSA9IHBhdGhbaV0ueSAtIChncmlkU2l6ZSAqIDAuNSk7XHJcbiAgfVxyXG4gIFxyXG4gIGxldCBjbGVhclggPSB1bml0LmNlbnRlclggLSB1bml0LnJhZGl1cztcclxuICBsZXQgY2xlYXJZID0gIHVuaXQuY2VudGVyWSAtIHVuaXQucmFkaXVzO1xyXG4gIGxldCB1bml0RGlhbWV0ZXIgPSB1bml0LnJhZGl1cyAqIDI7XHJcbiAgY3R4LmNsZWFyUmVjdChjbGVhclgsIGNsZWFyWSwgdW5pdERpYW1ldGVyLCB1bml0RGlhbWV0ZXIpO1xyXG4gIGxldCBjZW50ZXJYID0gcGF0aFtpXS54O1xyXG4gIGxldCBjZW50ZXJZID0gcGF0aFtpXS55O1xyXG5cclxuICAvLyBzZXQgdW5pdC54IGFuZCB1bml0LnlcclxuICB1bml0LnNldFgoY2VudGVyWCAtIChncmlkU2l6ZSAqIDAuNSkpO1xyXG4gIHVuaXQuc2V0WShjZW50ZXJZIC0gKGdyaWRTaXplICogMC41KSk7XHJcblxyXG4gIFxyXG4gIGRyYXdVbml0KHVuaXQpO1xyXG4gIC8vZHJhd1BhdGgodW5pdCwgYWxsUGF0aCwgbm9kZUkpO1xyXG4gIC8vcGF0aEN0eC5jbGVhclJlY3QoZGVsZXRlWCwgZGVsZXRlWSwgZ3JpZFNpemUgLyAyLCBncmlkU2l6ZSAvIDIpO1xyXG5cclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIGkrKztcclxuICAgIG1ha2VNb3ZlbWVudEluVXBkYXRlVW5pdCh1bml0LCBjdXJyZW50Tm9kZSwgbmV4dE5vZGUsIHBhdGgsIGFsbFBhdGgsIGN1cnJYLCBjdXJyWSwgaSwgbm9kZUkpO1xyXG4gIH0sIE1hdGgucm91bmQoMTAwMCAvIHVuaXQuc3BlZWQpKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG1ha2VNb3ZlbWVudEluUHVyc3VlVW5pdCA9ICh1bml0OlVuaXQsIHB1cnN1ZWRVbml0OmFueSwgY3VycmVudE5vZGU6YW55LCBuZXh0Tm9kZTphbnksIHBhdGg6YW55W10sIGFsbFBhdGg6YW55W10sIGN1cnJYOm51bWJlciwgY3Vyclk6bnVtYmVyLCBpOm51bWJlciwgbm9kZUk6IG51bWJlcikgPT4ge1xyXG4gIGlmKHVuaXQueCA9PT0gbmV4dE5vZGUueCAmJiB1bml0LnkgPT09IG5leHROb2RlLnkpIHsgLy8gdW5pdCByZWFjaCBkZXN0aW5hdGlvbiBwb2ludFxyXG4gICAgbm9kZUkrKztcclxuICAgIHB1cnN1ZVVuaXQodW5pdCwgcHVyc3VlZFVuaXQsIGN1cnJYLCBjdXJyWSwgbm9kZUksIGFsbFBhdGgsIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGlmKGkgPj0gcGF0aC5sZW5ndGgpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIGRlbGV0ZSBwcmV2aW91cyBzdGF0ZVxyXG4gICBsZXQgZGVsZXRlWCwgZGVsZXRlWTtcclxuICAgaWYoaSA+IDApIHtcclxuICAgICBkZWxldGVYID0gcGF0aFtpIC0gMV0ueCAtIChncmlkU2l6ZSAqIDAuNSk7XHJcbiAgICAgZGVsZXRlWSA9IHBhdGhbaSAtIDFdLnkgLSAoZ3JpZFNpemUgKiAwLjUpO1xyXG4gICB9IGVsc2Uge1xyXG4gICAgIGRlbGV0ZVggPSBwYXRoW2ldLnggIC0gKGdyaWRTaXplICogMC41KTtcclxuICAgICBkZWxldGVZID0gcGF0aFtpXS55IC0gKGdyaWRTaXplICogMC41KTtcclxuICAgfVxyXG4gICBsZXQgY2xlYXJYID0gdW5pdC5jZW50ZXJYIC0gdW5pdC5yYWRpdXM7XHJcbiAgIGxldCBjbGVhclkgPSAgdW5pdC5jZW50ZXJZIC0gdW5pdC5yYWRpdXM7XHJcbiAgIGxldCB1bml0RGlhbWV0ZXIgPSB1bml0LnJhZGl1cyAqIDI7XHJcbiAgIGN0eC5jbGVhclJlY3QoY2xlYXJYLCBjbGVhclksIHVuaXREaWFtZXRlciwgdW5pdERpYW1ldGVyKTtcclxuICAgXHJcbiAgIGxldCBjZW50ZXJYID0gcGF0aFtpXS54O1xyXG4gICBsZXQgY2VudGVyWSA9IHBhdGhbaV0ueTtcclxuICAgdW5pdC5zZXRYKGNlbnRlclggLSAoZ3JpZFNpemUgKiAwLjUpKTtcclxuICAgdW5pdC5zZXRZKGNlbnRlclkgLSAoZ3JpZFNpemUgKiAwLjUpKTtcclxuICAgZHJhd1VuaXQodW5pdCk7XHJcblxyXG4gICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICBpKys7XHJcbiAgICAgbWFrZU1vdmVtZW50SW5QdXJzdWVVbml0KHVuaXQsIHB1cnN1ZWRVbml0LCBjdXJyZW50Tm9kZSwgbmV4dE5vZGUsIHBhdGgsIGFsbFBhdGgsIGN1cnJYLCBjdXJyWSwgaSwgbm9kZUkpO1xyXG4gICB9LCBNYXRoLnJvdW5kKDEwMDAgLyB1bml0LnNwZWVkKSk7XHJcbn1cclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuaW1wb3J0IHtncmlkU2l6ZX0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL21hcCc7XHJcbmltcG9ydCB7XHJcbiAgZmluZENsb3Nlc3RVbml0c1RvVGhlTm9kZUNlbnRlcixcclxuICBnZXRCZXN0VW5pdHNCeVByb3BlcnR5XHJcbn0gZnJvbSAnLi4vYWN0aW9ucyc7XHJcbmltcG9ydCB7c2h1ZmZsZVVuaXRzfSBmcm9tICcuLi9zaHVmZmxlJztcclxuaW1wb3J0IHt1bml0c30gZnJvbSAnLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCBNYXBOb2RlIGZyb20gJy4uLy4uLy4uL21hcC9ub2Rlcy9NYXBOb2RlJztcclxuXHJcbi8qXHJcbiAgQXNzZXNzIHByaW9yaXR5IG9mIGVhY2ggdW5pdHMgYW5kXHJcbiAgZGVjaWRlIHdoaWNoIHVuaXQgd2lsbCBtb3ZlIHRvIHRoZSBub2RlXHJcbiAgYW5kIHdoaWNoIG9uZXMgaGF2ZSB0byBmaW5kIGFub3RoZXIgcGF0aFxyXG4gIEFsZ29yaXRobTpcclxuICAxLiBIaWdoZXN0IHByaW9yaXR5IGhhcyB1bml0IGNsb3Nlc3QgdG8gY2VudGVyIG9mIHRoZSBub2RlXHJcbiAgMi4gSWYgdW5pdHMgYXJlIGluIHNhbWUgZGlzdGFuY2U6XHJcbiAgICAyLjEgZmFzdGVzdCB1bml0IGlzIGluIHByaW9yaXR5XHJcbiAgMy4gSWYgc2FtZSBkaXN0YW5jZSBhbmQgc3BlZWQgKHJlbWFpbmluZyB1bml0cyk6XHJcbiAgICAzLjEgUmFuZG9tbHkgY2hvb3NlIG9uZSB1bml0IGZyb20gdGhlIHJlbWFpbmluZyB1bml0c1xyXG5cclxuKi9cclxuZXhwb3J0IGNvbnN0IGdldFByaW9yaXR5VW5pdCA9IChub2RlOiBNYXBOb2RlLCB1bml0czpVbml0W10pOlVuaXQgPT4ge1xyXG4gIGxldCB1cGRhdGVkVW5pdHM6VW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gIGxldCBjbG9zZXN0VW5pdHM6VW5pdFtdID0gZmluZENsb3Nlc3RVbml0c1RvVGhlTm9kZUNlbnRlcihub2RlLCB1cGRhdGVkVW5pdHMpO1xyXG4gIGlmKGNsb3Nlc3RVbml0cy5sZW5ndGggPT09IDEpIHtcclxuICAgIHJldHVybiBjbG9zZXN0VW5pdHNbMF07XHJcbiAgfVxyXG4gIC8vIG1vcmUgdGhhbiAxIHVuaXQgaW4gdGhlIHNhbWUgZGlzdGFuY2VcclxuICBlbHNlIGlmKGNsb3Nlc3RVbml0cy5sZW5ndGggPiAxKXtcclxuICAgIGxldCBmYXN0ZXN0VW5pdHM6VW5pdFtdID0gZ2V0QmVzdFVuaXRzQnlQcm9wZXJ0eShjbG9zZXN0VW5pdHMsICdzcGVlZCcpO1xyXG4gICAgaWYoZmFzdGVzdFVuaXRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICByZXR1cm4gZmFzdGVzdFVuaXRzWzBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihmYXN0ZXN0VW5pdHMubGVuZ3RoID4gMSkge1xyXG4gICAgICBsZXQgc2h1ZmZsZWRVbml0czpVbml0W10gPSBzaHVmZmxlVW5pdHMoZmFzdGVzdFVuaXRzKTtcclxuICAgICAgbGV0IGNob3NlblVuaXQ6VW5pdCA9IHNodWZmbGVkVW5pdHNbMF07XHJcbiAgICAgIHJldHVybiBjaG9zZW5Vbml0O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCB1bml0Q2FuTW92ZVRvVGhlTm9kZSA9IChub2RlOiBNYXBOb2RlLCB1bml0OiBVbml0KTpib29sZWFuID0+IHtcclxuICBjb25zdCBwcmlvcml0eVVuaXQ6IFVuaXQgPSBnZXRQcmlvcml0eVVuaXQobm9kZSwgdW5pdHMpO1xyXG4gIGxldCBwZXJtaXNzaW9uOiBib29sZWFuID0gZmFsc2U7XHJcbiAgaWYodW5pdC5pZCA9PT0gcHJpb3JpdHlVbml0LmlkKSB7XHJcbiAgICBwZXJtaXNzaW9uID0gdHJ1ZTtcclxuICB9XHJcbiAgcmV0dXJuIHBlcm1pc3Npb247XHJcbn1cclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuXHJcbmNvbnN0IHNldFJhbmRvbVZhbHVlID0gKHVuaXRzOlVuaXRbXSk6YW55W10gPT4ge1xyXG4gIGxldCB1cGRhdGVkVW5pdHM6YW55W10gPSBPYmplY3QuYXNzaWduKFtdLCB1bml0cyk7XHJcbiAgZm9yKGxldCB1bml0IG9mIHVwZGF0ZWRVbml0cykge1xyXG4gICAgbGV0IHJhbmRvbVZhbHVlOm51bWJlciA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICB1bml0LnJhbmRvbVZhbHVlID0gcmFuZG9tVmFsdWU7XHJcbiAgfVxyXG4gIHJldHVybiB1cGRhdGVkVW5pdHM7XHJcbn1cclxuXHJcbmNvbnN0IHN3YXAgPSAoYXJyOmFueVtdLCBhOm51bWJlciwgYjpudW1iZXIpID0+IHtcclxuXHRsZXQgdGVtcCA9IGFyclthXTtcclxuXHRhcnJbYV0gPSBhcnJbYl07XHJcblx0YXJyW2JdID0gdGVtcDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHNodWZmbGVVbml0cyA9ICh1bml0czpVbml0W10pOlVuaXRbXSA9PiB7XHJcbiAgbGV0IG9yaWdpbmFsVW5pdHM6VW5pdFtdID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gIGxldCB1cGRhdGVkVW5pdHM6YW55W10gPSBzZXRSYW5kb21WYWx1ZSh1bml0cyk7XHJcblxyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCB1cGRhdGVkVW5pdHMubGVuZ3RoOyArK2kpIHtcclxuXHRcdGxldCBtaW4gPSBpO1xyXG5cdFx0Zm9yKGxldCBqID0gaSArIDE7IGogPCB1bml0cy5sZW5ndGg7ICsraikge1xyXG5cdFx0XHRpZih1cGRhdGVkVW5pdHNbal0ucmFuZG9tVmFsdWUgPT09IHVwZGF0ZWRVbml0c1ttaW5dLnJhbmRvbVZhbHVlKSB7XHJcblx0XHRcdFx0XHRtaW4gPSBqO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHVwZGF0ZWRVbml0c1tqXS5yYW5kb21WYWx1ZSA8IHVwZGF0ZWRVbml0c1ttaW5dLnJhbmRvbVZhbHVlKSB7XHJcblx0XHRcdFx0bWluID0gajtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYobWluICE9PSBpKSB7XHJcblx0XHRcdHN3YXAob3JpZ2luYWxVbml0cywgbWluLCBpKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG9yaWdpbmFsVW5pdHM7XHJcbn1cclxuIiwiaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRSYW5kb21WYWx1ZSA9ICh1bml0czpVbml0W10pOmFueVtdID0+IHtcclxuICBsZXQgaWRzID0gW107XHJcbiAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICBsZXQgdmFsdWUgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgbGV0IG9iaiA9IHtcclxuICAgICAgaWQ6IHVuaXQuaWQsXHJcbiAgICAgIHJhbmRvbVZhbHVlOiB2YWx1ZVxyXG4gICAgfVxyXG4gICAgaWRzLnB1c2gob2JqKTtcclxuICB9XHJcbiAgcmV0dXJuIGlkcztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBzd2FwID0gKGFycjphbnlbXSwgYTpudW1iZXIsIGI6bnVtYmVyKSA9PiB7XHJcblx0bGV0IHRlbXAgPSBhcnJbYV07XHJcblx0YXJyW2FdID0gYXJyW2JdO1xyXG5cdGFycltiXSA9IHRlbXA7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzaHVmZmxlSUQgPSAodW5pdHM6YW55W10pOmFueVtdID0+IHtcclxuICBsZXQgdXBkYXRlZFVuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgdW5pdHMpO1xyXG4gIGxldCBpZHM6YW55W10gPSBzZXRSYW5kb21WYWx1ZSh1cGRhdGVkVW5pdHMpO1xyXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyArK2kpIHtcclxuXHRcdGxldCBtaW4gPSBpO1xyXG5cdFx0Zm9yKGxldCBqID0gaSArIDE7IGogPCBpZHMubGVuZ3RoOyArK2opIHtcclxuXHRcdFx0aWYoaWRzW2pdLnJhbmRvbVZhbHVlID09PSBpZHNbbWluXS5yYW5kb21WYWx1ZSkge1xyXG5cdFx0XHRcdFx0bWluID0gajtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihpZHNbal0ucmFuZG9tVmFsdWUgPCBpZHNbbWluXS5yYW5kb21WYWx1ZSkge1xyXG5cdFx0XHRcdG1pbiA9IGo7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGlmKG1pbiAhPT0gaSkge1xyXG5cdFx0XHRzd2FwKGlkcywgbWluLCBpKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGlkcztcclxufVxyXG4iLCJpbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4uLy4uLy4uL3VuaXRcIjtcclxuaW1wb3J0IHsgZ3JpZFNpemUgfSBmcm9tIFwiLi4vLi4vLi4vY29uZmlnXCI7XHJcbmltcG9ydCBNYXBOb2RlIGZyb20gXCIuLi8uLi8uLi9tYXAvbm9kZXMvTWFwTm9kZVwiO1xyXG5pbXBvcnQgeyBnZXROb2RlRnJvbU1hcCB9IGZyb20gXCIuLi8uLi9ub2RlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0SW50ZXJjZXB0aW9uTm9kZXMgPSAodW5pdDogVW5pdCk6IE1hcE5vZGVbXSA9PiB7XHJcbiAgICBsZXQgbm9kZSA9IHVuaXQuY3VycmVudE5vZGU7XHJcbiAgICBsZXQgaW50ZXJjZXB0ZWROb2RlczogTWFwTm9kZVtdID0gW107XHJcbiAgICBmb3IobGV0IHggPSBub2RlLnggLSBncmlkU2l6ZTsgeCA8PSBub2RlLnggKyBncmlkU2l6ZTsgeCArPSBncmlkU2l6ZSkge1xyXG4gICAgICAgIGxldCBpbnRlcmNlcHRlZE5vZGUgPSBnZXROb2RlRnJvbU1hcCh4LCBub2RlLnkpO1xyXG4gICAgICAgIGlmKGludGVyY2VwdGVkTm9kZSAmJiB4ICE9PSBub2RlLngpIHtcclxuICAgICAgICAgICAgaW50ZXJjZXB0ZWROb2Rlcy5wdXNoKGludGVyY2VwdGVkTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yKGxldCB5ID0gbm9kZS55IC0gZ3JpZFNpemU7IHkgPD0gbm9kZS55ICsgZ3JpZFNpemU7IHkgKz0gZ3JpZFNpemUpIHtcclxuICAgICAgICBsZXQgaW50ZXJjZXB0ZWROb2RlID0gZ2V0Tm9kZUZyb21NYXAobm9kZS54LCB5KTtcclxuICAgICAgICBpZihpbnRlcmNlcHRlZE5vZGUgJiYgeSAhPSBub2RlLnkpIHtcclxuICAgICAgICAgICAgaW50ZXJjZXB0ZWROb2Rlcy5wdXNoKGludGVyY2VwdGVkTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGludGVyY2VwdGVkTm9kZXM7XHJcbn0iLCJpbXBvcnQge1xyXG4gIHNwb3RFbmVteSxcclxuICBpc1VuaXRTcG90dGVkQnlFbmVteSxcclxuICBzcG90VW5pdHNcclxufSBmcm9tICcuL3VuaXRTcG90dGluZyc7XHJcblxyXG5leHBvcnQge1xyXG4gIHNwb3RFbmVteSxcclxuICBpc1VuaXRTcG90dGVkQnlFbmVteSxcclxuICBzcG90VW5pdHNcclxufVxyXG4iLCJpbXBvcnQgeyBjdHggfSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7IGdyaWRTaXplIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgZHJhd1VuaXQgfSBmcm9tICcuLi9kcmF3JztcclxuaW1wb3J0IHtcclxuICBhZGRVbml0SW50b1Zpc2libGVVbml0cyxcclxuICByZW1vdmVVbml0RnJvbVZpc2libGVVbml0cyxcclxuICBhZGRVbml0VG9TcG90dGVkVW5pdHMsXHJcbn0gZnJvbSAnLi4vLi4vc3RvcmUnO1xyXG5pbXBvcnQge2FkZFRvUmV2ZWFsZWRVbml0c30gZnJvbSAnLi4vLi4vc3RvcmUvQUkvZW5lbWllcy9yZXZlYWxlZEVuZW1pZXMnO1xyXG5pbXBvcnQge1xyXG4gIHBsYXllclVuaXRzLFxyXG4gIGNvbXB1dGVyVW5pdHMsXHJcbn0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCBVbml0IGZyb20gJy4uL3R5cGVzL1VuaXQnO1xyXG5pbXBvcnQgeyBnZXROb2RlRnJvbU1hcCB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHtcclxuICBhZGRUb0hpZGluZ0VuZW1pZXMsXHJcbiAgcmVtb3ZlRnJvbUhpZGluZ0VuZW1pZXNcclxufSBmcm9tICcuLi8uLi9zdG9yZS9BSS9lbmVtaWVzL2hpZGluZ0VuZW1pZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNwb3RFbmVteSA9ICh1bml0OlVuaXQpID0+IHtcclxuICBsZXQgZW5lbWllczpVbml0W107XHJcbiAgaWYodW5pdC5jb250cm9sQnkgPT09ICdwbGF5ZXInKSB7XHJcbiAgICBlbmVtaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgY29tcHV0ZXJVbml0cyk7XHJcbiAgfVxyXG4gIGlmKHVuaXQuY29udHJvbEJ5ID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICBlbmVtaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgcGxheWVyVW5pdHMpO1xyXG4gIH1cclxuICBsZXQgdmlzaWJpbGl0eSA9IHVuaXQudmlzaWJpbGl0eTtcclxuICBsZXQgdmlzaWJpbGl0eVJhbmdlID0gdmlzaWJpbGl0eSAqIGdyaWRTaXplO1xyXG4gIGxldCB1bml0WDpudW1iZXIgPSB1bml0LmN1cnJlbnROb2RlLng7XHJcbiAgbGV0IHVuaXRZOm51bWJlciA9IHVuaXQuY3VycmVudE5vZGUueTtcclxuICBsZXQgdW5pdE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0WCwgdW5pdFkpO1xyXG4gIGZvcihsZXQgZW5lbXkgb2YgZW5lbWllcykge1xyXG4gICAgbGV0IGVuZW15WDpudW1iZXIgPSBlbmVteS5jdXJyZW50Tm9kZS54O1xyXG4gICAgbGV0IGVuZW15WTpudW1iZXIgPSBlbmVteS5jdXJyZW50Tm9kZS55O1xyXG4gICAgbGV0IGVuZW15Tm9kZSA9IGdldE5vZGVGcm9tTWFwKGVuZW15WCwgZW5lbXlZKTtcclxuICAgIGxldCBkeCA9IE1hdGguYWJzKHVuaXROb2RlLnggLSBlbmVteU5vZGUueCk7XHJcbiAgICBsZXQgZHkgPSBNYXRoLmFicyh1bml0Tm9kZS55IC0gZW5lbXlOb2RlLnkpO1xyXG4gICAgaWYodmlzaWJpbGl0eVJhbmdlID49IGR4ICYmIHZpc2liaWxpdHlSYW5nZSA+PSBkeSkgeyBcclxuICAgICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicgJiYgZW5lbXkuaXNWaXNpYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJlbW92ZUZyb21IaWRpbmdFbmVtaWVzKGVuZW15KTtcclxuICAgICAgfVxyXG4gICAgICBlbmVteS5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICBkcmF3VW5pdChlbmVteSk7XHJcbiAgICAgIGFkZFVuaXRJbnRvVmlzaWJsZVVuaXRzKGVuZW15KTtcclxuICAgICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgICAgICBhZGRVbml0VG9TcG90dGVkVW5pdHMoZW5lbXkpO1xyXG4gICAgICAgIGFkZFRvUmV2ZWFsZWRVbml0cyhlbmVteSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc1VuaXRTcG90dGVkQnlFbmVteSA9ICh1bml0OlVuaXQpID0+IHtcclxuICBsZXQgZW5lbWllczphbnlbXTtcclxuICBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ3BsYXllcicpIHtcclxuICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBjb21wdXRlclVuaXRzKTtcclxuICB9XHJcbiAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBwbGF5ZXJVbml0cyk7XHJcbiAgfVxyXG4gIGlmKGVuZW1pZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGxldCB1bml0WDpudW1iZXIgPSB1bml0LmN1cnJlbnROb2RlLng7XHJcbiAgbGV0IHVuaXRZOm51bWJlciA9IHVuaXQuY3VycmVudE5vZGUueTtcclxuICBsZXQgdW5pdE5vZGUgPSBnZXROb2RlRnJvbU1hcCh1bml0WCwgdW5pdFkpO1xyXG4gIGxldCBpc1Nwb3R0ZWQgPSBmYWxzZTtcclxuICBmb3IobGV0IGVuZW15IG9mIGVuZW1pZXMpIHtcclxuICAgIGxldCB2aXNpYmlsaXR5ID0gZW5lbXkudmlzaWJpbGl0eTtcclxuICAgIGxldCB2aXNpYmlsaXR5UmFuZ2UgPSB2aXNpYmlsaXR5ICogZ3JpZFNpemU7XHJcbiAgICBsZXQgZW5lbXlYOm51bWJlciA9IGVuZW15LmN1cnJlbnROb2RlLng7XHJcbiAgICBsZXQgZW5lbXlZOm51bWJlciA9IGVuZW15LmN1cnJlbnROb2RlLnk7XHJcbiAgICBsZXQgZW5lbXlOb2RlID0gZ2V0Tm9kZUZyb21NYXAoZW5lbXlYLCBlbmVteVkpO1xyXG4gICAgbGV0IGR4ID0gTWF0aC5hYnModW5pdE5vZGUueCAtIGVuZW15Tm9kZS54KTtcclxuICAgIGxldCBkeSA9IE1hdGguYWJzKHVuaXROb2RlLnkgLSBlbmVteU5vZGUueSk7XHJcbiAgICBpZih2aXNpYmlsaXR5UmFuZ2UgPj0gZHggJiYgdmlzaWJpbGl0eVJhbmdlID49IGR5KSB7XHJcbiAgICAgIGFkZFVuaXRJbnRvVmlzaWJsZVVuaXRzKHVuaXQpO1xyXG4gICAgICBpc1Nwb3R0ZWQgPSB0cnVlO1xyXG4gICAgICBpZih1bml0LmlzVmlzaWJsZSA9PT0gZmFsc2UgJiYgdW5pdC5jb250cm9sQnkgPT09ICdwbGF5ZXInKSB7XHJcbiAgICAgICAgcmVtb3ZlRnJvbUhpZGluZ0VuZW1pZXModW5pdCk7XHJcbiAgICAgIH1cclxuICAgICAgdW5pdC5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ2NvbXB1dGVyJykge1xyXG4gICAgICAgIGFkZFVuaXRUb1Nwb3R0ZWRVbml0cyhlbmVteSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicpIHtcclxuICAgICAgICBkcmF3VW5pdCh1bml0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBpZighaXNTcG90dGVkKSB7XHJcbiAgICByZW1vdmVVbml0RnJvbVZpc2libGVVbml0cyh1bml0KTtcclxuICAgIGlmKHVuaXQuY29udHJvbEJ5ID09PSAncGxheWVyJyAmJiB1bml0LmlzVmlzaWJsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICBhZGRUb0hpZGluZ0VuZW1pZXModW5pdCk7XHJcbiAgICB9XHJcbiAgICB1bml0LmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgaWYodW5pdC5jb250cm9sQnkgPT09ICdjb21wdXRlcicgJiYgIXVuaXQuaXNNb3ZpbmcpIHtcclxuICAgICAgY3R4LmNsZWFyUmVjdCh1bml0LngsIHVuaXQueSwgZ3JpZFNpemUsIGdyaWRTaXplKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzcG90VW5pdHMgPSAodW5pdHM6VW5pdFtdKSA9PiB7XHJcbiAgaWYodW5pdHMubGVuZ3RoID4gMCkge1xyXG4gICAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICAgIGlzVW5pdFNwb3R0ZWRCeUVuZW15KHVuaXQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNvbXB1dGVyVW5pdHMsXHJcbiAgcGxheWVyVW5pdHMsXHJcbiAgdW5pdHNcclxufSBmcm9tICcuL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG5pbXBvcnQgeyBkcmF3TWVzc2FnZSB9IGZyb20gJy4vVUkvbWVzc2FnZXMvZHJhd01lc3NhZ2UnO1xyXG5pbXBvcnQgeyBtZWxlZUNvbWJhdCwgc3BvdFVuaXRzIH0gZnJvbSAnLi91bml0JztcclxuaW1wb3J0IHsgZmluaXNoQmF0dGxlIH0gZnJvbSAnLi9jb25maWcvZ2xvYmFsL2dsb2JhbENvbmZpZyc7XHJcblxyXG5leHBvcnQgY29uc3QgYmF0dGxlTGlzdGVuZXIgPSAoKSA9PiB7XHJcbiAgc3BvdFVuaXRzKHVuaXRzKTtcclxuICBtZWxlZUNvbWJhdCgpO1xyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICBiYXR0bGVMaXN0ZW5lcigpO1xyXG4gIH0sIDYwMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc0JhdHRsZUVuZCA9ICgpID0+IHtcclxuICBsZXQgY29tcHV0ZXJOdW1iZXIgPSBjb21wdXRlclVuaXRzLmxlbmd0aDtcclxuICBsZXQgcGxheWVyTnVtYmVyID0gcGxheWVyVW5pdHMubGVuZ3RoO1xyXG4gIGlmKGNvbXB1dGVyTnVtYmVyID09PSAwIHx8IHBsYXllck51bWJlciA9PT0gMCkge1xyXG4gICAgZmluaXNoQmF0dGxlKCk7XHJcbiAgICBjaGVja1dpbm5lcihjb21wdXRlck51bWJlciwgcGxheWVyTnVtYmVyKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja1dpbm5lciA9IChjb21wdXRlck51bWJlcjogbnVtYmVyLCBwbGF5ZXJOdW1iZXI6IG51bWJlcikgPT4ge1xyXG4gIGlmKGNvbXB1dGVyTnVtYmVyID09PSAwKSB7XHJcbiAgICBkcmF3TWVzc2FnZSgnVmljdG9yeScpO1xyXG4gIH1cclxuICBlbHNlIGlmKHBsYXllck51bWJlciA9PT0gMCkge1xyXG4gICAgZmluaXNoQmF0dGxlKCk7XHJcbiAgICBkcmF3TWVzc2FnZSgnRGVmZWF0Jyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7TUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUfSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5pbXBvcnQge2JhY2tncm91bmRDYW52YXN9IGZyb20gJy4uLy4uL2NvbmZpZy9jYW52YXMnO1xyXG5cclxuaW1wb3J0IHtcclxuICBiYWNrZ3JvdW5kQ3R4LFxyXG4gIGN0eCxcclxuICBhdXhpbGlhcnlDdHhcclxufSBmcm9tICcuLi8uLi9jb25maWcvY29udGV4dCc7XHJcblxyXG5leHBvcnQgY29uc3QgZHJhd01lc3NhZ2UgPSAobWVzc2FnZTpzdHJpbmcpID0+IHtcclxuICAvLyBiYWNrZ3JvdW5kQ3R4LmNsZWFyUmVjdCgwLCAwLCBXSURUSCwgSEVJR0hUKTtcclxuICAvLyBjdHguY2xlYXJSZWN0KDAsMCwgV0lEVEgsIEhFSUdIVCk7XHJcbiAgY3R4LmZpbGxTdHlsZSA9ICcjMDAwJztcclxuICBjdHguZm9udCA9ICcyNTZweCBzZXJpZic7XHJcbiAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcclxuICBjdHguZmlsbFRleHQobWVzc2FnZSwgTUFQX1dJRFRIIC8gMiAtIDQwMCwgQ0FOVkFTX0hFSUdIVCAvIDIpO1xyXG59XHJcbiIsImltcG9ydCB7IGV2ZW50Q3R4IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0L2NvbnRleHRcIjtcclxuaW1wb3J0IHsgZ3JpZFNpemUsIE1BUF9XSURUSCwgTUFQX0hFSUdIVCB9IGZyb20gXCIuLi8uLi8uLi8uLi9jb25maWdcIjtcclxuaW1wb3J0IHsgZ2V0Tm9kZUZyb21NYXAgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkcmF3Q2xpY2tlZEljb24gPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHtcclxuICAgIGV2ZW50Q3R4LmNsZWFyUmVjdCgwLCAwLCBNQVBfV0lEVEgsIE1BUF9IRUlHSFQpO1xyXG4gICAgbGV0IG5vZGUgPSBnZXROb2RlRnJvbU1hcCh4LCB5KTtcclxuICAgIGlmKG5vZGUpIHtcclxuICAgICAgICBsZXQgbm9kZUNlbnRlclggPSBub2RlLnggKyAoZ3JpZFNpemUgLyAyKTtcclxuICAgICAgICBsZXQgbm9kZUNlbnRlclkgPSBub2RlLnkgKyAoZ3JpZFNpemUgLyAyKTtcclxuICAgICAgICBsZXQgcmFkaXVzID0gTWF0aC5yb3VuZChncmlkU2l6ZSAvIDMpO1xyXG4gICAgICAgIGV2ZW50Q3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGV2ZW50Q3R4LmFyYyhub2RlQ2VudGVyWCwgbm9kZUNlbnRlclksIHJhZGl1cywgMCwgTWF0aC5QSSoyKTtcclxuICAgICAgICBldmVudEN0eC5zdHJva2VTdHlsZSA9IFwiIzIwZWYwOVwiO1xyXG4gICAgICAgIGV2ZW50Q3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGV2ZW50Q3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudEN0eC5jbGVhclJlY3QoMCwgMCwgTUFQX1dJRFRILCBNQVBfSEVJR0hUKTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxufSIsImltcG9ydCBQcmV2aW91c1N0YXRlIGZyb20gXCIuLi9kZWNpc2lvblVuaXQvbWFwQ2hhbmdlc0RldGVjdGlvbi9QcmV2aW91c1N0YXRlXCI7XHJcbmltcG9ydCB7IG5lZWRUb0NoYW5nZVBvc2l0aW9uIH0gZnJvbSBcIi4uL2RlY2lzaW9uVW5pdC9tYXBDaGFuZ2VzRGV0ZWN0aW9uL2NoYW5nZVBvc2l0aW9uRGV0ZWN0aW9uXCI7XHJcbmltcG9ydCB7IG1vdmVVbml0cyB9IGZyb20gXCIuL21vdmVVbml0c1wiO1xyXG5pbXBvcnQgeyBjYWxjdWxhdGVUb3RhbFBvd2VyIH0gZnJvbSBcIi4uLy4uL2FuYWx5emVNb2R1bGUvcG93ZXJBbmFseXplXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY29tcHV0ZXJBY3Rpb24gPSAoKSA9PiB7XHJcbiAgICBsZXQgcHJldmlvdXNTdGF0ZSA9IG5ldyBQcmV2aW91c1N0YXRlKCk7XHJcbiAgICBjYWxjdWxhdGVUb3RhbFBvd2VyKCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZihuZWVkVG9DaGFuZ2VQb3NpdGlvbihwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdOZWVkIHRvIGNoYW5nZSBwb3NpdGlvbicpO1xyXG4gICAgICAgICAgICBtb3ZlVW5pdHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJldmlvdXNTdGF0ZS5zZXRQcmV2aW91c1N0YXRlKCk7XHJcbiAgICAgICAgY29tcHV0ZXJBY3Rpb24oKTtcclxuICAgIH0sIDYwMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjb21wdXRlck1vdmVtZW50ID0gKCkgPT4ge1xyXG4gICAgbW92ZVVuaXRzKCk7XHJcbiAgICBjb21wdXRlckFjdGlvbigpO1xyXG59IiwiaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi8uLi8uLi8uLi91bml0XCI7XHJcbmltcG9ydCB7IHBsYXllclVuaXRzLCBjb21wdXRlclVuaXRzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHNcIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlVG90YWxQbGF5ZXJQb3dlciwgY2FsY3VsYXRlVG90YWxDb21wdXRlclBvd2VyIH0gZnJvbSBcIi4uLy4uLy4uL2FuYWx5emVNb2R1bGUvcG93ZXJBbmFseXplXCI7XHJcbmltcG9ydCB7IHZpc2libGVGb3JQbGF5ZXJVbml0cywgdmlzaWJsZUZvckNvbXB1dGVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvdW5pdC92aXNpYmxlVW5pdHNcIjtcclxuaW1wb3J0IHsgaGlkaW5nRW5lbWllcyB9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9BSS9lbmVtaWVzL2hpZGluZ0VuZW1pZXNcIjtcclxuXHJcbmNsYXNzIFByZXZpb3VzU3RhdGUge1xyXG4gICAgcGxheWVyVW5pdHM6IFVuaXRbXTtcclxuICAgIGNvbXB1dGVyVW5pdHM6IFVuaXRbXTtcclxuICAgIHBsYXllclRvdGFsSGVhbHRoOiBudW1iZXI7XHJcbiAgICBjb21wdXRlclRvdGFsSGVhbHRoOiBudW1iZXI7XHJcbiAgICB2aXNpYmxlRm9yUGxheWVyVW5pdHM6IFVuaXRbXTtcclxuICAgIHZpc2libGVGb3JDb21wdXRlclVuaXRzOiBVbml0W107XHJcbiAgICBoaWRpbmdFbmVtaWVzOiBVbml0W107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgbGV0IHBsYXllclBvd2VyID0gY2FsY3VsYXRlVG90YWxQbGF5ZXJQb3dlcigpO1xyXG4gICAgICAgIGxldCBjb21wdXRlclBvd2VyID0gY2FsY3VsYXRlVG90YWxDb21wdXRlclBvd2VyKCk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJVbml0cyA9IE9iamVjdC5hc3NpZ24oW10sIHBsYXllclVuaXRzKTtcclxuICAgICAgICB0aGlzLmNvbXB1dGVyVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCBjb21wdXRlclVuaXRzKTtcclxuICAgICAgICB0aGlzLnBsYXllclRvdGFsSGVhbHRoID0gcGxheWVyUG93ZXIudG90YWxIZWFsdGg7XHJcbiAgICAgICAgdGhpcy5jb21wdXRlclRvdGFsSGVhbHRoID0gY29tcHV0ZXJQb3dlci50b3RhbEhlYWx0aDtcclxuICAgICAgICB0aGlzLnZpc2libGVGb3JQbGF5ZXJVbml0cyA9IE9iamVjdC5hc3NpZ24oW10sIHZpc2libGVGb3JQbGF5ZXJVbml0cyk7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyA9IE9iamVjdC5hc3NpZ24oW10sIHZpc2libGVGb3JDb21wdXRlclVuaXRzKTtcclxuICAgICAgICB0aGlzLmhpZGluZ0VuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBoaWRpbmdFbmVtaWVzKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQcmV2aW91c1N0YXRlKCkge1xyXG4gICAgICAgIGxldCBwbGF5ZXJQb3dlciA9IGNhbGN1bGF0ZVRvdGFsUGxheWVyUG93ZXIoKTtcclxuICAgICAgICBsZXQgY29tcHV0ZXJQb3dlciA9IGNhbGN1bGF0ZVRvdGFsQ29tcHV0ZXJQb3dlcigpO1xyXG4gICAgICAgIHRoaXMucGxheWVyVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCBwbGF5ZXJVbml0cyk7XHJcbiAgICAgICAgdGhpcy5jb21wdXRlclVuaXRzID0gT2JqZWN0LmFzc2lnbihbXSwgY29tcHV0ZXJVbml0cyk7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJUb3RhbEhlYWx0aCA9IHBsYXllclBvd2VyLnRvdGFsSGVhbHRoO1xyXG4gICAgICAgIHRoaXMuY29tcHV0ZXJUb3RhbEhlYWx0aCA9IGNvbXB1dGVyUG93ZXIudG90YWxIZWFsdGg7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlRm9yUGxheWVyVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCB2aXNpYmxlRm9yUGxheWVyVW5pdHMpO1xyXG4gICAgICAgIHRoaXMudmlzaWJsZUZvckNvbXB1dGVyVW5pdHMgPSBPYmplY3QuYXNzaWduKFtdLCB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyk7XHJcbiAgICAgICAgdGhpcy5oaWRpbmdFbmVtaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgaGlkaW5nRW5lbWllcyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByZXZpb3VzU3RhdGU7IiwiaW1wb3J0IFBvd2VyIGZyb20gJy4vUG93ZXInO1xyXG5leHBvcnQgbGV0IGluaXRpYWxDb21wdXRlclBvd2VyID0gbmV3IFBvd2VyO1xyXG4iLCJpbXBvcnQgUG93ZXIgZnJvbSAnLi9Qb3dlcic7XHJcbmV4cG9ydCBsZXQgaW5pdGlhbFBsYXllclBvd2VyID0gbmV3IFBvd2VyO1xyXG4iLCJpbXBvcnQgUG93ZXIgZnJvbSAnLi9Qb3dlcic7XHJcbmV4cG9ydCBsZXQgdmlzaWJsZVBsYXllclVuaXRzUG93ZXIgPSBuZXcgUG93ZXI7XHJcbiIsImltcG9ydCBQb3dlciBmcm9tICcuL1Bvd2VyJztcclxuXHJcbmV4cG9ydCBsZXQgcmV2ZWFsZWRVbml0c1Bvd2VyID0gbmV3IFBvd2VyOyIsImltcG9ydCBQcmV2aW91c1N0YXRlIGZyb20gXCIuL1ByZXZpb3VzU3RhdGVcIjtcclxuaW1wb3J0IHsgdmlzaWJsZUZvckNvbXB1dGVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvdW5pdC92aXNpYmxlVW5pdHNcIjtcclxuaW1wb3J0IHsgY29tcHV0ZXJVbml0cywgcGxheWVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0c1wiO1xyXG5pbXBvcnQgeyBwbGF5ZXJQb3dlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9BSS9wb3dlci9wbGF5ZXJQb3dlclwiO1xyXG5pbXBvcnQgeyBjb21wdXRlclBvd2VyIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N0b3JlL0FJL3Bvd2VyL2NvbXB1dGVyUG93ZXJcIjtcclxuaW1wb3J0IHsgaGlkaW5nRW5lbWllcyB9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9BSS9lbmVtaWVzL2hpZGluZ0VuZW1pZXNcIjtcclxuaW1wb3J0IHsgaXNVbml0c0NoYW5nZWQsIGdldEZpZ2h0aW5nVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvdW5pdC9BSS9BSV9hY3Rpb25zXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbmVlZFRvQ2hhbmdlUG9zaXRpb24gPSAocHJldmlvdXNTdGF0ZTogUHJldmlvdXNTdGF0ZSk6IGJvb2xlYW4gPT4ge1xyXG4gICAgaWYoaXNVbml0c0NoYW5nZWQodmlzaWJsZUZvckNvbXB1dGVyVW5pdHMsIHByZXZpb3VzU3RhdGUudmlzaWJsZUZvckNvbXB1dGVyVW5pdHMpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGNvbXB1dGVyVW5pdHMubGVuZ3RoICE9IHByZXZpb3VzU3RhdGUuY29tcHV0ZXJVbml0cy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYocGxheWVyVW5pdHMubGVuZ3RoICE9IHByZXZpb3VzU3RhdGUucGxheWVyVW5pdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBsZXQgcGxheWVySGVhbHRoUGVyY2VudGFnZSA9IHByZXZpb3VzU3RhdGUucGxheWVyVG90YWxIZWFsdGggLyBwbGF5ZXJQb3dlci50b3RhbEhlYWx0aDtcclxuICAgIGlmKDEgLSBwbGF5ZXJIZWFsdGhQZXJjZW50YWdlID49IDAuMikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgbGV0IGNvbXB1dGVySGVhbHRoUGVyY2VudGFnZSA9IHByZXZpb3VzU3RhdGUuY29tcHV0ZXJUb3RhbEhlYWx0aCAvIGNvbXB1dGVyUG93ZXIudG90YWxIZWFsdGg7XHJcbiAgICBpZigxIC0gY29tcHV0ZXJIZWFsdGhQZXJjZW50YWdlID49IDAuMikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYoaXNVbml0c0NoYW5nZWQoaGlkaW5nRW5lbWllcywgcHJldmlvdXNTdGF0ZS5oaWRpbmdFbmVtaWVzKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYoaXNVbml0c0NoYW5nZWQoZ2V0RmlnaHRpbmdVbml0cyhjb21wdXRlclVuaXRzKSwgZ2V0RmlnaHRpbmdVbml0cyhwcmV2aW91c1N0YXRlLmNvbXB1dGVyVW5pdHMpKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59IiwiaW1wb3J0IHsgY29tcHV0ZXJVbml0cyB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZS91bml0L3VuaXRzXCI7XHJcbmltcG9ydCB7IG1vdmVUbyB9IGZyb20gJy4uLy4uLy4uL3VuaXQvbW92ZW1lbnQvY29tbW9uL21vdmVUbyc7XHJcbmltcG9ydCB7IGJlc3RBY3Rpb25BbGdvcml0aG0gfSBmcm9tIFwiLi4vZGVjaXNpb25Vbml0L2Jlc3RQb3NpdGlvbkFsZ29yaXRobS9iZXN0QWN0aW9uc1wiO1xyXG5pbXBvcnQgQ29tbWFuZHMgZnJvbSBcIi4uLy4uLy4uL3N0b3JlL0FJL2NvbW1hbmRzL0NvbW1hbmRzXCI7XHJcbmltcG9ydCBBY3Rpb24gZnJvbSBcIi4uL2RlY2lzaW9uVW5pdC9yYW5kb21BY3Rpb24vQWN0aW9uXCI7XHJcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi4vZGVjaXNpb25Vbml0L3JhbmRvbUFjdGlvbi9Db21tYW5kXCI7XHJcbmltcG9ydCB7IGF0dGFja0VuZW15IH0gZnJvbSBcIi4uLy4uLy4uL3VuaXQvbW92ZW1lbnRcIjtcclxuaW1wb3J0IHsgYXNzZXNzVnVsbmVyYWJpbGl0eSB9IGZyb20gXCIuLi8uLi9wcm9jZXNzTW9kdWxlL3Z1bG5lcmFiaWxpdHlcIjtcclxuaW1wb3J0IHsgYmVDbG9zZVRvIH0gZnJvbSBcIi4uLy4uLy4uL3VuaXQvbW92ZW1lbnQvY29tcHV0ZXIvYmVDbG9zZVRvXCI7XHJcbmltcG9ydCB7IGdlbmVyYXRlQ3VycmVudENvbW1hbmROdW1iZXIgfSBmcm9tIFwiLi4vZGVjaXNpb25Vbml0L2NvbW1hbmROdW1iZXIvY3VycmVudENvbW1hbmROdW1iZXJcIjtcclxuaW1wb3J0IHsgc2V0Q29tbWFuZE51bWJlclRvVW5pdHMgfSBmcm9tIFwiLi4vZGVjaXNpb25Vbml0L2NvbW1hbmROdW1iZXIvc2V0Q29tbWFuZE51bWJlclRvVW5pdHNcIjtcclxuaW1wb3J0IHsgYWR2YW5jZSB9IGZyb20gXCIuLi8uLi8uLi91bml0L21vdmVtZW50L2NvbXB1dGVyL2FkdmFuY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBtb3ZlVW5pdHMgPSAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdtb3ZlVW5pdHMnKTtcclxuICAgIGxldCBjb21tYW5kTnVtYmVyID0gZ2VuZXJhdGVDdXJyZW50Q29tbWFuZE51bWJlcigpO1xyXG4gICAgc2V0Q29tbWFuZE51bWJlclRvVW5pdHMoY29tbWFuZE51bWJlcik7XHJcbiAgICBsZXQgY29tbWFuZHM6IENvbW1hbmRzID0gYmVzdEFjdGlvbkFsZ29yaXRobSgpO1xyXG4gICAgZm9yKGxldCB1bml0IG9mIGNvbXB1dGVyVW5pdHMpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBjb21tYW5kIHVuaXQgJHt1bml0LmlkfSAke2NvbW1hbmRzLmdldENvbW1hbmRzQnlVbml0SWQodW5pdC5pZCkuY29tbWFuZH1gKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgdW5pdCBvZiBjb21wdXRlclVuaXRzKSB7XHJcbiAgICAgICAgbGV0IGFjdGlvbjogQWN0aW9uID0gY29tbWFuZHMuZ2V0Q29tbWFuZHNCeVVuaXRJZCh1bml0LmlkKTtcclxuICAgICAgICBsZXQgY29tbWFuZCA9IGFjdGlvbi5jb21tYW5kO1xyXG4gICAgICAgIGxldCBub2RlID0gYWN0aW9uLm5vZGU7XHJcbiAgICAgICAgaWYoY29tbWFuZCA9PT0gQ29tbWFuZC5BdHRhY2spIHtcclxuICAgICAgICAgICAgYXR0YWNrRW5lbXkodW5pdCwgYWN0aW9uLmFjdGlvblVuaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGNvbW1hbmQgPT09IENvbW1hbmQuTW92ZVRvTm9kZSkge1xyXG4gICAgICAgICAgICBhZHZhbmNlKHVuaXQsIGFjdGlvbi5ub2RlLCBjb21tYW5kTnVtYmVyLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjb21tYW5kID09PSBDb21tYW5kLkJlQ2xvc2VUb1VuaXQpIHtcclxuICAgICAgICAgICAgbGV0IGFsbHkgPSBhY3Rpb24uYWN0aW9uVW5pdDtcclxuICAgICAgICAgICAgbGV0IHVuaXRWdWxuZXJhYmlsaXR5ID0gYXNzZXNzVnVsbmVyYWJpbGl0eSh1bml0KTtcclxuICAgICAgICAgICAgbGV0IGFsbHlWdWxuZXJhYmlsaXR5ID0gYXNzZXNzVnVsbmVyYWJpbGl0eShhbGx5KTtcclxuICAgICAgICAgICAgaWYodW5pdFZ1bG5lcmFiaWxpdHkgPj0gYWxseVZ1bG5lcmFiaWxpdHkpIHtcclxuICAgICAgICAgICAgICAgIGJlQ2xvc2VUbyh1bml0LCBhbGx5LCBjb21tYW5kTnVtYmVyLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiZUNsb3NlVG8odW5pdCwgYWxseSwgY29tbWFuZE51bWJlciwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IGdlbmVyYXRlUmFuZG9tQWN0aW9uIH0gZnJvbSBcIi4uL3JhbmRvbUFjdGlvbi9nZW5lcmF0ZVJhbmRvbUFjdGlvblwiO1xyXG5pbXBvcnQgeyBjb21wdXRlclVuaXRzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHNcIjtcclxuaW1wb3J0IEFjdGlvbiBmcm9tIFwiLi4vcmFuZG9tQWN0aW9uL0FjdGlvblwiO1xyXG5pbXBvcnQgQ29tbWFuZFF1ZXVlIGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9xdWV1ZXMvQ29tbWFuZFF1ZXVlXCI7XHJcbmltcG9ydCBDb21tYW5kcyBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvQUkvY29tbWFuZHMvQ29tbWFuZHNcIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlVG90YWxFZmZpY2llbmN5IH0gZnJvbSBcIi4uLy4uLy4uL3Byb2Nlc3NNb2R1bGUvZWZmaWNpZW5jeS90b3RhbEVmZmljaWVuY3lcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBiZXN0QWN0aW9uQWxnb3JpdGhtID0gKCk6IENvbW1hbmRzID0+IHtcclxuICAgIGNvbnN0IG1heEF0dGVtcHRzID0gMTA7XHJcbiAgICBsZXQgY29tbWFuZFF1ZXVlOiBDb21tYW5kUXVldWUgPSBuZXcgQ29tbWFuZFF1ZXVlKCk7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICB3aGlsZShpIDw9IG1heEF0dGVtcHRzKSB7XHJcbiAgICAgICAgbGV0IGNvbW1hbmRzOiBDb21tYW5kcyA9IG5ldyBDb21tYW5kcygpO1xyXG4gICAgICAgIGZvcihsZXQgdW5pdCBvZiBjb21wdXRlclVuaXRzKSB7XHJcbiAgICAgICAgICAgIGxldCBhY3Rpb246IEFjdGlvbiA9IGdlbmVyYXRlUmFuZG9tQWN0aW9uKHVuaXQpO1xyXG4gICAgICAgICAgICBjb21tYW5kcy5hZGRDb21tYW5kKHVuaXQuaWQsIGFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB1bml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zID0gY29tbWFuZHMuZ2V0VW5pdHNXaXRoU2ltdWxhdGluZ1Bvc2l0aW9ucygpO1xyXG4gICAgICAgIGxldCBlZmZpY2llbmN5ID0gY2FsY3VsYXRlVG90YWxFZmZpY2llbmN5KHVuaXRzV2l0aFNpbXVsYXRpbmdQb3NpdGlvbnMpO1xyXG4gICAgICAgIGNvbW1hbmRRdWV1ZS5pbnNlcnQoZWZmaWNpZW5jeSwgY29tbWFuZHMpO1xyXG4gICAgICAgIGkgPSBpICsgMTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21tYW5kUXVldWUuZXh0cmFjdE1heCgpO1xyXG59IiwiaW1wb3J0IHsgdmlzaWJsZUZvckNvbXB1dGVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvdW5pdC92aXNpYmxlVW5pdHNcIjtcclxuaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi8uLi8uLi8uLi91bml0XCI7XHJcbmltcG9ydCB7IGdldFJhbmRvbVVuaXQgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvdW5pdC9yYW5kb20vZ2V0UmFuZG9tVW5pdFwiO1xyXG5pbXBvcnQgeyBwbGF5ZXJVbml0cywgY29tcHV0ZXJVbml0cyB9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS91bml0L3VuaXRzXCI7XHJcbmltcG9ydCB7IGdldFN1cnJvdW5kZWROb2RlcyB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQgTWFwTm9kZSBmcm9tIFwiLi4vLi4vLi4vLi4vbWFwL25vZGVzL01hcE5vZGVcIjtcclxuaW1wb3J0IHsgZ2V0UmFuZG9tTm9kZSB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9ub2RlXCI7XHJcbmltcG9ydCB7IGdldFJhbmRvbVZhbHVlSW5SYW5nZSB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9yYW5kb21cIjtcclxuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCIuL0NvbW1hbmRcIjtcclxuaW1wb3J0IEFjdGlvbiBmcm9tIFwiLi9BY3Rpb25cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVJhbmRvbUFjdGlvbiA9ICh1bml0OiBVbml0KTogQWN0aW9uID0+IHtcclxuICAgIGxldCBhY3Rpb25Vbml0OiBVbml0ID0gbnVsbDtcclxuICAgIGxldCBhY3Rpb25Ob2RlOiBNYXBOb2RlO1xyXG4gICAgbGV0IGNvbW1hbmQgPSBjaG9vc2VSYW5kb21Db21tYW5kKCk7XHJcbiAgICBpZih2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cy5sZW5ndGggPT09IDAgJiYgKGNvbW1hbmQgPT09IENvbW1hbmQuTW92ZVRvTm9kZSB8fCBjb21tYW5kID09PSBDb21tYW5kLkF0dGFjaykpIHtcclxuICAgICAgICBjb21tYW5kID0gQ29tbWFuZC5Nb3ZlVG9Ob2RlO1xyXG4gICAgICAgIGxldCBlbmVteSA9IGdldFJhbmRvbVVuaXQocGxheWVyVW5pdHMpO1xyXG4gICAgICAgIGxldCBub2RlcyA9IGdldFN1cnJvdW5kZWROb2RlcyhlbmVteSwgMyk7XHJcbiAgICAgICAgYWN0aW9uTm9kZSA9IGdldFJhbmRvbU5vZGUobm9kZXMpO1xyXG4gICAgfSBcclxuICAgIGVsc2UgaWYoY29tbWFuZCA9PT0gQ29tbWFuZC5BdHRhY2spIHtcclxuICAgICAgICBhY3Rpb25Vbml0ID0gZ2V0UmFuZG9tVW5pdCh2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cyk7XHJcbiAgICAgICAgYWN0aW9uTm9kZSA9IGFjdGlvblVuaXQuY3VycmVudE5vZGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGNvbW1hbmQgPT09IENvbW1hbmQuTW92ZVRvTm9kZSkge1xyXG4gICAgICAgIGxldCBub2RlcyA9IGdldFN1cnJvdW5kZWROb2Rlcyh1bml0KTtcclxuICAgICAgICBhY3Rpb25Ob2RlID0gZ2V0UmFuZG9tTm9kZShub2Rlcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGNvbW1hbmQgPT09IENvbW1hbmQuQmVDbG9zZVRvVW5pdCkge1xyXG4gICAgICAgIGFjdGlvblVuaXQgPSBnZXRSYW5kb21Vbml0KGNvbXB1dGVyVW5pdHMpO1xyXG4gICAgICAgIGFjdGlvbk5vZGUgPSBhY3Rpb25Vbml0LmN1cnJlbnROb2RlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gbmV3IEFjdGlvbih1bml0LCBhY3Rpb25Ob2RlLCBjb21tYW5kLCBhY3Rpb25Vbml0KTtcclxufVxyXG5cclxuY29uc3QgY2hvb3NlUmFuZG9tQ29tbWFuZCA9ICgpOiBDb21tYW5kID0+IHtcclxuICAgIGxldCByYW5kb21OdW1iZXIgPSBnZXRSYW5kb21WYWx1ZUluUmFuZ2UoMCwgMik7XHJcbiAgICBsZXQgYWN0aW9uczogQ29tbWFuZFtdID0gW0NvbW1hbmQuQmVDbG9zZVRvVW5pdCwgQ29tbWFuZC5BdHRhY2ssIENvbW1hbmQuTW92ZVRvTm9kZV07XHJcbiAgICByZXR1cm4gYWN0aW9uc1tyYW5kb21OdW1iZXJdO1xyXG59IiwiaW1wb3J0IHtcclxuICAgIGdldFJhbmRvbVZhbHVlSW5SYW5nZVxyXG59IGZyb20gJy4vZ2V0UmFuZG9tVmFsdWVJblJhbmdlJztcclxuXHJcbmltcG9ydCB7XHJcbiAgICByYW5kb21pemVNZWxlZURhbWFnZVxyXG59IGZyb20gJy4vbWVsZWVEYW1hZ2UnO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIGdldFJhbmRvbVZhbHVlSW5SYW5nZVdpdGhQcm9iYWJpbGl0eVxyXG59IGZyb20gJy4vcmFuZ2VXaXRoUHJvYmFiaWxpdHknO1xyXG5cclxuXHJcblxyXG5leHBvcnQge1xyXG4gICAgZ2V0UmFuZG9tVmFsdWVJblJhbmdlLFxyXG4gICAgZ2V0UmFuZG9tVmFsdWVJblJhbmdlV2l0aFByb2JhYmlsaXR5LFxyXG4gICAgcmFuZG9taXplTWVsZWVEYW1hZ2VcclxufSIsImltcG9ydCB7Z2V0UmFuZG9tVmFsdWVJblJhbmdlfSBmcm9tICcuL2dldFJhbmRvbVZhbHVlSW5SYW5nZSc7XHJcblxyXG4vKlxyXG4gICAgcmV0dXJuIGEgcmFuZG9tIG51bWJlciB3aXRoaW4gdGhlIHJhbmdlXHJcbiAgICBiYXNlZCBvbiBzb21lIHByb2JhYmlsaXR5XHJcbiAgICBlLmcgcmFuZ2UgZnJvbSA0MCB0byA2MFxyXG4gICAgd2l0aCA4MCUgcHJvYmFiaWxpdHkgaW4gaW50ZXJ2YWwgNTAgdG8gNTVcclxuICAgIEBhcmdzXHJcbiAgICBtaW46IG51bWJlcixcclxuICAgIG1heDogbnVtYmVyLFxyXG4gICAgcHJvYmFiaWxpdGllczoge1xyXG4gICAgICAgIGludGVydmFsOiBbaW50ZXJ2YWxNaW46bnVtYmVyLCBpbnRlcnZhbE1heDpudW1iZXJdLFxyXG4gICAgICAgIHByb2JhYmlsaXR5OiBwcm9iYWJpbGl0eTogbnVtYmVyXHJcbiAgICB9XHJcbiovXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tVmFsdWVJblJhbmdlV2l0aFByb2JhYmlsaXR5ID0gKFxyXG4gICAgbWluOiBudW1iZXIsXHJcbiAgICBtYXg6IG51bWJlcixcclxuICAgIHByb2JhYmlsaXRpZXM6IGFueSBcclxuKTogbnVtYmVyID0+IHtcclxuXHJcbiAgICAvLyBjaGVjayBmb3IgZXJyb3JzXHJcblxyXG4gICAgaWYobWluID49IG1heCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWluIGNhbm5vdCBiZSBtb3JlIG9yIGVxdWFsIHRvIG1heCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKCFwcm9iYWJpbGl0aWVzLmludGVydmFsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9iYWJpbGl0eSBpbnRlcnZhbCBpcyByZXF1aXJlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHByb2JhYmlsaXRpZXMuaW50ZXJ2YWwubGVuZ3RoICE9IDIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcHJvYmFiaWxpdHkgaW50ZXJ2YWwgc3ludGF4Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYocHJvYmFiaWxpdGllcy5pbnRlcnZhbFswXSA8IG1pbiB8fCBwcm9iYWJpbGl0aWVzLmludGVydmFsWzFdIDwgbWluKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvbmUgb2YgcHJvYmFiaWxpdHkgaW50ZXJ2YWwgaXMgbGVzcyB0aGFuIG1pbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHByb2JhYmlsaXRpZXMuaW50ZXJ2YWxbMF0gPiBtYXggfHwgcHJvYmFiaWxpdGllcy5pbnRlcnZhbFsxXSA+IG1heCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignb25lIG9mIHByb2JhYmlsaXR5IGludGVydmFsIGlzIG1vcmUgdGhhbiBtYXgnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihwcm9iYWJpbGl0aWVzLmludGVydmFsWzBdID49IHByb2JhYmlsaXRpZXMuaW50ZXJ2YWxbMV0pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcHJvYmFiaWxpdHkgaW50ZXJ2YWwnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZighcHJvYmFiaWxpdGllcy5wcm9iYWJpbGl0eSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvYmFiaWxpdGllcyBhcmd1bWVudCByZXF1aXJlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHByb2JhYmlsaXRpZXMucHJvYmFiaWxpdHkgPCAwIHx8IHByb2JhYmlsaXRpZXMucHJvYmFiaWxpdHkgPiAxMDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcHJvYmFiaWxpdHkgdmFsdWUnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihwcm9iYWJpbGl0aWVzLnByb2JhYmlsaXR5ID4gMCAmJiBwcm9iYWJpbGl0aWVzLnByb2JhYmlsaXR5IDwgMSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwcm9iYWJpbGl0eSB2YWx1ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGVuZCBvZiBjaGVja2luZyBmb3IgZXJyb3JzXHJcblxyXG4gICAgbGV0IHJhbmRvbVZhbHVlOiBudW1iZXIgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgbGV0IGludGVydmFsTWluOiBudW1iZXIgPSBwcm9iYWJpbGl0aWVzLmludGVydmFsWzBdO1xyXG4gICAgbGV0IGludGVydmFsTWF4OiBudW1iZXIgPSBwcm9iYWJpbGl0aWVzLmludGVydmFsWzFdO1xyXG4gICAgbGV0IHZhbHVlOiBudW1iZXI7XHJcblxyXG4gICAgbGV0IHByb2JhYmlsaXR5OiBudW1iZXIgPSAocHJvYmFiaWxpdGllcy5wcm9iYWJpbGl0eSAqIDAuMDEpO1xyXG5cclxuICAgIFxyXG5cclxuICAgIGlmKHJhbmRvbVZhbHVlID49IDAgJiYgcmFuZG9tVmFsdWUgPD0gcHJvYmFiaWxpdHkpIHtcclxuICAgICAgICB2YWx1ZSA9IGdldFJhbmRvbVZhbHVlSW5SYW5nZShpbnRlcnZhbE1pbiwgaW50ZXJ2YWxNYXgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB2YWx1ZSA9IGdldFJhbmRvbVZhbHVlSW5SYW5nZShtaW4sIG1heCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59IiwiaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi8uLi8uLi8uLi91bml0XCI7XHJcbmltcG9ydCBNYXBOb2RlIGZyb20gXCIuLi8uLi8uLi8uLi9tYXAvbm9kZXMvTWFwTm9kZVwiO1xyXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcIi4vQ29tbWFuZFwiO1xyXG5cclxuY2xhc3MgQWN0aW9uIHtcclxuICAgIHVuaXQ6IFVuaXQ7XHJcbiAgICBub2RlIDogTWFwTm9kZTtcclxuICAgIGNvbW1hbmQ6IENvbW1hbmRcclxuICAgIGFjdGlvblVuaXQ6IFVuaXQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IodW5pdDogVW5pdCwgbm9kZTogTWFwTm9kZSwgY29tbWFuZDogQ29tbWFuZCwgYWN0aW9uVW5pdDogVW5pdCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLnVuaXQgPSB1bml0O1xyXG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcclxuICAgICAgICB0aGlzLmFjdGlvblVuaXQgPSBhY3Rpb25Vbml0XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFjdGlvbjsiLCJpbXBvcnQgUG9zaXRpb25zIGZyb20gXCIuLi9BSS9wb3NpdGlvbnMvUG9zaXRpb25zXCI7XHJcbmltcG9ydCBDb21tYW5kcyBmcm9tIFwiLi4vQUkvY29tbWFuZHMvQ29tbWFuZHNcIjtcclxuXHJcbmNsYXNzIENvbW1hbmRRdWV1ZSB7XHJcbiAgIHByaXZhdGUgZWxlbWVudHM6IGFueSA9IFtdO1xyXG4gICBwcml2YXRlIGNvbW1hbmRJZDogbnVtYmVyID0gMTtcclxuXHJcbiAgIGluc2VydChlZmZpY2llbmN5OiBudW1iZXIsIGNvbW1hbmRzOiBDb21tYW5kcykge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMucHVzaCh7XHJcbiAgICAgICAgICAgIGVmZmljaWVuY3k6IGVmZmljaWVuY3ksXHJcbiAgICAgICAgICAgIGNvbW1hbmRzOiBjb21tYW5kcyxcclxuICAgICAgICAgICAgY29tbWFuZElkOiB0aGlzLmNvbW1hbmRJZCxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRJZCArPSAxO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBleHRyYWN0TWF4KCkge1xyXG4gICAgICAgIGxldCBtYXggPSB0aGlzLmVsZW1lbnRzWzBdO1xyXG4gICAgICAgIGxldCBtYXhJbmRleCA9IDA7XHJcbiAgICAgICAgZm9yKGxldCBpID0gMTsgaSA8IHRoaXMuZWxlbWVudHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5lbGVtZW50c1tpXS5lZmZpY2llbmN5ID4gbWF4LmVmZmljaWVuY3kpIHtcclxuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBtYXhJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuZWxlbWVudHMuZmlsdGVyKChlbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGVsLmNvbW1hbmRJZCA9PT0gbWF4LmNvbW1hbmRJZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWF4LmNvbW1hbmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKSB7XHJcbiAgICAgICAgaWYodGhpcy5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGVhckVsZW1lbnRzKCkge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29tbWFuZFF1ZXVlOyIsImltcG9ydCB7IGNvbXB1dGVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vdW5pdC91bml0c1wiO1xyXG5pbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4uLy4uLy4uL3VuaXRcIjtcclxuaW1wb3J0IEFjdGlvbiBmcm9tIFwiLi4vLi4vLi4vQUkvc3RyYXRlZ3lNb2R1bGUvZGVjaXNpb25Vbml0L3JhbmRvbUFjdGlvbi9BY3Rpb25cIjtcclxuXHJcbmNsYXNzIENvbW1hbmRzIHtcclxuICAgIHByaXZhdGUgY29tbWFuZHM6IGFueSA9IHt9O1xyXG4gICAgYWRkQ29tbWFuZCh1bml0SWQ6IG51bWJlciwgYWN0aW9uOiBBY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmNvbW1hbmRzW3VuaXRJZF0gPSBhY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJDb21tYW5kcygpIHtcclxuICAgICAgICB0aGlzLmNvbW1hbmRzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29tbWFuZHNCeVVuaXRJZCh1bml0SWQ6IG51bWJlcik6IEFjdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZHNbdW5pdElkXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVbml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zKCkge1xyXG4gICAgICAgIGxldCB1bml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zOiBVbml0W10gPSBbXTtcclxuICAgICAgICBmb3IobGV0IHVuaXQgb2YgY29tcHV0ZXJVbml0cykge1xyXG4gICAgICAgICAgICBsZXQgdXBkYXRlZFVuaXQgPSBPYmplY3QuY3JlYXRlKHVuaXQpO1xyXG4gICAgICAgICAgICBsZXQgbm9kZSA9IHRoaXMuZ2V0Q29tbWFuZHNCeVVuaXRJZCh1cGRhdGVkVW5pdC5pZCkubm9kZTtcclxuICAgICAgICAgICAgdXBkYXRlZFVuaXQuc2V0WChub2RlLngpO1xyXG4gICAgICAgICAgICB1cGRhdGVkVW5pdC5zZXRZKG5vZGUueSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZWRVbml0LnNldEN1cnJlbnROb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICB1bml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zLnB1c2godXBkYXRlZFVuaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5pdHNXaXRoU2ltdWxhdGluZ1Bvc2l0aW9ucztcclxuICAgIH1cclxufSBcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbW1hbmRzOyIsImltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vLi4vdW5pdFwiO1xyXG5pbXBvcnQgeyBjYWxjdWxhdGVFZmZpY2llbmN5IH0gZnJvbSBcIi4vY2FsY3VsYXRlRWZmaWNpZW5jeVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVRvdGFsRWZmaWNpZW5jeSA9ICh1bml0czogVW5pdFtdKTogbnVtYmVyID0+IHtcclxuICAgIGxldCBlZmZpY2llbmN5OiBudW1iZXIgPSAwO1xyXG4gICAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICAgICAgZWZmaWNpZW5jeSArPSBjYWxjdWxhdGVFZmZpY2llbmN5KHVuaXQsIHVuaXRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlZmZpY2llbmN5O1xyXG59IiwiaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuLi8uLi8uLi91bml0XCI7XHJcbmltcG9ydCB7IGdldEV4cGxvcmF0aW9uTm9kZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91bml0L2V4cGxvcmF0aW9uL2dldEV4cGxvcmF0aW9uTm9kZVwiO1xyXG5pbXBvcnQgeyBnZXREaXN0YW5jZUJldHdlZW5Ud29Ob2Rlc0luR3JpZHMsIGdldERpc3RhbmNlQmV0d2VlblR3b1VuaXRzSW5HcmlkcywgZ2V0U3Vycm91bmRlZEVuZW1pZXMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgYXNzaWduRXhwbG9yYXRpb25UYXNrIH0gZnJvbSBcIi4uL3Rhc2tzL2Fzc2lnbkV4cGxvcmF0aW9uXCI7XHJcbmltcG9ydCB7IHZpc2libGVGb3JDb21wdXRlclVuaXRzIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3JlL3VuaXQvdmlzaWJsZVVuaXRzXCI7XHJcbmltcG9ydCB7IGlzRW5lbXlWdWxuZXJhYmxlVG9Vbml0LCBpc0VuZW15RGFuZ2Vyb3VzRm9yVW5pdCwgZ2V0VG90YWxVbml0c0luaXRpYWxIZWFsdGgsIGdldFRvdGFsVW5pdHNIZWFsdGggfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdW5pdC9BSS9BSV9hY3Rpb25zXCI7XHJcbmltcG9ydCB7IGdldFN1cnJvdW5kZWRVbml0cyB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9zdXJyb3VuZGVkL2dldFN1cnJvdW5kZWRVbml0c1wiO1xyXG5pbXBvcnQgeyBzaW11bGF0ZUZpZ2h0IH0gZnJvbSBcIi4uL3NpbXVsYXRpb25zL3NpbXVsYXRlRmlnaHRcIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlVG90YWxVbml0c1dlaWdodCB9IGZyb20gXCIuLi93ZWlnaHQvY2FsY3VsYXRlVW5pdHNXZWlnaHRcIjtcclxuaW1wb3J0IHsgY2FsY3VsYXRlVG90YWxWdWxuZXJhYmlsaXR5IH0gZnJvbSBcIi4uL3Z1bG5lcmFiaWxpdHkvdG90YWxWdWxuZXJhYmlsaXR5XCI7XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlRWZmaWNpZW5jeSA9ICh1bml0OiBVbml0LCBjb21wdXRlclVuaXRzV2l0aFNpbXVsYXRpbmdQb3NpdGlvbnM6IFVuaXRbXSkgPT4ge1xyXG4gICAgaWYodmlzaWJsZUZvckNvbXB1dGVyVW5pdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4cGxvcmF0aW9uVW5pdEVmZmljaWVuY3kodW5pdCwgY29tcHV0ZXJVbml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zKTtcclxuICAgIH0gXHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5pdEVmZmljaWVuY3kodW5pdCwgY29tcHV0ZXJVbml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGV4cGxvcmF0aW9uVW5pdEVmZmljaWVuY3kgPSAodW5pdDogVW5pdCwgY29tcHV0ZXJVbml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zOiBVbml0W10pOiBudW1iZXIgPT4ge1xyXG4gICAgYXNzaWduRXhwbG9yYXRpb25UYXNrKCk7XHJcbiAgICBjb25zdCBtYXhFZmZpY2llbmN5OiBudW1iZXIgPSAxMDA7XHJcbiAgICBjb25zdCBwZXJjZW50YWdlOiBudW1iZXIgPSAxMDtcclxuICAgIGxldCBleHBsb3JhdGlvbk5vZGUgPSBnZXRFeHBsb3JhdGlvbk5vZGUoKTtcclxuICAgIGNvbnN0IGRpc3RhbmNlID0gZ2V0RGlzdGFuY2VCZXR3ZWVuVHdvTm9kZXNJbkdyaWRzKHVuaXQuY3VycmVudE5vZGUsIGV4cGxvcmF0aW9uTm9kZSk7XHJcbiAgICBpZih1bml0LnRhc2sgPT09ICdleHBsb3JhdGlvbicpIHtcclxuICAgICAgICBsZXQgZWZmaWNpZW5jeSA9IG1heEVmZmljaWVuY3kgLSBkaXN0YW5jZSAqIHBlcmNlbnRhZ2U7XHJcbiAgICAgICAgZWZmaWNpZW5jeSA9IGVmZmljaWVuY3kgPiAwID8gZWZmaWNpZW5jeSA6IDA7XHJcbiAgICAgICAgcmV0dXJuIGVmZmljaWVuY3k7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bml0RWZmaWNpZW5jeSh1bml0LCBjb21wdXRlclVuaXRzV2l0aFNpbXVsYXRpbmdQb3NpdGlvbnMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdW5pdEVmZmljaWVuY3kgPSAodW5pdDogVW5pdCwgY29tcHV0ZXJVbml0c1dpdGhTaW11bGF0aW5nUG9zaXRpb25zOiBVbml0W10pOiBudW1iZXIgPT4ge1xyXG4gICAgbGV0IGNsb3NlRW5lbWllcyA9IGdldFN1cnJvdW5kZWRVbml0cyh1bml0LCB2aXNpYmxlRm9yQ29tcHV0ZXJVbml0cywgNSk7XHJcbiAgICBsZXQgY2xvc2VBbGxpZXMgPSAgZ2V0U3Vycm91bmRlZFVuaXRzKHVuaXQsIGNvbXB1dGVyVW5pdHNXaXRoU2ltdWxhdGluZ1Bvc2l0aW9ucywgNSk7XHJcbiAgICBsZXQgY2xvc2VBbGxpZXNXaXRoVW5pdCA9IE9iamVjdC5hc3NpZ24oW10sIGNsb3NlQWxsaWVzKTtcclxuICAgIGNsb3NlQWxsaWVzV2l0aFVuaXQucHVzaCh1bml0KTtcclxuICAgIGxldCBjbG9zZUVuZW1pZXNOdW1iZXIgPSBjbG9zZUVuZW1pZXMubGVuZ3RoO1xyXG4gICAgbGV0IGNsb3NlQWxsaWVzTnVtYmVyID0gY2xvc2VBbGxpZXMubGVuZ3RoO1xyXG4gICAgY29uc3QgY2xvc2VBbGxpZXNXZWlnaHQ6IG51bWJlciA9IGNhbGN1bGF0ZVRvdGFsVW5pdHNXZWlnaHQoY2xvc2VBbGxpZXMpICsgdW5pdC53ZWlnaHQ7XHJcbiAgICBjb25zdCBjbG9zZUVuZW1pZXNXZWlnaHQ6IG51bWJlciA9IGNhbGN1bGF0ZVRvdGFsVW5pdHNXZWlnaHQoY2xvc2VFbmVtaWVzKTtcclxuICAgIGxldCB1bml0SGVhbHRoUGVyY2VudGFnZSA9IHVuaXQuaGVhbHRoIC8gdW5pdC5pbml0aWFsSGVhbHRoO1xyXG4gICAgbGV0IGVuZW1pZXNJbml0aWFsSGVhbHRoID0gZ2V0VG90YWxVbml0c0luaXRpYWxIZWFsdGgoY2xvc2VFbmVtaWVzKTtcclxuICAgIGxldCBjbG9zZUFsbGllc0luaXRpYWxIZWFsdGggPSBnZXRUb3RhbFVuaXRzSW5pdGlhbEhlYWx0aChjbG9zZUFsbGllcyk7XHJcbiAgICBsZXQgY2xvc2VBbGxpZXNJbml0aWFsSGVhbHRoV2l0aFVuaXQgPSBnZXRUb3RhbFVuaXRzSW5pdGlhbEhlYWx0aChjbG9zZUFsbGllc1dpdGhVbml0KTtcclxuICAgIGxldCBlbmVtaWVzSGVhbHRoID0gZ2V0VG90YWxVbml0c0hlYWx0aChjbG9zZUVuZW1pZXMpO1xyXG4gICAgbGV0IGNsb3NlQWxsaWVzSGVhbHRoID0gZ2V0VG90YWxVbml0c0hlYWx0aChjbG9zZUFsbGllcyk7XHJcbiAgICBsZXQgY2xvc2VBbGxpZXNIZWFsdGhXaXRoVW5pdCA9IGdldFRvdGFsVW5pdHNIZWFsdGgoY2xvc2VBbGxpZXNXaXRoVW5pdCk7XHJcbiAgICBsZXQgZW5lbWllc0hlYWx0aFBlcmNlbnRhZ2UgPSBlbmVtaWVzSGVhbHRoIC8gZW5lbWllc0luaXRpYWxIZWFsdGg7XHJcbiAgICBsZXQgY2xvc2VBbGxpZXNIZWFsdGhQZXJjZW50YWdlID0gY2xvc2VBbGxpZXNIZWFsdGggLyBjbG9zZUFsbGllc0luaXRpYWxIZWFsdGg7XHJcbiAgICBsZXQgY2xvc2VBbGxpZXNIZWFsdGhXaXRoVW5pdFBlcmNlbnRhZ2UgPSBjbG9zZUFsbGllc0hlYWx0aFdpdGhVbml0IC8gY2xvc2VBbGxpZXNJbml0aWFsSGVhbHRoV2l0aFVuaXQ7XHJcblxyXG4gICAgLy8gb25lIHVuaXQgYW5kIG9uZSBlbmVteVxyXG4gICAgaWYoY2xvc2VFbmVtaWVzTnVtYmVyID09PSAxICYmIGNsb3NlQWxsaWVzTnVtYmVyID09PSAwKSB7XHJcbiAgICAgICAgbGV0IGVuZW15ID0gY2xvc2VFbmVtaWVzWzBdO1xyXG4gICAgICAgIGxldCBlbmVteWVuZW1pZXNIZWFsdGhQZXJjZW50YWdlID0gZW5lbXkuaGVhbHRoIC8gZW5lbXkuaW5pdGlhbEhlYWx0aDtcclxuICAgICAgICBpZihpc0VuZW15VnVsbmVyYWJsZVRvVW5pdCh1bml0LCBlbmVteSkgJiYgdW5pdEhlYWx0aFBlcmNlbnRhZ2UgPj0gMC43KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxMDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoaXNFbmVteURhbmdlcm91c0ZvclVuaXQodW5pdCwgZW5lbXkpICYmIGVuZW15ZW5lbWllc0hlYWx0aFBlcmNlbnRhZ2UgPj0gMC43KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0gXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB7dW5pdEhlYWx0aFJlbWFpbn0gPSBzaW11bGF0ZUZpZ2h0KHVuaXQsIGVuZW15KTtcclxuICAgICAgICAgICAgcmV0dXJuIHVuaXRIZWFsdGhSZW1haW47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIG9uZSB1bml0IGFuZCBtYW55IGVuZW1pZXNcclxuICAgIGVsc2UgaWYoY2xvc2VFbmVtaWVzTnVtYmVyID4gMSAmJiBjbG9zZUFsbGllc051bWJlciA9PT0gMCkge1xyXG4gICAgICAgIGlmKGVuZW1pZXNIZWFsdGhQZXJjZW50YWdlID49IDAuNiAmJiB1bml0SGVhbHRoUGVyY2VudGFnZSA+PSAwLjYpIHtcclxuICAgICAgICAgICAgbGV0IHdlaWdodFJhdGlvOiBudW1iZXIgPSB1bml0LndlaWdodCAvIGNsb3NlRW5lbWllc1dlaWdodDtcclxuICAgICAgICAgICAgd2VpZ2h0UmF0aW8gPSB3ZWlnaHRSYXRpbyA8PSAyID8gd2VpZ2h0UmF0aW8gOiAyO1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh3ZWlnaHRSYXRpbyAqIDUwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBoZWFsdGhSYXRpbzogbnVtYmVyID0gdW5pdC5oZWFsdGggLyBlbmVtaWVzSGVhbHRoO1xyXG4gICAgICAgICAgICBoZWFsdGhSYXRpbyA9IGhlYWx0aFJhdGlvIDw9IDIgPyBoZWFsdGhSYXRpbzogMjtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoaGVhbHRoUmF0aW8gKiA1MCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIG1hbnkgYWxsaWVzIGFuZCBtYW55IGVuZW1pZXNcclxuICAgIGVsc2UgaWYoY2xvc2VFbmVtaWVzTnVtYmVyID4gMSB8fCBjbG9zZUFsbGllc051bWJlciA+IDApIHtcclxuICAgICAgICBpZihlbmVtaWVzSGVhbHRoUGVyY2VudGFnZSA+PSAwLjYgJiYgY2xvc2VBbGxpZXNIZWFsdGhXaXRoVW5pdFBlcmNlbnRhZ2UgPj0gMC42KSB7XHJcbiAgICAgICAgICAgIGxldCB3ZWlnaHRSYXRpbzogbnVtYmVyID0gKGNsb3NlQWxsaWVzV2VpZ2h0ICsgdW5pdC53ZWlnaHQpIC8gY2xvc2VFbmVtaWVzV2VpZ2h0O1xyXG4gICAgICAgICAgICB3ZWlnaHRSYXRpbyA9IHdlaWdodFJhdGlvIDw9IDIgPyB3ZWlnaHRSYXRpbyA6IDI7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHdlaWdodFJhdGlvICogNTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGhlYWx0aFJhdGlvID0gY2xvc2VBbGxpZXNIZWFsdGhXaXRoVW5pdCAvIGVuZW1pZXNIZWFsdGg7XHJcbiAgICAgICAgICAgIGhlYWx0aFJhdGlvID0gaGVhbHRoUmF0aW8gPD0gMiA/IGhlYWx0aFJhdGlvIDogMjtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoaGVhbHRoUmF0aW8gKiA1MCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIG5vIGVuZW1pZXMgYW5kIG1hbnkgYWxsaWVzXHJcbiAgICBlbHNlIGlmKGNsb3NlRW5lbWllc051bWJlciA9PT0gMCAmJiBjbG9zZUFsbGllc051bWJlciA+IDApIHtcclxuICAgICAgICBsZXQgdnVsbmVyYWJpbGl0eVdpdGhvdXRVbml0ID0gY2FsY3VsYXRlVG90YWxWdWxuZXJhYmlsaXR5KGNsb3NlQWxsaWVzLCB1bml0KSAvIGNsb3NlQWxsaWVzTnVtYmVyO1xyXG4gICAgICAgIGxldCB2dWxuZXJhYmlsaXR5V2l0aFVuaXQgPSBjYWxjdWxhdGVUb3RhbFZ1bG5lcmFiaWxpdHkoY2xvc2VBbGxpZXMpIC8gY2xvc2VBbGxpZXNOdW1iZXIgKyAxO1xyXG4gICAgICAgIGxldCB2dWxuZXJhYmlsaXR5RGlmZmVyZW5jZSA9IHZ1bG5lcmFiaWxpdHlXaXRob3V0VW5pdCAtIHZ1bG5lcmFiaWxpdHlXaXRoVW5pdDsgXHJcbiAgICAgICAgaWYodnVsbmVyYWJpbGl0eURpZmZlcmVuY2UgPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBlZmZpY2llbmN5ID0gdnVsbmVyYWJpbGl0eURpZmZlcmVuY2UgKiAxLjQ7XHJcbiAgICAgICAgICAgIGVmZmljaWVuY3kgPSBlZmZpY2llbmN5IDw9IDEwMCA/IGVmZmljaWVuY3kgOiAxMDA7XHJcbiAgICAgICAgICAgIHJldHVybiBlZmZpY2llbmN5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vLi4vdW5pdFwiO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Vbml0IH0gZnJvbSBcIi4uL3JhbmRvbS9nZXRSYW5kb21Vbml0XCI7XHJcbmltcG9ydCB7IHBsYXllclVuaXRzIH0gZnJvbSBcIi4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHNcIjtcclxuaW1wb3J0IHsgZ2V0U3Vycm91bmRlZE5vZGVzIH0gZnJvbSBcIi4uLy4uL3N1cnJvdW5kZWRcIjtcclxuaW1wb3J0IHsgZ2V0UmFuZG9tTm9kZSB9IGZyb20gXCIuLi8uLi9ub2RlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0RXhwbG9yYXRpb25Ob2RlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgcmFuZG9tVW5pdDogVW5pdCA9IGdldFJhbmRvbVVuaXQocGxheWVyVW5pdHMpO1xyXG4gICAgY29uc3Qgc3Vycm91bmRlZE5vZGVzID0gZ2V0U3Vycm91bmRlZE5vZGVzKHJhbmRvbVVuaXQsIDQpO1xyXG4gICAgcmV0dXJuIGdldFJhbmRvbU5vZGUoc3Vycm91bmRlZE5vZGVzKTtcclxufSIsImltcG9ydCB7IGNhbGN1bGF0ZVVuaXRUeXBlcyB9IGZyb20gXCIuLi8uLi9hbmFseXplTW9kdWxlL3VuaXRBbmFseXplXCI7XHJcbmltcG9ydCB7IGdldEZyZWVVbml0cywgZ2V0QmVzdFVuaXRCeVByb3BlcnR5IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3VuaXQvQUlcIjtcclxuaW1wb3J0IHsgY29tcHV0ZXJVbml0cyB9IGZyb20gXCIuLi8uLi8uLi9zdG9yZS91bml0L3VuaXRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgYXNzaWduRXhwbG9yYXRpb25UYXNrID0gKHBlcmNlbnRhZ2U6IG51bWJlciA9IDYwKSA9PiB7XHJcbiAgICBjb25zdCB1bml0VHlwZXM6IGFueSA9IGNhbGN1bGF0ZVVuaXRUeXBlcygpO1xyXG4gICAgaWYodW5pdFR5cGVzLnNjb3V0cyA9PT0gMCAmJiB1bml0VHlwZXMuY2F2YWxyeSA9PT0gMCkge1xyXG4gICAgbGV0IGZyZWVVbml0cyA9IGdldEZyZWVVbml0cygpO1xyXG4gICAgaWYoZnJlZVVuaXRzKSB7XHJcbiAgICAgICAgaWYoZnJlZVVuaXRzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBsZXQgZmFzdGVzdFVuaXQgPSBnZXRCZXN0VW5pdEJ5UHJvcGVydHkoJ3NwZWVkJyk7IFxyXG4gICAgICAgICAgICBmYXN0ZXN0VW5pdC5hc3NpZ25UYXNrKCdleHBsb3JhdGlvbicpO1xyXG4gICAgICAgICAgICBpZihmcmVlVW5pdHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGV4Y2x1c2lvbiA9IFtmYXN0ZXN0VW5pdF07XHJcbiAgICAgICAgICAgICAgICBsZXQgc2Vjb25kRmFzdGVzdFVuaXQgPSBnZXRCZXN0VW5pdEJ5UHJvcGVydHkoJ3NwZWVkJywgZXhjbHVzaW9uKTtcclxuICAgICAgICAgICAgICAgIHNlY29uZEZhc3Rlc3RVbml0LmFzc2lnblRhc2soJ2V4cGxvcmF0aW9uJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB9IFxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yKGxldCB1bml0IG9mIGNvbXB1dGVyVW5pdHMpIHtcclxuICAgICAgICAgICAgbGV0IHNjb3V0czpudW1iZXIgPSAwO1xyXG4gICAgICAgICAgICBsZXQgcGVyY2VudGFnZU9mU2NvdXRzOm51bWJlciA9IE1hdGgucm91bmQoKHNjb3V0cyAvIGNvbXB1dGVyVW5pdHMubGVuZ3RoKSAqIDEwMCk7XHJcbiAgICAgICAgICAgIGlmKCF1bml0LnRhc2sgJiYgKHVuaXQudHlwZSA9PT0gJ3Njb3V0cycgfHwgdW5pdC50eXBlID09PSAnY2F2YWxyeScpICYmIHBlcmNlbnRhZ2VPZlNjb3V0cyA8IHBlcmNlbnRhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHVuaXQuYXNzaWduVGFzaygnZXhwbG9yYXRpb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICB9IiwiaW1wb3J0IHsgcGxheWVyUG93ZXIgfSBmcm9tICcuLi8uLi9zdG9yZS9BSS9wb3dlci9wbGF5ZXJQb3dlcic7XHJcbmltcG9ydCB7IGNvbXB1dGVyUG93ZXIgfSBmcm9tICcuLi8uLi9zdG9yZS9BSS9wb3dlci9jb21wdXRlclBvd2VyJztcclxuaW1wb3J0IHtcclxuICBwbGF5ZXJVbml0cyxcclxuICBjb21wdXRlclVuaXRzXHJcbn0gZnJvbSAnLi4vLi4vc3RvcmUvdW5pdC91bml0cyc7XHJcbmltcG9ydCB7IHJldmVhbGVkVW5pdHMgfSBmcm9tICcuLi8uLi9zdG9yZS9BSS9lbmVtaWVzL3JldmVhbGVkRW5lbWllcyc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0U3Vycm91bmRlZEFsbGllcyxcclxuICBnZXRTdXJyb3VuZGVkRW5lbWllc1xyXG59IGZyb20gJy4uLy4uL3V0aWxzL3N1cnJvdW5kZWQnO1xyXG5pbXBvcnQgeyBVbml0IH0gZnJvbSAnLi4vLi4vdW5pdCc7XHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlVW5pdHNUb0Jld2FyZSA9ICh1bml0OiBVbml0KTpudW1iZXIgPT4ge1xyXG4gIGxldCB1bml0c1RvQmV3YXJlOiBudW1iZXIgPSAwO1xyXG4gIGlmKHBsYXllclVuaXRzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgZm9yKGxldCBlbmVteSBvZiBwbGF5ZXJVbml0cykge1xyXG4gICAgICBpZih1bml0LnZ1bG5lcmFibGVBZ2FpbnN0Lmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIGZvcihsZXQgdnVsbmVyYWJpbGl0eSBvZiB1bml0LnZ1bG5lcmFibGVBZ2FpbnN0KSB7XHJcbiAgICAgICAgICBpZih2dWxuZXJhYmlsaXR5ID09PSBlbmVteS5uYW1lKSB7XHJcbiAgICAgICAgICAgIHVuaXRzVG9CZXdhcmUrKztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHVuaXRzVG9CZXdhcmU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVTdXJyb3VuZGVkRW5lbXlQb3dlciA9ICh1bml0OiBVbml0KSA9PiB7XHJcbiAgbGV0IHBvd2VyID0ge1xyXG4gICAgaGVhbHRoOiAwLFxyXG4gICAgc3BlZWQ6IDAsXHJcbiAgICBhcm1vdXI6IDAsXHJcbiAgICBtZWxlZURhbWFnZTogMCxcclxuICAgIG1pc3NpbGVEYW1hZ2U6IDAsXHJcbiAgICBtb3JhbGU6IDAsXHJcbiAgICBjb25kaXRpb246IDBcclxuICB9XHJcbiAgbGV0IHN1cnJvdW5kZWRFbmVtaWVzID0gZ2V0U3Vycm91bmRlZEVuZW1pZXModW5pdCk7XHJcbiAgaWYoc3Vycm91bmRlZEVuZW1pZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICBmb3IobGV0IGVuZW15IG9mIHN1cnJvdW5kZWRFbmVtaWVzKSB7XHJcbiAgICAgIHBvd2VyLmhlYWx0aCArPSBlbmVteS5oZWFsdGg7XHJcbiAgICAgIHBvd2VyLnNwZWVkICs9IGVuZW15LnNwZWVkO1xyXG4gICAgICBwb3dlci5hcm1vdXIgKz0gZW5lbXkuYXJtb3VyO1xyXG4gICAgICBwb3dlci5tZWxlZURhbWFnZSArPSBlbmVteS5tZWxlZURhbWFnZTtcclxuICAgICAgcG93ZXIubWlzc2lsZURhbWFnZSArPSBlbmVteS5taXNzaWxlRGFtYWdlO1xyXG4gICAgICBwb3dlci5tb3JhbGUgKz0gZW5lbXkubW9yYWxlO1xyXG4gICAgICBwb3dlci5jb25kaXRpb24gKz0gZW5lbXkuY29uZGl0aW9uO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcG93ZXI7XHJcbn1cclxuXHJcbi8qXHJcbiAgQ2FsY3VsYXRlIGhvdyBtYW55IHBsYXllcidzIHVuaXRzIGFuZCB0aGVpciBwb3dlciBuZWFyYnlcclxuICB0aGUgY29tcHV0ZXIgdW5pdHNcclxuKi9cclxuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVN1cnJvdW5kZWRBbGxpZXNQb3dlciA9ICh1bml0OiBVbml0KSA9PiB7XHJcbiAgbGV0IHBvd2VyID0ge1xyXG4gICAgaGVhbHRoOiAwLFxyXG4gICAgc3BlZWQ6IDAsXHJcbiAgICBhcm1vdXI6IDAsXHJcbiAgICBtZWxlZURhbWFnZTogMCxcclxuICAgIG1pc3NpbGVEYW1hZ2U6IDAsXHJcbiAgICBtb3JhbGU6IDAsXHJcbiAgICBjb25kaXRpb246IDBcclxuICB9XHJcbiAgbGV0IHN1cnJvdW5kZWRBbGxpZXMgPSBnZXRTdXJyb3VuZGVkQWxsaWVzKHVuaXQpO1xyXG4gIGlmKHN1cnJvdW5kZWRBbGxpZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICBmb3IobGV0IGVuZW15IG9mIHN1cnJvdW5kZWRBbGxpZXMpIHtcclxuICAgICAgcG93ZXIuaGVhbHRoICs9IGVuZW15LmhlYWx0aDtcclxuICAgICAgcG93ZXIuc3BlZWQgKz0gZW5lbXkuc3BlZWQ7XHJcbiAgICAgIHBvd2VyLmFybW91ciArPSBlbmVteS5hcm1vdXI7XHJcbiAgICAgIHBvd2VyLm1lbGVlRGFtYWdlICs9IGVuZW15Lm1lbGVlRGFtYWdlO1xyXG4gICAgICBwb3dlci5taXNzaWxlRGFtYWdlICs9IGVuZW15Lm1pc3NpbGVEYW1hZ2U7XHJcbiAgICAgIHBvd2VyLm1vcmFsZSArPSBlbmVteS5tb3JhbGU7XHJcbiAgICAgIHBvd2VyLmNvbmRpdGlvbiArPSBlbmVteS5jb25kaXRpb247XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBwb3dlcjtcclxufVxyXG5cclxuLypcclxuICBDYWxjdWxhdGUgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBjb21wdXRlcidzIGFuZFxyXG4gIHBsYXllcidzIHBvd2VyIGluIHRoZSBzbWFsbCBhcmVhXHJcbiovXHJcblxyXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlUG93ZXJBZHZhbnRhZ2VJblRoZUFyZWEgPSAodW5pdDogVW5pdCkgPT4ge1xyXG4gIGxldCBwbGF5ZXJQb3dlciA9IGNhbGN1bGF0ZVN1cnJvdW5kZWRFbmVteVBvd2VyKHVuaXQpO1xyXG4gIGxldCBjb21wdXRlclBvd2VyID0gY2FsY3VsYXRlU3Vycm91bmRlZEFsbGllc1Bvd2VyKHVuaXQpO1xyXG4gIGxldCBoZWFsdGggPSBjb21wdXRlclBvd2VyLmhlYWx0aCAtIHBsYXllclBvd2VyLmhlYWx0aDtcclxuICBsZXQgc3BlZWQgPSBjb21wdXRlclBvd2VyLnNwZWVkIC0gcGxheWVyUG93ZXIuc3BlZWQ7XHJcbiAgbGV0IGFybW91ciA9IGNvbXB1dGVyUG93ZXIuYXJtb3VyIC0gcGxheWVyUG93ZXIuYXJtb3VyO1xyXG4gIGxldCBtZWxlZURhbWFnZSA9IGNvbXB1dGVyUG93ZXIubWVsZWVEYW1hZ2UgLSBwbGF5ZXJQb3dlci5tZWxlZURhbWFnZTtcclxuICBsZXQgbWlzc2lsZURhbWFnZSA9IGNvbXB1dGVyUG93ZXIubWlzc2lsZURhbWFnZSAtIHBsYXllclBvd2VyLm1pc3NpbGVEYW1hZ2U7XHJcbiAgbGV0IGNvbmRpdGlvbiA9IGNvbXB1dGVyUG93ZXIuY29uZGl0aW9uIC0gcGxheWVyUG93ZXIuY29uZGl0aW9uO1xyXG4gIGxldCBtb3JhbGUgPSBjb21wdXRlclBvd2VyLm1vcmFsZSAtIHBsYXllclBvd2VyLm1vcmFsZTtcclxuICByZXR1cm4ge1xyXG4gICAgaGVhbHRoLFxyXG4gICAgc3BlZWQsXHJcbiAgICBhcm1vdXIsXHJcbiAgICBtZWxlZURhbWFnZSxcclxuICAgIG1pc3NpbGVEYW1hZ2UsXHJcbiAgICBjb25kaXRpb24sXHJcbiAgICBtb3JhbGVcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVVbml0VHlwZXMgPSAoc2lkZTpzdHJpbmc9J2NvbXB1dGVyJyk6YW55ID0+IHtcclxuICBsZXQgdHlwZXM6YW55ID0ge1xyXG4gICAgaW5mYW50cnk6IDAsXHJcbiAgICBzcGVhcm1lbjogMCxcclxuICAgIGxpZ2h0SW5mYW50cnk6IDAsXHJcbiAgICBoZWF2eUluZmFudHJ5OiAwLFxyXG4gICAgc2NvdXRzOiAwLFxyXG4gICAgc2tpcm1pc2hlcnM6IDAsXHJcbiAgICBjYXZhbHJ5OiAwXHJcbiAgfVxyXG5cclxuICBsZXQgdW5pdHM6VW5pdFtdO1xyXG5cclxuICBpZihzaWRlID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICB1bml0cyA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gIH0gXHJcbiAgZWxzZSBpZihzaWRlID09PSAncmV2ZWFsZWQnKSB7XHJcbiAgICB1bml0cyA9IE9iamVjdC5hc3NpZ24oW10sIHJldmVhbGVkVW5pdHMpO1xyXG4gIH1cclxuICBlbHNlIGlmKHNpZGUgPT09ICdwbGF5ZXInKSB7XHJcbiAgICB1bml0cyA9IE9iamVjdC5hc3NpZ24oW10sIHBsYXllclVuaXRzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbmNvcnJlY3Qgc2lkZSBhcmd1bWVudCcpO1xyXG4gIH1cclxuXHJcbiAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICBpZih1bml0LnR5cGUgPT09ICdpbmZhbnRyeScgfHwgdW5pdC50eXBlID09PSAnc3BlYXJtZW4nIHx8IHVuaXQudHlwZSA9PT0gJ3Njb3V0cycpIHtcclxuICAgICAgdHlwZXMuaW5mYW50cnkgKz0gMTtcclxuICAgIH1cclxuICAgIGlmKHVuaXQudHlwZSA9PT0gJ3NwZWFybWVuJykge1xyXG4gICAgICB0eXBlcy5zcGVhcm1lbiArPSAxO1xyXG4gICAgfVxyXG4gICAgaWYodW5pdC50eXBlID09PSAnaW5mYW50cnknICYmIHVuaXQubmFtZSAhPT0gJ0hlYXZ5SW5mYW50cnknKSB7XHJcbiAgICAgIHR5cGVzLmxpZ2h0SW5mYW50cnkgKz0gMTtcclxuICAgIH1cclxuICAgIGlmKHVuaXQubmFtZSA9PT0gJ0hlYXZ5SW5mYW50cnknKSB7XHJcbiAgICAgIHR5cGVzLmhlYXZ5SW5mYW50cnkgKz0gMTtcclxuICAgIH1cclxuICAgIGlmKHVuaXQudHlwZSA9PT0gJ3Njb3V0cycpIHtcclxuICAgICAgdHlwZXMuc2NvdXRzICs9IDE7XHJcbiAgICB9XHJcbiAgICBpZih1bml0LnR5cGUgPT09ICdza2lybWlzaGVycycpIHtcclxuICAgICAgdHlwZXMuc2tpcm1pc2hlcnMgKz0gMTtcclxuICAgIH1cclxuICAgIGlmKHVuaXQudHlwZSA9PT0gJ2NhdmFscnknKSB7XHJcbiAgICAgIHR5cGVzLmNhdmFscnkgKz0gMTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIHR5cGVzO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VW5pdFR5cGVzSW5QZXJjZW50YWdlID0gKCk6YW55ID0+IHtcclxuICBsZXQgcGVyY2VudGFnZSA9IHtcclxuICAgIGluZmFudHJ5OiAwLFxyXG4gICAgc3BlYXJtZW46IDAsXHJcbiAgICBsaWdodEluZmFudHJ5OiAwLFxyXG4gICAgaGVhdnlJbmZhbnRyeTogMCxcclxuICAgIHNjb3V0czogMCxcclxuICAgIHNraXJtaXNoZXJzOiAwLFxyXG4gICAgY2F2YWxyeTogMFxyXG4gIH1cclxuICBsZXQgdHlwZXMgPSBjYWxjdWxhdGVVbml0VHlwZXMoKTtcclxuICBsZXQgdG90YWxVbml0cyA9IGNvbXB1dGVyVW5pdHMubGVuZ3RoO1xyXG4gIHBlcmNlbnRhZ2UuaW5mYW50cnkgPSBNYXRoLnJvdW5kKCh0eXBlcy5pbmZhbnRyeSAvIHRvdGFsVW5pdHMpICogMTAwKTtcclxuICBwZXJjZW50YWdlLnNwZWFybWVuID0gTWF0aC5yb3VuZCgodHlwZXMuc3BlYXJtZW4gLyB0b3RhbFVuaXRzKSAqIDEwMCk7XHJcbiAgcGVyY2VudGFnZS5saWdodEluZmFudHJ5ID0gTWF0aC5yb3VuZCgodHlwZXMubGlnaHRJbmZhbnRyeSAvIHRvdGFsVW5pdHMpICogMTAwKTtcclxuICBwZXJjZW50YWdlLmhlYXZ5SW5mYW50cnkgPSBNYXRoLnJvdW5kKCh0eXBlcy5oZWF2eUluZmFudHJ5IC8gdG90YWxVbml0cykgKiAxMDApO1xyXG4gIHBlcmNlbnRhZ2Uuc2NvdXRzID0gTWF0aC5yb3VuZCgodHlwZXMuc2NvdXRzIC8gdG90YWxVbml0cykgKiAxMDApO1xyXG4gIHBlcmNlbnRhZ2Uuc2tpcm1pc2hlcnMgPSBNYXRoLnJvdW5kKCh0eXBlcy5za2lybWlzaGVycyAvIHRvdGFsVW5pdHMpICogMTAwKTtcclxuICBwZXJjZW50YWdlLmNhdmFscnkgPSBNYXRoLnJvdW5kKCh0eXBlcy5jYXZhbHJ5IC8gdG90YWxVbml0cykgKiAxMDApO1xyXG4gIHJldHVybiBwZXJjZW50YWdlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0SW5pdGlhbFByb3BldGllcyA9ICgpOmFueSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGluaXRpYWxOdW1iZXJPZlVuaXRzOiBjb21wdXRlclVuaXRzLmxlbmd0aCxcclxuICAgIGluaXRpYWxOdW1iZXJPZkVuZW1pZXM6IHBsYXllclVuaXRzLmxlbmd0aCxcclxuICAgIGluaXRpYWxVbml0c0hlYWx0aDogY29tcHV0ZXJQb3dlci50b3RhbEhlYWx0aCxcclxuICAgIGluaXRpYWxFbmVtaWVzSGVhbHRoOiBwbGF5ZXJQb3dlci50b3RhbEhlYWx0aFxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbml0LCBjYWxjdWxhdGVEYW1hZ2UsIGFybW91clBlbmV0cmF0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL3VuaXRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBzaW11bGF0ZUZpZ2h0ID0gKHVuaXQ6IFVuaXQsIGVuZW15OiBVbml0KSA9PiB7XHJcbiAgICBsZXQgYXR0YWNrczogbnVtYmVyID0gMTtcclxuICAgIGNvbnN0IHVuaXRIZWFsdGhCZWZvcmVGaWdodCA9IHVuaXQuaGVhbHRoO1xyXG4gICAgY29uc3QgZW5lbXlIZWFsdGhCZWZvcmVGaWdodCA9IGVuZW15LmhlYWx0aDtcclxuICAgIGxldCB1bml0SGVhbHRoUmVtYWluOiBudW1iZXIgPSAxMDA7XHJcbiAgICBsZXQgZW5lbXlIZWFsdGhSZW1haW46IG51bWJlciA9IDEwMDtcclxuICAgIGxldCB1bml0SGVhbHRoID0gdW5pdC5oZWFsdGg7XHJcbiAgICBsZXQgZW5lbXlIZWFsdGggPSBlbmVteS5oZWFsdGg7XHJcbiAgICB3aGlsZSh1bml0SGVhbHRoID49IDAgJiYgZW5lbXlIZWFsdGggPj0gMCkge1xyXG4gICAgICAgIGxldCB1bml0RGFtYWdlID0gY2FsY3VsYXRlRGFtYWdlKHVuaXQsIHVuaXQubWVsZWVEYW1hZ2UpO1xyXG4gICAgICAgIGxldCBlbmVteURhbWFnZSA9IGNhbGN1bGF0ZURhbWFnZShlbmVteSwgZW5lbXkubWVsZWVEYW1hZ2UpO1xyXG4gICAgICAgIHVuaXRIZWFsdGggLT0gYXJtb3VyUGVuZXRyYXRpb24oZW5lbXlEYW1hZ2UsIHVuaXQuYXJtb3VyKTtcclxuICAgICAgICBlbmVteUhlYWx0aCAtPSBhcm1vdXJQZW5ldHJhdGlvbih1bml0RGFtYWdlLCBlbmVteS5hcm1vdXIpO1xyXG4gICAgICAgIGF0dGFja3MgKz0gMTtcclxuICAgIH1cclxuICAgIGxldCB1bml0UGVyY2VudGFnZVJlbWFpbiA9IE1hdGgucm91bmQodW5pdEhlYWx0aCAqIDEwMCAvIHVuaXRIZWFsdGhCZWZvcmVGaWdodCk7XHJcbiAgICBsZXQgZW5lbXlQZXJjZW50YWdlUmVtYWluID0gTWF0aC5yb3VuZChlbmVteUhlYWx0aCAqIDEwMCAvIGVuZW15SGVhbHRoQmVmb3JlRmlnaHQpO1xyXG4gICAgdW5pdEhlYWx0aFJlbWFpbiA9IHVuaXRQZXJjZW50YWdlUmVtYWluID49IDAgPyB1bml0UGVyY2VudGFnZVJlbWFpbiA6IDA7XHJcbiAgICBlbmVteUhlYWx0aFJlbWFpbiA9IGVuZW15UGVyY2VudGFnZVJlbWFpbiA+PSAwID8gZW5lbXlQZXJjZW50YWdlUmVtYWluOiAwO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1bml0SGVhbHRoUmVtYWluLFxyXG4gICAgICAgIGVuZW15SGVhbHRoUmVtYWluLFxyXG4gICAgICAgIHVuaXRIZWFsdGgsXHJcbiAgICAgICAgZW5lbXlIZWFsdGgsXHJcbiAgICAgICAgYXR0YWNrc1xyXG4gICAgfVxyXG59ICIsImltcG9ydCB7IGFzc2Vzc1Z1bG5lcmFiaWxpdHkgfSBmcm9tIFwiLlwiO1xyXG5pbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4uLy4uLy4uL3VuaXRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVUb3RhbFZ1bG5lcmFiaWxpdHkgPSAodW5pdHM6IFVuaXRbXSwgZXhjbHVzaW9uOiBVbml0ID0gbnVsbCk6IG51bWJlciA9PiB7XHJcbiAgICBsZXQgdG90YWxWdWxuZXJhYmlsaXR5OiBudW1iZXIgPSAwO1xyXG4gICAgZm9yKGxldCB1bml0IG9mIHVuaXRzKSB7XHJcbiAgICAgICAgbGV0IHZ1bG5lcmFiaWxpdHkgPSBhc3Nlc3NWdWxuZXJhYmlsaXR5KHVuaXQsIGV4Y2x1c2lvbik7XHJcbiAgICAgICAgdG90YWxWdWxuZXJhYmlsaXR5ICs9IHZ1bG5lcmFiaWxpdHk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWxWdWxuZXJhYmlsaXR5O1xyXG59IiwiaW1wb3J0IFVuaXQgZnJvbSAnLi4vLi4vLi4vdW5pdC90eXBlcy9Vbml0JztcclxuaW1wb3J0IHsgY2FsY3VsYXRlVG90YWxVbml0c1dlaWdodCB9IGZyb20gJy4uL3dlaWdodC9jYWxjdWxhdGVVbml0c1dlaWdodCc7XHJcbmltcG9ydCB7IGdldERhbmdlcm91c1VuaXRzLCBjb250YWluc0Rhbmdlcm91c1VuaXRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdW5pdC9BSS9BSV9hY3Rpb25zJztcclxuaW1wb3J0IHsgZ2V0U3Vycm91bmRlZFVuaXRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvc3Vycm91bmRlZC9nZXRTdXJyb3VuZGVkVW5pdHMnO1xyXG5pbXBvcnQgeyBjb21wdXRlclVuaXRzLCBwbGF5ZXJVbml0cyB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL3VuaXQvdW5pdHMnO1xyXG5pbXBvcnQgeyByZXZlYWxlZFVuaXRzIH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvQUkvZW5lbWllcy9yZXZlYWxlZEVuZW1pZXMnO1xyXG5pbXBvcnQgeyBkZWxldGVVbml0RnJvbUFycmF5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFzc2Vzc1Z1bG5lcmFiaWxpdHkgPSAodW5pdDogVW5pdCwgZXhsdXNpb246IFVuaXQgPSBudWxsKTogbnVtYmVyID0+IHtcclxuICAgIGxldCB2dWxuZXJhYmlsaXR5ID0gMDtcclxuICAgIGxldCBhbGxpZXM6IFVuaXRbXTtcclxuICAgIGxldCBlbmVtaWVzOiBVbml0W107XHJcbiAgICBpZih1bml0LmNvbnRyb2xCeSA9PT0gJ2NvbXB1dGVyJykge1xyXG4gICAgICAgIGFsbGllcyA9IE9iamVjdC5hc3NpZ24oW10sIGNvbXB1dGVyVW5pdHMpO1xyXG4gICAgICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCByZXZlYWxlZFVuaXRzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodW5pdC5jb250cm9sQnkgPT09ICdwbGF5ZXInKSB7XHJcbiAgICAgICAgYWxsaWVzID0gT2JqZWN0LmFzc2lnbihbXSwgcGxheWVyVW5pdHMpO1xyXG4gICAgICAgIGVuZW1pZXMgPSBPYmplY3QuYXNzaWduKFtdLCBjb21wdXRlclVuaXRzKTtcclxuICAgIH1cclxuICAgIGlmKGV4bHVzaW9uKSB7XHJcbiAgICAgICAgYWxsaWVzID0gZGVsZXRlVW5pdEZyb21BcnJheSh1bml0LCBhbGxpZXMpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmVhcmVzdEFsbGllczogVW5pdFtdID0gZ2V0U3Vycm91bmRlZFVuaXRzKHVuaXQsIGFsbGllcywgNSk7XHJcbiAgICBjb25zdCBuZWFyZXN0RW5lbWllczogVW5pdFtdID0gZ2V0U3Vycm91bmRlZFVuaXRzKHVuaXQsIGVuZW1pZXMsIDUpO1xyXG4gICAgY29uc3QgbmVhcmVzdEFsbGllc1dlaWdodDogbnVtYmVyID0gY2FsY3VsYXRlVG90YWxVbml0c1dlaWdodChuZWFyZXN0QWxsaWVzKSArIHVuaXQud2VpZ2h0O1xyXG4gICAgY29uc3QgbmVhcmVzdEVuZW1pZXNXZWlnaHQ6IG51bWJlciA9IGNhbGN1bGF0ZVRvdGFsVW5pdHNXZWlnaHQobmVhcmVzdEVuZW1pZXMpO1xyXG4gICAgY29uc3QgbnVtYmVyT2ZEYW5nZXJvdXNVbml0czogbnVtYmVyID0gZ2V0RGFuZ2Vyb3VzVW5pdHModW5pdCkubGVuZ3RoO1xyXG4gICAgY29uc3QgY29udGFpbnNEYW5nZXJvdXNVbml0c05lYXJieTogYm9vbGVhbiA9IGNvbnRhaW5zRGFuZ2Vyb3VzVW5pdHModW5pdCwgbmVhcmVzdEVuZW1pZXMpO1xyXG5cclxuICAgIC8vIG5vIGVuZW1pZXMgbmVhcmJ5XHJcbiAgICBpZihuZWFyZXN0QWxsaWVzLmxlbmd0aCA9PT0gMCAmJiBuZWFyZXN0RW5lbWllcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBpZih1bml0LnNwZWVkID49IDcwICYmIHVuaXQuc3BlZWQgPCA4MCkge1xyXG4gICAgICAgICAgICB2dWxuZXJhYmlsaXR5ICs9IDEwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHVuaXQuc3BlZWQgPj0gNTAgJiYgdW5pdC5zcGVlZCA8IDcwKSB7XHJcbiAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgKz0gMzA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodW5pdC5zcGVlZCA8IDUwKSB7XHJcbiAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgKz0gNTA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBvbmUgdW5pdCBhbmQgb25lIGVuZW15XHJcbiAgICBpZihuZWFyZXN0QWxsaWVzLmxlbmd0aCA9PT0gMCAmJiBuZWFyZXN0RW5lbWllcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgIGlmKGNvbnRhaW5zRGFuZ2Vyb3VzVW5pdHNOZWFyYnkpIHtcclxuICAgICAgICAgICAgdnVsbmVyYWJpbGl0eSArPSA3MDtcclxuICAgICAgICB9IFxyXG4gICAgICAgIGNvbnN0IG5lYXJlc3RFbmVteVNwZWVkID0gbmVhcmVzdEVuZW1pZXNbMF0uc3BlZWQ7XHJcbiAgICAgICAgaWYodW5pdC5zcGVlZCAvIG5lYXJlc3RFbmVteVNwZWVkID4gMSAmJiB1bml0LnNwZWVkIC8gbmVhcmVzdEVuZW15U3BlZWQgPCAxLjUpIHtcclxuICAgICAgICAgICAgaWYobmVhcmVzdEFsbGllc1dlaWdodCA+IG5lYXJlc3RFbmVtaWVzV2VpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB2dWxuZXJhYmlsaXR5ICs9IDIwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdnVsbmVyYWJpbGl0eSArPSAzNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgZWxzZSBpZih1bml0LnNwZWVkIC8gbmVhcmVzdEVuZW15U3BlZWQgPj0gMS41KSB7XHJcbiAgICAgICAgICAgIGlmKG5lYXJlc3RBbGxpZXNXZWlnaHQgPiBuZWFyZXN0RW5lbWllc1dlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdnVsbmVyYWJpbGl0eSArPSA1O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdnVsbmVyYWJpbGl0eSArPSAxNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKG5lYXJlc3RFbmVtaWVzV2VpZ2h0IC8gbmVhcmVzdEFsbGllc1dlaWdodCA+IDEuMikge1xyXG4gICAgICAgICAgICB2dWxuZXJhYmlsaXR5ICs9IDQwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKG5lYXJlc3RFbmVtaWVzV2VpZ2h0IC8gbmVhcmVzdEFsbGllc1dlaWdodCA+IDEuNSkge1xyXG4gICAgICAgICAgICB2dWxuZXJhYmlsaXR5ICs9IDkwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBsb3RzIG9mIGVuZW1pZXMgYW5kIG5vIGFsbGllcyBuZWFyYnlcclxuICAgIGlmKG5lYXJlc3RBbGxpZXMubGVuZ3RoID09PSAwICYmIG5lYXJlc3RFbmVtaWVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBpZihjb250YWluc0Rhbmdlcm91c1VuaXRzTmVhcmJ5KSB7XHJcbiAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgKz0gNzA7XHJcbiAgICAgICAgfSBcclxuICAgICAgICBpZihuZWFyZXN0RW5lbWllc1dlaWdodCAvIG5lYXJlc3RBbGxpZXNXZWlnaHQgPj0gMS41KSB7XHJcbiAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgKz0gODA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdnVsbmVyYWJpbGl0eSArPSAzMDtcclxuICAgICAgICB9IFxyXG4gICAgfVxyXG5cclxuICAgIC8vIGxvdHMgb2YgYWxsaWVzIGFuZCBsb3RzIG9mIGVuZW1pZXMgbmVhcmJ5XHJcbiAgICBpZihuZWFyZXN0QWxsaWVzLmxlbmd0aCA+PSAxICYmIG5lYXJlc3RFbmVtaWVzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICB2dWxuZXJhYmlsaXR5ICs9IDEwO1xyXG4gICAgICAgIGlmKGNvbnRhaW5zRGFuZ2Vyb3VzVW5pdHNOZWFyYnkpIHtcclxuICAgICAgICAgICAgdnVsbmVyYWJpbGl0eSArPSAzMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYobmVhcmVzdEVuZW1pZXNXZWlnaHQgLyBuZWFyZXN0QWxsaWVzV2VpZ2h0ID49IDEuNSkge1xyXG4gICAgICAgICAgICB2dWxuZXJhYmlsaXR5ICs9IDUwO1xyXG4gICAgICAgIH0gXHJcbiAgICAgICAgZWxzZSBpZihuZWFyZXN0RW5lbWllc1dlaWdodCAvIG5lYXJlc3RBbGxpZXNXZWlnaHQgPj0gMS4yKSB7XHJcbiAgICAgICAgICAgIHZ1bG5lcmFiaWxpdHkgKz0gMzA7XHJcbiAgICAgICAgfSBcclxuICAgIH1cclxuXHJcbiAgICBpZihudW1iZXJPZkRhbmdlcm91c1VuaXRzID4gMCAmJiB1bml0LnNwZWVkIDwgMjUgJiYgdW5pdC50eXBlICE9IFwic2tpcm1pc2hlcnNcIikge1xyXG4gICAgICAgIHZ1bG5lcmFiaWxpdHkgKz0gMzA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYodnVsbmVyYWJpbGl0eSA8IDApIHZ1bG5lcmFiaWxpdHkgPSAwO1xyXG4gICAgZWxzZSBpZih2dWxuZXJhYmlsaXR5ID4gMTAwKSB2dWxuZXJhYmlsaXR5ID0gMTAwO1xyXG5cclxuICAgIHJldHVybiB2dWxuZXJhYmlsaXR5O1xyXG59IiwiaW1wb3J0IHsgY29tcHV0ZXJVbml0cyB9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS91bml0L3VuaXRzXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0Q29tbWFuZE51bWJlclRvVW5pdHMgPSAoY29tbWFuZE51bWJlcjogbnVtYmVyKSA9PiB7XHJcbiAgICBmb3IobGV0IHVuaXQgb2YgY29tcHV0ZXJVbml0cykge1xyXG4gICAgICAgIHVuaXQuc2V0Q29tbWFuZE51bWJlcihjb21tYW5kTnVtYmVyKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFVuaXQgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuaW1wb3J0IE1hcE5vZGUgZnJvbSBcIi4uLy4uLy4uL21hcC9ub2Rlcy9NYXBOb2RlXCI7XHJcbmltcG9ydCB7IGN1cnJlbnRDb21tYW5kTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uL0FJL3N0cmF0ZWd5TW9kdWxlL2RlY2lzaW9uVW5pdC9jb21tYW5kTnVtYmVyL2N1cnJlbnRDb21tYW5kTnVtYmVyXCI7XHJcbmltcG9ydCB7IGNvbXB1dGVyVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvdW5pdC91bml0c1wiO1xyXG5pbXBvcnQgeyBnZXRDbG9zZXN0RW5lbXlUb1VuaXQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdW5pdC9BSVwiO1xyXG5pbXBvcnQgeyBhdHRhY2tFbmVteSB9IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgeyBnZXRTdXJyb3VuZGVkVW5pdHMgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvc3Vycm91bmRlZC9nZXRTdXJyb3VuZGVkVW5pdHNcIjtcclxuaW1wb3J0IHsgYXNzZXNzVnVsbmVyYWJpbGl0eSB9IGZyb20gXCIuLi8uLi8uLi9BSS9wcm9jZXNzTW9kdWxlL3Z1bG5lcmFiaWxpdHlcIjtcclxuaW1wb3J0IFByaW9yaXR5UXVldWUgZnJvbSBcIi4uLy4uLy4uL3N0b3JlL3F1ZXVlcy9Qcmlvcml0eVF1ZXVlXCI7XHJcbmltcG9ydCB7IGdldFVuaXRCeUlkIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3VuaXQvZ2VuZXJhbFwiO1xyXG5pbXBvcnQgeyBtb3ZlVG8gfSBmcm9tICcuLi9jb21tb24vbW92ZVRvJztcclxuaW1wb3J0IHsgYmVDbG9zZVRvIH0gZnJvbSBcIi4vYmVDbG9zZVRvXCI7XHJcblxyXG5leHBvcnQgY29uc3QgYWR2YW5jZSA9ICh1bml0OiBVbml0LCBhY3Rpb25Ob2RlOiBNYXBOb2RlLCBjb21tYW5kTnVtYmVyOiBudW1iZXIsIG5ld0NvbW1hbmQ6IGJvb2xlYW4gPSBmYWxzZSkgPT4ge1xyXG4gICAgaWYoY29tbWFuZE51bWJlciAhPT0gY3VycmVudENvbW1hbmROdW1iZXIpIHJldHVybjtcclxuICAgIGlmKG5ld0NvbW1hbmQgfHwgKCF1bml0LmlzTW92aW5nICYmICF1bml0LmlzRmlnaHRpbmcpKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYHVuaXQgJHt1bml0LmlkfSBjb21tYW5kTnVtYmVyICR7Y29tbWFuZE51bWJlcn1gKTtcclxuICAgICAgICBpZih1bml0LmN1cnJlbnROb2RlLnggIT0gYWN0aW9uTm9kZS54ICYmIHVuaXQuY3VycmVudE5vZGUueSAhPSBhY3Rpb25Ob2RlLnkpIHtcclxuICAgICAgICAgICAgbW92ZVRvKHVuaXQsIGFjdGlvbk5vZGUueCwgYWN0aW9uTm9kZS55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjb21wdXRlclVuaXRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBsZXQgZW5lbXkgPSBnZXRDbG9zZXN0RW5lbXlUb1VuaXQodW5pdCk7XHJcbiAgICAgICAgICAgIGF0dGFja0VuZW15KHVuaXQsIGVuZW15KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBzdXJyb3VuZGVkQWxsaWVzID0gZ2V0U3Vycm91bmRlZFVuaXRzKHVuaXQsIGNvbXB1dGVyVW5pdHMsIDUpO1xyXG4gICAgICAgICAgICBsZXQgcHJpb3JpdHlRdWV1ZSA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XHJcbiAgICAgICAgICAgIGZvcihsZXQgYWxseSBvZiBzdXJyb3VuZGVkQWxsaWVzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdnVsbmVyYWJpbGl0eSA9IGFzc2Vzc1Z1bG5lcmFiaWxpdHkoYWxseSk7XHJcbiAgICAgICAgICAgICAgICBwcmlvcml0eVF1ZXVlLmluc2VydChhbGx5LmlkLCB2dWxuZXJhYmlsaXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aGlsZSghcHJpb3JpdHlRdWV1ZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gcHJpb3JpdHlRdWV1ZS5leHRyYWN0TWF4KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWxseSA9IGdldFVuaXRCeUlkKGVsZW1lbnQua2V5KTtcclxuICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQudmFsdWUgPj0gODAgJiYgYWxseS5pc0ZpZ2h0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVDbG9zZVRvKHVuaXQsIGFsbHksIGNvbW1hbmROdW1iZXIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgYWR2YW5jZSh1bml0LCBhY3Rpb25Ob2RlLCBjb21tYW5kTnVtYmVyKTtcclxuICAgIH0sIDIwMDApO1xyXG59IiwiaW1wb3J0IFBvc2l0aW9ucyBmcm9tIFwiLi4vQUkvcG9zaXRpb25zL1Bvc2l0aW9uc1wiO1xyXG5cclxuXHJcbmNsYXNzIFByaW9yaXR5UXVldWUge1xyXG4gICAgcHJpdmF0ZSBlbGVtZW50czogYW55ID0gW11cclxuICAgIGluc2VydChrZXk6IGFueSwgcHJpb3JpdHk6IE51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMucHVzaCh7XHJcbiAgICAgICAgICAgIGtleToga2V5LFxyXG4gICAgICAgICAgICB2YWx1ZTogcHJpb3JpdHlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoa2V5OiBhbnksIG5ld1ByaW9yaXR5OiBOdW1iZXIpIHtcclxuICAgICAgICBmb3IobGV0IGVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xyXG4gICAgICAgICAgICBpZihlbGVtZW50LmtleSA9PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSBuZXdQcmlvcml0eTsgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXh0cmFjdE1heCgpIHtcclxuICAgICAgICBsZXQgbWF4ID0gdGhpcy5lbGVtZW50c1swXTtcclxuICAgICAgICBsZXQgbWF4SW5kZXggPSAwO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuZWxlbWVudHNbaV0udmFsdWUgPiBtYXgudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZWxlbWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBtYXhJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IHRoaXMuZWxlbWVudHMuZmlsdGVyKChlbDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGVsLmtleSA9PT0gbWF4LmtleSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbWF4O1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKSB7XHJcbiAgICAgICAgaWYodGhpcy5lbGVtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJpb3JpdHlRdWV1ZTsiLCJpbXBvcnQge2xhdW5jaEdhbWV9IGZyb20gJy4vbGF1bmNoR2FtZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGxhdW5jaEdhbWVcclxufVxyXG4iLCJpbXBvcnQgeyBsYXVuY2hNYWluTWVudSB9IGZyb20gJy4uL21haW5NZW51L2xhdW5jaE1haW5NZW51JztcclxuaW1wb3J0IHsgbGF1bmNoQmF0dGxlIH0gZnJvbSAnLi4vYmF0dGxlL2xhdW5jaEJhdHRsZSc7XHJcbmltcG9ydCB7XHJcbiAgbWFpbk1lbnVNb2RlLFxyXG4gIGJhdHRsZU1vZGVcclxufSBmcm9tICcuLi8uLi9jb25maWcvZ2xvYmFsL2dsb2JhbENvbmZpZyc7XHJcblxyXG5leHBvcnQgY29uc3QgbGF1bmNoR2FtZSA9ICgpID0+IHtcclxuICBpZihtYWluTWVudU1vZGUpIHtcclxuICAgIGxhdW5jaE1haW5NZW51KCk7XHJcbiAgfVxyXG4gIGVsc2UgaWYoYmF0dGxlTW9kZSkge1xyXG4gICAgbGF1bmNoQmF0dGxlKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IG1haW5NZW51Q3R4IH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQgeyBNQVBfV0lEVEgsIENBTlZBU19IRUlHSFQgfSBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5pbXBvcnQgeyBkaXNwbGF5Um9zdGVyIH0gZnJvbSAnLi4vLi4vVUkvbWFpbk1lbnUvbGF5b3V0cy9yb3N0ZXJMYXlvdXQnO1xyXG5pbXBvcnQgeyBkaXNwbGF5Q2hvc2VuVW5pdHMgfSBmcm9tICcuLi8uLi9VSS9tYWluTWVudS9sYXlvdXRzL2FybXlMYXlvdXQnO1xyXG5pbXBvcnQgeyBkaXNwbGF5SW5mbyB9IGZyb20gJy4uLy4uL1VJL21haW5NZW51L2xheW91dHMvaW5mb0xheW91dCc7XHJcbmltcG9ydCB7IGRpc3BsYXlUaXRsZSB9IGZyb20gJy4uLy4uL1VJL21haW5NZW51L2xheW91dHMvdXBwZXJMYXlvdXQnO1xyXG5pbXBvcnQgeyBkcmFnQW5kRHJvcCB9IGZyb20gJy4uLy4uL1VJL21haW5NZW51L21haW4nO1xyXG5pbXBvcnQgeyBkcmF3Qm90dG9tTGF5b3V0IH0gZnJvbSAnLi4vLi4vVUkvbWFpbk1lbnUvbGF5b3V0cy9ib3R0b21MYXlvdXQnO1xyXG5pbXBvcnQgeyBpbml0aWFsaXplTWFwIH0gZnJvbSAnLi4vLi4vbWFwL2NyZWF0ZU1hcC9pbml0aWFsTWFwJztcclxuaW1wb3J0IHsgbG9hZEljb25zLCBsb2FkVW5pdEljb25zIH0gZnJvbSAnLi4vLi4vc3RvcmUvaW1hZ2VzL3VuaXRJY29uSW1hZ2VzJztcclxuaW1wb3J0IHsgY3JlYXRlUm9zdGVyIH0gZnJvbSAnLi4vLi4vc3RvcmUvcm9zdGVyL3Jvc3Rlcic7XHJcbmltcG9ydCB7IGRyYXdMb2FkaW5nQ2FudmFzIH0gZnJvbSAnLi4vbG9hZGluZy9kcmF3TG9hZGluZ0NhbnZhcyc7XHJcbmltcG9ydCB7IGxvYWRpbmdDYW52YXMgfSBmcm9tICcuLi8uLi9jb25maWcvY2FudmFzL2xvYWRpbmcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGxhdW5jaE1haW5NZW51ID0gKCkgPT4ge1xyXG4gIGRyYXdMb2FkaW5nQ2FudmFzKCk7XHJcbiAgaW5pdGlhbGl6ZU1hcCgpLnRoZW4oXHJcbiAgICAoKSA9PiB7XHJcbiAgICAgIGxvYWRVbml0SWNvbnMoKS50aGVuKCgpID0+IHtcclxuICAgICAgICBtYWluTWVudUN0eC5maWxsUmVjdCgwLCAwLCBNQVBfV0lEVEgsIENBTlZBU19IRUlHSFQpO1xyXG4gICAgICAgIGNyZWF0ZVJvc3RlcigpO1xyXG4gICAgICAgIGRpc3BsYXlSb3N0ZXIoKTtcclxuICAgICAgICBkaXNwbGF5Q2hvc2VuVW5pdHMoKTtcclxuICAgICAgICBkaXNwbGF5SW5mbygpO1xyXG4gICAgICAgIGRpc3BsYXlUaXRsZSgpO1xyXG4gICAgICAgIGRyYWdBbmREcm9wKCk7XHJcbiAgICAgICAgZHJhd0JvdHRvbUxheW91dCgpO1xyXG4gICAgICAgIGxvYWRJY29ucygpO1xyXG4gICAgICAgIGxvYWRpbmdDYW52YXMuc3R5bGUuekluZGV4ID0gJzEnO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgaXNVbml0U2VsZWN0ZWRJblJvc3RlclxyXG59IGZyb20gJy4vdW5pdCc7XHJcbmltcG9ydCB7XHJcbiAgZGlzcGxheVJvc3RlclxyXG59IGZyb20gJy4vZGlzcGxheSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGlzVW5pdFNlbGVjdGVkSW5Sb3N0ZXIsXHJcbiAgZGlzcGxheVJvc3RlclxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgaXNVbml0U2VsZWN0ZWRJblJvc3RlclxyXG59IGZyb20gJy4vaXNVbml0U2VsZWN0ZWRJblJvc3Rlcic7XHJcblxyXG5leHBvcnQge1xyXG4gIGlzVW5pdFNlbGVjdGVkSW5Sb3N0ZXJcclxufVxyXG4iLCJleHBvcnQgY29uc3Qgcm9zdGVySW1nV2lkdGg6bnVtYmVyID0gMTAwO1xyXG5leHBvcnQgY29uc3Qgcm9zdGVySW1nSGVpZ2h0Om51bWJlciA9IDEwMDtcclxuIiwiaW1wb3J0IHtcclxuICB1bml0Um9zdGVyV2lkdGgsXHJcbiAgdW5pdFJvc3RlckhlaWdodCxcclxuICB0aXRsZUhlaWdodFxyXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9tYWluTWVudSc7XHJcbmltcG9ydCB7bWFpbk1lbnVDdHh9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuaW1wb3J0IHtkaXNwbGF5Um9zdGVyVGl0bGV9IGZyb20gJy4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BsYXlSb3N0ZXIgPSAoKSA9PiB7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNjZGQxZDYnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxSZWN0KDAsdGl0bGVIZWlnaHQsIHVuaXRSb3N0ZXJXaWR0aCwgdW5pdFJvc3RlckhlaWdodCk7XHJcbiAgZGlzcGxheVJvc3RlclRpdGxlKCk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkZWNyZWFzZVNwZW50R29sZCxcclxuICBpbmNyZWFzZVNwZW50R29sZCxcclxufSBmcm9tICcuL3NwZW50R29sZCc7XHJcblxyXG5pbXBvcnQge1xyXG4gIHNldFRvdGFsR29sZCxcclxufSBmcm9tICcuL3RvdGFsR29sZCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRlY3JlYXNlU3BlbnRHb2xkLFxyXG4gIGluY3JlYXNlU3BlbnRHb2xkLFxyXG4gIHNldFRvdGFsR29sZFxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgYXJteUxheW91dEhlaWdodCxcclxuICBhcm15TGF5b3V0V2lkdGhcclxufSBmcm9tICcuL2xheW91dCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGFybXlMYXlvdXRIZWlnaHQsXHJcbiAgYXJteUxheW91dFdpZHRoXHJcbn1cclxuIiwiaW1wb3J0IHtNQVBfV0lEVEgsIENBTlZBU19IRUlHSFR9IGZyb20gJy4uLy4uLy4uJztcclxuXHJcbmV4cG9ydCBsZXQgYXJteUxheW91dEhlaWdodDpudW1iZXIgPSBDQU5WQVNfSEVJR0hUIC0gMTQwO1xyXG5leHBvcnQgbGV0IGFybXlMYXlvdXRXaWR0aDpudW1iZXIgPSBNYXRoLnJvdW5kKE1BUF9XSURUSCAvIDMpO1xyXG4iLCJpbXBvcnQge1xyXG4gIGluZm9MYXlvdXRIZWlnaHQsXHJcbiAgaW5mb0xheW91dFdpZHRoXHJcbn0gZnJvbSAnLi9sYXlvdXQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBpbmZvTGF5b3V0SGVpZ2h0LFxyXG4gIGluZm9MYXlvdXRXaWR0aFxyXG59XHJcbiIsImltcG9ydCB7TUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUfSBmcm9tICcuLi8uLi8uLic7XHJcblxyXG5leHBvcnQgbGV0IGluZm9MYXlvdXRIZWlnaHQ6bnVtYmVyID0gQ0FOVkFTX0hFSUdIVCAtIDE0MDtcclxuZXhwb3J0IGxldCBpbmZvTGF5b3V0V2lkdGg6bnVtYmVyID0gTWF0aC5yb3VuZChNQVBfV0lEVEggLyAzKTtcclxuIiwiaW1wb3J0IHtcclxuICB1bml0Um9zdGVySGVpZ2h0LFxyXG4gIHVuaXRSb3N0ZXJXaWR0aFxyXG59IGZyb20gJy4vbGF5b3V0JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgdW5pdFJvc3RlckhlaWdodCxcclxuICB1bml0Um9zdGVyV2lkdGhcclxufVxyXG4iLCJpbXBvcnQge01BUF9XSURUSCwgQ0FOVkFTX0hFSUdIVH0gZnJvbSAnLi4vLi4vLi4nO1xyXG5cclxuZXhwb3J0IGxldCB1bml0Um9zdGVySGVpZ2h0Om51bWJlciA9IENBTlZBU19IRUlHSFQgLSAxNDA7XHJcbmV4cG9ydCBsZXQgdW5pdFJvc3RlcldpZHRoOm51bWJlciA9IE1hdGgucm91bmQoTUFQX1dJRFRIIC8gMyk7XHJcbiIsImltcG9ydCB7XHJcbiAgc3RhcnRCYXR0bGVTdGFydFksXHJcbiAgc3RhcnRCYXR0bGVIZWlnaHQsXHJcbiAgc3RhcnRCYXR0bGVXaWR0aFxyXG59IGZyb20gJy4vbGF5b3V0JztcclxuXHJcbmV4cG9ydCB7XHJcbiAgc3RhcnRCYXR0bGVTdGFydFksXHJcbiAgc3RhcnRCYXR0bGVIZWlnaHQsXHJcbiAgc3RhcnRCYXR0bGVXaWR0aFxyXG59XHJcbiIsImltcG9ydCB7TUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUfSBmcm9tICcuLi8uLi8uLic7XHJcbmltcG9ydCB7XHJcbiAgaW5mb0xheW91dEhlaWdodFxyXG59IGZyb20gJy4uJztcclxuaW1wb3J0IHt0aXRsZUhlaWdodH0gZnJvbSAnLi4vdXBwZXJMYXlvdXQnO1xyXG4vLyBzdGFydCBiYXR0bGVcclxuZXhwb3J0IGxldCBzdGFydEJhdHRsZVN0YXJ0WTpudW1iZXIgPSB0aXRsZUhlaWdodCArIGluZm9MYXlvdXRIZWlnaHQ7XHJcbmV4cG9ydCBsZXQgc3RhcnRCYXR0bGVIZWlnaHQ6bnVtYmVyID0gQ0FOVkFTX0hFSUdIVCAtICh0aXRsZUhlaWdodCArIGluZm9MYXlvdXRIZWlnaHQpO1xyXG5leHBvcnQgbGV0IHN0YXJ0QmF0dGxlV2lkdGg6bnVtYmVyID0gTUFQX1dJRFRIO1xyXG4iLCJleHBvcnQgY29uc3QgdGl0bGVIZWlnaHQgPSA3MDtcclxuIiwiaW1wb3J0IHtcclxuICBjaGFuZ2VCYXR0bGVTZXR0aW5nc1RvVHJ1ZSxcclxuICBjaGFuZ2VVbml0SW5mb1RvVHJ1ZSxcclxuICBzaG93QmF0dGxlU2V0dGluZ3MsXHJcbiAgc2hvd1VuaXRJbmZvXHJcbn0gZnJvbSAnLi9zaG93SW5mbyc7XHJcblxyXG5leHBvcnQge1xyXG4gIGNoYW5nZUJhdHRsZVNldHRpbmdzVG9UcnVlLFxyXG4gIGNoYW5nZVVuaXRJbmZvVG9UcnVlLFxyXG4gIHNob3dCYXR0bGVTZXR0aW5ncyxcclxuICBzaG93VW5pdEluZm9cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGNoYW5nZVRvQ29tcHV0ZXIsXHJcbiAgY2hhbmdlVG9QbGF5ZXIsXHJcbiAgc2lkZVxyXG59IGZyb20gJy4vc2lkZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGNoYW5nZVRvQ29tcHV0ZXIsXHJcbiAgY2hhbmdlVG9QbGF5ZXIsXHJcbiAgc2lkZVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZGlzYWJsZVN0YXJ0QmF0dGxlQnV0dG9uLFxyXG4gIGVuYWJsZVN0YXJ0QmF0dGxlQnV0dG9uLFxyXG4gIHN0YXJ0QmF0dGxlQXZhaWxhYmxlXHJcbn0gZnJvbSAnLi9zdGFydEJhdHRsZUF2YWlsYWJsZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRpc2FibGVTdGFydEJhdHRsZUJ1dHRvbixcclxuICBlbmFibGVTdGFydEJhdHRsZUJ1dHRvbixcclxuICBzdGFydEJhdHRsZUF2YWlsYWJsZVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgY2hhbmdlSG92ZXJlZFVuaXQsXHJcbiAgaG92ZXJlZFVuaXRcclxufSBmcm9tICcuL2hvdmVyZWRVbml0JztcclxuXHJcbmltcG9ydCB7XHJcbiAgY29tcHV0ZXJIYXNVbml0cyxcclxuICBwbGF5ZXJIYXNVbml0c1xyXG59IGZyb20gJy4vdW5pdHMnO1xyXG5cclxuZXhwb3J0IHtcclxuICBjaGFuZ2VIb3ZlcmVkVW5pdCxcclxuICBob3ZlcmVkVW5pdCxcclxuICBjb21wdXRlckhhc1VuaXRzLFxyXG4gIHBsYXllckhhc1VuaXRzXHJcbn1cclxuIiwiLy8gc3RhcnRCYXR0bGUgYXZhaWxhYmxlXHJcbmV4cG9ydCBsZXQgcGxheWVySGFzVW5pdHM6Ym9vbGVhbiA9IGZhbHNlO1xyXG5leHBvcnQgbGV0IGNvbXB1dGVySGFzVW5pdHM6Ym9vbGVhbiA9IGZhbHNlO1xyXG4iLCJpbXBvcnQgeyBtYWluTWVudUN0eCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuaW1wb3J0IHsgdGl0bGVIZWlnaHQgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUnO1xyXG5pbXBvcnQgeyByb3N0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdG9yZS9yb3N0ZXIvcm9zdGVyJztcclxuaW1wb3J0IHsgbG9hZEltYWdlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQge1xyXG4gIHJvc3RlckltZ0hlaWdodCxcclxuICByb3N0ZXJJbWdXaWR0aFxyXG59IGZyb20gJy4uL3Jvc3RlclNldHRpbmdzJztcclxuaW1wb3J0IHsgZHJhd0NvaW4gfSBmcm9tICcuLi9jb2luJztcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5Um9zdGVyVW5pdHMgPSAoaTpudW1iZXIgPSAwLCB4Om51bWJlcj02MCwgeTpudW1iZXI9dGl0bGVIZWlnaHQrNjApID0+IHtcclxuICBpZihpID49IHJvc3Rlci5sZW5ndGgpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgbG9hZEltYWdlKHJvc3RlcltpXS5pbWdTcmMsIChlcnI6YW55LCBpbWc6YW55KSA9PiB7XHJcbiAgICBtYWluTWVudUN0eC5mb250ID0gJzE0cHggc2VyaWYnO1xyXG4gICAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyMwMDAnO1xyXG4gICAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gICAgbWFpbk1lbnVDdHguZmlsbFRleHQocm9zdGVyW2ldLm5hbWUsIHggKyA1LCB5KTtcclxuICAgIG1haW5NZW51Q3R4LmRyYXdJbWFnZShpbWcsIHgsIHkgKyA1LCByb3N0ZXJJbWdXaWR0aCwgcm9zdGVySW1nSGVpZ2h0KTtcclxuICAgIGRyYXdDb2luKHggKyAxNSwgeSArIHJvc3RlckltZ0hlaWdodCArIDE1LCA1KTtcclxuICAgIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICcjMDAwJztcclxuICAgIG1haW5NZW51Q3R4LmZpbGxUZXh0KHJvc3RlcltpXS5jb3N0LCB4ICsgMjUgLHkgKyByb3N0ZXJJbWdIZWlnaHQgKyAyMCk7XHJcbiAgICByb3N0ZXJbaV0ueCA9IHg7XHJcbiAgICByb3N0ZXJbaV0ueSA9IHk7XHJcbiAgICB4ID0gKHggKyByb3N0ZXJJbWdXaWR0aCArIDE1KTtcclxuICAgIGlmKGkgPT09IDIgfHwgaSA9PT0gNSB8fCBpID09PSA4IHx8IGkgPT09IDExKSB7XHJcbiAgICAgIHggPSA2MDtcclxuICAgICAgeSArPSByb3N0ZXJJbWdIZWlnaHQgKyA0NTtcclxuICAgIH1cclxuICAgIGkrKztcclxuICAgIGRpc3BsYXlSb3N0ZXJVbml0cyhpLCB4LCB5KTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRyYXdDb2luXHJcbn0gZnJvbSAnLi9kcmF3Q29pbic7XHJcblxyXG5leHBvcnQge1xyXG4gIGRyYXdDb2luXHJcbn1cclxuIiwiaW1wb3J0IHttYWluTWVudUN0eH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdDb2luID0gKGNlbnRlclg6bnVtYmVyLCBjZW50ZXJZOm51bWJlciwgcmFkaXVzOm51bWJlcikgPT4ge1xyXG4gIG1haW5NZW51Q3R4LmJlZ2luUGF0aCgpO1xyXG4gIG1haW5NZW51Q3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNmZmQ3MDAnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGwoKTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHRpdGxlSGVpZ2h0XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHttYWluTWVudUN0eH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge2Rpc3BsYXlSb3N0ZXJVbml0c30gZnJvbSAnLic7XHJcblxyXG5leHBvcnQgY29uc3QgZGlzcGxheVJvc3RlclRpdGxlID0gKCkgPT4ge1xyXG4gIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICAnIzAwMCc7XHJcbiAgbWFpbk1lbnVDdHguZm9udCA9ICcyNHB4IHNlcmlmJztcclxuICBtYWluTWVudUN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFRleHQoJ1Jvc3RlcicsIDE1MCwgdGl0bGVIZWlnaHQgKyAyMCk7XHJcbiAgZGlzcGxheVJvc3RlclVuaXRzKCk7XHJcbn1cclxuIiwiaW1wb3J0IHtkcmFnQW5kRHJvcENhbnZhc0N0eH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge1xyXG4gIGFybXlJbWdIZWlnaHQsXHJcbiAgYXJteUltZ1dpZHRoXHJcbn0gZnJvbSAnLi4vYXJteVNldHRpbmdzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkcmF3UmVtb3ZlSWNvbiA9ICh1bml0OmFueSkgPT4ge1xyXG4gIGNvbnN0IHJpZ2h0VG9wWDpudW1iZXIgPSB1bml0LmFybXlQb3NpdGlvbi54ICsgYXJteUltZ1dpZHRoO1xyXG4gIGNvbnN0IHJpZ2h0VG9wWTpudW1iZXIgPSB1bml0LmFybXlQb3NpdGlvbi55O1xyXG5cclxuICBsZXQgbGluZTFYMDpudW1iZXIgPSByaWdodFRvcFggLSAxNTtcclxuICBsZXQgbGluZTFZMDpudW1iZXIgPSByaWdodFRvcFkgKyAxNTtcclxuICBsZXQgbGluZTFYMTpudW1iZXIgPSByaWdodFRvcFggLSA1O1xyXG4gIGxldCBsaW5lMVkxOm51bWJlciA9IHJpZ2h0VG9wWSArIDQ7XHJcblxyXG4gIGxldCBsaW5lMlgwOm51bWJlciA9IGxpbmUxWDA7XHJcbiAgbGV0IGxpbmUyWTA6bnVtYmVyID0gbGluZTFZMTtcclxuICBsZXQgbGluZTJYMTpudW1iZXIgPSBsaW5lMVgxO1xyXG4gIGxldCBsaW5lMlkxOm51bWJlciA9IGxpbmUxWTA7XHJcblxyXG4gIGxldCB3aWR0aDpudW1iZXIgPSBNYXRoLnJvdW5kKGFybXlJbWdXaWR0aCAvIDQpO1xyXG4gIGxldCBoZWlnaHQ6bnVtYmVyID0gTWF0aC5yb3VuZChhcm15SW1nSGVpZ2h0IC8gNCk7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHguZmlsbFN0eWxlID0gJ3JnYigyMDAsIDAsMCknO1xyXG4gIGRyYWdBbmREcm9wQ2FudmFzQ3R4LmJlZ2luUGF0aCgpO1xyXG4gIGRyYWdBbmREcm9wQ2FudmFzQ3R4Lm1vdmVUbyhsaW5lMVgwLCBsaW5lMVkwKTtcclxuICBkcmFnQW5kRHJvcENhbnZhc0N0eC5saW5lVG8obGluZTFYMSwgbGluZTFZMSk7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHguc3Ryb2tlKCk7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHguYmVnaW5QYXRoKCk7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHguZmlsbFN0eWxlID0gJ3JlZCc7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHgubW92ZVRvKGxpbmUyWDAsIGxpbmUyWTApO1xyXG4gIGRyYWdBbmREcm9wQ2FudmFzQ3R4LmxpbmVUbyhsaW5lMlgxLCBsaW5lMlkxKTtcclxuICBkcmFnQW5kRHJvcENhbnZhc0N0eC5zdHJva2UoKTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGlzVW5pdFNob3VsZEJlUmVtb3ZlZFxyXG59IGZyb20gJy4vcmVtb3ZlVW5pdCc7XHJcblxyXG5leHBvcnQge1xyXG4gIGlzVW5pdFNob3VsZEJlUmVtb3ZlZFxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgb25DaG9vc2VVbml0SW5Bcm15XHJcbn0gZnJvbSAnLi9jaG9vc2VVbml0JztcclxuaW1wb3J0IHtcclxuICBkaXNwbGF5Q2hvc2VuVW5pdHMsXHJcbiAgZGlzcGxheUNob3NlblVuaXRzVGl0bGVcclxufSBmcm9tICcuL2Nob3NlblVuaXRzJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZGlzcGxheUNob3NlblVuaXRzLFxyXG4gIGRpc3BsYXlDaG9zZW5Vbml0c1RpdGxlLFxyXG4gIG9uQ2hvb3NlVW5pdEluQXJteVxyXG59XHJcbiIsImltcG9ydCB7c2lkZX0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUnO1xyXG5pbXBvcnQge2RyYWdBbmREcm9wQ2FudmFzQ3R4fSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7TUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcnO1xyXG5pbXBvcnQge3NlbGVjdGVkVW5pdEluUm9zdGVyfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdG9yZS9yb3N0ZXIvc2VsZWN0ZWRVbml0JztcclxuaW1wb3J0IHtkcmF3UmVtb3ZlSWNvbn0gZnJvbSAnLi4vaWNvbic7XHJcbmltcG9ydCB7XHJcbiAgcGxheWVyQXJteSxcclxuICBjb21wdXRlckFybXlcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9zdG9yZS9yb3N0ZXIvYXJteSc7XHJcbmltcG9ydCB7XHJcbiAgYXJteUltZ0hlaWdodCxcclxuICBhcm15SW1nV2lkdGhcclxufSBmcm9tICcuLi9hcm15U2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG9uQ2hvb3NlVW5pdEluQXJteSA9IChtb3VzZVg6bnVtYmVyLCBtb3VzZVk6bnVtYmVyKSA9PiB7XHJcbiAgbGV0IGFybXk6YW55W10gPSBbXTtcclxuICBpZihzaWRlID09PSAncGxheWVyJykge1xyXG4gICAgYXJteSA9IHBsYXllckFybXk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGFybXkgPSBjb21wdXRlckFybXk7XHJcbiAgfVxyXG4gIGxldCBzZWxlY3RlZFVuaXQ6YW55ID0gbnVsbDtcclxuICAvLyBjb25zb2xlLmVycm9yKCdhcm15JywgYXJteSk7XHJcbiAgZm9yKGxldCB1bml0IG9mIGFybXkpIHtcclxuICAgICAgbGV0IHgwOm51bWJlciA9IHVuaXQuYXJteVBvc2l0aW9uLng7XHJcbiAgICAgIGxldCB4MTpudW1iZXIgPSB4MCArIGFybXlJbWdXaWR0aDtcclxuICAgICAgbGV0IHkwOm51bWJlciA9IHVuaXQuYXJteVBvc2l0aW9uLnk7XHJcbiAgICAgIGxldCB5MTpudW1iZXIgPSB5MCArIGFybXlJbWdIZWlnaHQ7XHJcbiAgICAgIGlmKG1vdXNlWCA+PSB4MCAmJiBtb3VzZVggPCB4MSAmJiBtb3VzZVkgPiB5MCAmJiBtb3VzZVkgPCB5MSkge1xyXG4gICAgICAgIHNlbGVjdGVkVW5pdCA9IHVuaXQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYoIXNlbGVjdGVkVW5pdEluUm9zdGVyKSB7IC8vIHVuaXQgaXMgbm90IGRyYWdnZWRcclxuICAgICAgICAgIGRyYWdBbmREcm9wQ2FudmFzQ3R4LmNsZWFyUmVjdCgwLCAwLCBNQVBfV0lEVEgsIENBTlZBU19IRUlHSFQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gIH1cclxuICBpZihzZWxlY3RlZFVuaXQgJiYgIXNlbGVjdGVkVW5pdEluUm9zdGVyKSB7XHJcbiAgICBkcmF3UmVtb3ZlSWNvbihzZWxlY3RlZFVuaXQpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIG1haW5NZW51Q3R4XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge1xyXG4gIHVuaXRSb3N0ZXJXaWR0aCxcclxuICB1bml0Um9zdGVySGVpZ2h0LFxyXG4gIHRpdGxlSGVpZ2h0LFxyXG4gIGFybXlMYXlvdXRXaWR0aCxcclxuICBhcm15TGF5b3V0SGVpZ2h0XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtkaXNwbGF5QXJteX0gZnJvbSAnLi4vYXJteSc7XHJcblxyXG5leHBvcnQgY29uc3QgZGlzcGxheUNob3NlblVuaXRzID0gKCkgPT4ge1xyXG4gIG1haW5NZW51Q3R4LmNsZWFyUmVjdCh1bml0Um9zdGVyV2lkdGgsIHRpdGxlSGVpZ2h0LCBhcm15TGF5b3V0V2lkdGgsIGFybXlMYXlvdXRIZWlnaHQpO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICcjY2RkMWQ2JztcclxuICBtYWluTWVudUN0eC5maWxsUmVjdCh1bml0Um9zdGVyV2lkdGgsIHRpdGxlSGVpZ2h0LCBhcm15TGF5b3V0V2lkdGgsIGFybXlMYXlvdXRIZWlnaHQpO1xyXG4gIG1haW5NZW51Q3R4LnN0cm9rZVJlY3QodW5pdFJvc3RlcldpZHRoLCB0aXRsZUhlaWdodCwgYXJteUxheW91dFdpZHRoLCBhcm15TGF5b3V0SGVpZ2h0KTtcclxuICBkaXNwbGF5Q2hvc2VuVW5pdHNUaXRsZSgpO1xyXG4gIGRpc3BsYXlBcm15KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5Q2hvc2VuVW5pdHNUaXRsZSA9ICgpID0+IHtcclxuICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAgJyMwMDAnO1xyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMjRweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxUZXh0KCdVbml0cycsIHVuaXRSb3N0ZXJXaWR0aCArIDE1MCwgdGl0bGVIZWlnaHQgKyAyMCk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkcmF3TW9uZXlCb3hcclxufSBmcm9tICcuL21vbmV5Qm94JztcclxuaW1wb3J0IHtcclxuICBjaGFuZ2VUb3RhbEdvbGQsXHJcbiAgZmlsbFRvdGFsR29sZCxcclxuICBzaG93VG90YWxHb2xkXHJcbn0gZnJvbSAnLi90b3RhbEdvbGQnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkcmF3TW9uZXlCb3gsXHJcbiAgY2hhbmdlVG90YWxHb2xkLFxyXG4gIGZpbGxUb3RhbEdvbGQsXHJcbiAgc2hvd1RvdGFsR29sZFxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgdG90YWxHb2xkXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L2dvbGQvdG90YWxHb2xkJztcclxuaW1wb3J0IHtcclxuICBtYWluTWVudUN0eCxcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgYm94SGVpZ2h0LFxyXG4gIGJveFdpZHRoXHJcbn0gZnJvbSAnLi4vLi4vaW5mb1NldHRpbmdzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkcmF3TW9uZXlCb3ggPSAoeDpudW1iZXIsIHk6bnVtYmVyLCBhbW91bnQ6bnVtYmVyKSA9PiB7XHJcbiAgaWYoYW1vdW50ID09PSB0b3RhbEdvbGQpIHtcclxuICAgIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICcjZmZmJztcclxuICB9IGVsc2Uge1xyXG4gICAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNjZGQxZDYnO1xyXG4gIH1cclxuICBtYWluTWVudUN0eC5maWxsUmVjdCh4LCB5LCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcclxuICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAnIzAwMCc7XHJcbiAgbWFpbk1lbnVDdHguc3Ryb2tlUmVjdCh4LCB5LCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcclxuICBtYWluTWVudUN0eC5mb250ID0gJzEycHggc2VyaWYnO1xyXG4gIG1haW5NZW51Q3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcclxuICBtYWluTWVudUN0eC5maWxsVGV4dChhbW91bnQsIHggICsgMTAsIHkgKyAyNSk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgdGl0bGVIZWlnaHQsXHJcbiAgdW5pdFJvc3RlcldpZHRoXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuXHJcbmV4cG9ydCBjb25zdCB3aWR0aCA9IDE2MDtcclxuZXhwb3J0IGNvbnN0IGhlaWdodCA9IDMwO1xyXG5leHBvcnQgY29uc3QgYmF0dGxlU2V0dGluZ3NYID0gYXJteUxheW91dFdpZHRoICsgdW5pdFJvc3RlcldpZHRoICsgNTA7XHJcbmV4cG9ydCBjb25zdCBiYXR0bGVTZXR0aW5nc1kgPSB0aXRsZUhlaWdodDtcclxuZXhwb3J0IGNvbnN0IHVuaXRJbmZvWCA9IGFybXlMYXlvdXRXaWR0aCArIHVuaXRSb3N0ZXJXaWR0aCArIDUwICsgd2lkdGggKyAyMDtcclxuZXhwb3J0IGNvbnN0IHVuaXRJbmZvWSA9IHRpdGxlSGVpZ2h0O1xyXG4iLCJpbXBvcnQge1xyXG4gIGJveFdpZHRoLFxyXG4gIGJveEhlaWdodCxcclxuICBnb2xkQm94U3RhcnRYLFxyXG4gIGdvbGRCb3hTdGFydFksXHJcbiAgZ29sZE9wdGlvbnMsXHJcbiAgc3RhcnRUb3RhbE1vbmV5VGl0bGVYLFxyXG4gIHN0YXJ0VG90YWxNb25leVRpdGxlWVxyXG59IGZyb20gJy4uLy4uL2luZm9TZXR0aW5ncyc7XHJcbmltcG9ydCB7XHJcbiAgbWFpbk1lbnVDdHhcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgc2V0VG90YWxHb2xkXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuLy9pbXBvcnQge2Rpc3BsYXlUaXRsZX0gZnJvbSAnLi4vLi4vdGl0bGUnO1xyXG5pbXBvcnQge2Rpc3BsYXlUaXRsZX0gZnJvbSAnLi4vLi4vLi4vdXBwZXJMYXlvdXQnO1xyXG5pbXBvcnQge2RyYXdNb25leUJveH0gZnJvbSAnLi4vbW9uZXlCb3gnO1xyXG5pbXBvcnQge2lzU3RhcnRCYXR0bGVBdmFpbGFibGV9IGZyb20gJy4uLy4uLy4uL2JvdHRvbUxheW91dC9idXR0b24nO1xyXG5cclxuZXhwb3J0IGxldCBnb2xkQm94ZXM6YW55W10gPSBbXTtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGFuZ2VUb3RhbEdvbGQgPSAobW91c2VYOm51bWJlciwgbW91c2VZOm51bWJlcikgPT4ge1xyXG4gIGZvcihsZXQgYm94IG9mIGdvbGRCb3hlcykge1xyXG4gICAgaWYobW91c2VYID49IGJveC54ICYmIG1vdXNlWCA8IGJveC54ICsgYm94V2lkdGggJiYgbW91c2VZID49IGJveC55ICYmIG1vdXNlWSA8IGJveC55ICsgYm94SGVpZ2h0KSB7XHJcbiAgICAgIHNldFRvdGFsR29sZChib3guZ29sZCk7XHJcbiAgICAgIHNob3dUb3RhbEdvbGQoKTtcclxuICAgICAgZGlzcGxheVRpdGxlKCk7IC8vIHJlZHJhdyB0b3RhbEdvbGQgaW4gdGhlIHRpdGxlQ29tcG9uZW50XHJcbiAgICAgIGlzU3RhcnRCYXR0bGVBdmFpbGFibGUoKTsgLy8gY2hlY2sgaWYgc3RhcnRCYXR0bGVBdmFpbGFibGVcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmaWxsVG90YWxHb2xkID0gKCkgPT4ge1xyXG4gIGdvbGRCb3hlcyA9IFtdO1xyXG4gIGxldCB4ID0gZ29sZEJveFN0YXJ0WDtcclxuICBsZXQgeSA9IGdvbGRCb3hTdGFydFk7XHJcbiAgZm9yKGxldCBnb2xkIG9mIGdvbGRPcHRpb25zKSB7XHJcbiAgICBnb2xkQm94ZXMucHVzaCh7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIGdvbGRcclxuICAgIH0pO1xyXG4gICAgeCArPSBib3hXaWR0aCArIDU7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2hvd1RvdGFsR29sZCA9ICgpID0+IHtcclxuICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAnIzAwMCc7XHJcbiAgbWFpbk1lbnVDdHguZm9udCA9ICcyNHB4IHNlcmlmJztcclxuICBtYWluTWVudUN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFRleHQoJ1RvdGFsIE1vbmV5OicsIHN0YXJ0VG90YWxNb25leVRpdGxlWCwgc3RhcnRUb3RhbE1vbmV5VGl0bGVZKTtcclxuICBtYWluTWVudUN0eC5mb250ID0gJzEycHggc2VyaWYnO1xyXG4gIGZpbGxUb3RhbEdvbGQoKTtcclxuICBmb3IobGV0IGJveCBvZiBnb2xkQm94ZXMpIHtcclxuICAgIGRyYXdNb25leUJveChib3gueCwgYm94LnksIGJveC5nb2xkKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBvbkNob29zZUNvbXB1dGVyXHJcbn0gZnJvbSAnLi9vbkNob29zZUNvbXB1dGVyJztcclxuaW1wb3J0IHtcclxuICBvbkNob29zZVBsYXllclxyXG59IGZyb20gJy4vb25DaG9vc2VQbGF5ZXInO1xyXG5cclxuZXhwb3J0IHtcclxuICBvbkNob29zZUNvbXB1dGVyLFxyXG4gIG9uQ2hvb3NlUGxheWVyXHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBjb21wdXRlclN3aXRjaGVyWDAsXHJcbiAgY29tcHV0ZXJTd2l0Y2hlclgxLFxyXG4gIGNvbXB1dGVyU3dpdGNoZXJZMCxcclxuICBjb21wdXRlclN3aXRjaGVyWTFcclxufSBmcm9tICcuLi91cHBlckxheW91dFNldHRpbmdzJztcclxuaW1wb3J0IHtcclxuICBjaGFuZ2VUb0NvbXB1dGVyXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUnO1xyXG5pbXBvcnQge1xyXG4gIGRpc3BsYXlDb21wdXRlcixcclxuICBkaXNwbGF5VGl0bGVcclxufSBmcm9tICcuLi9kaXNwbGF5JztcclxuXHJcbmltcG9ydCB7ZGlzcGxheUNob3NlblVuaXRzfSBmcm9tICcuLi8uLic7XHJcblxyXG5leHBvcnQgY29uc3Qgb25DaG9vc2VDb21wdXRlciA9IChtb3VzZVg6bnVtYmVyLCBtb3VzZVk6bnVtYmVyKSA9PiB7XHJcbiAgaWYobW91c2VYID49IGNvbXB1dGVyU3dpdGNoZXJYMCAmJiBtb3VzZVggPCBjb21wdXRlclN3aXRjaGVyWDEgJiYgbW91c2VZID49IGNvbXB1dGVyU3dpdGNoZXJZMCAmJiBtb3VzZVkgPCBjb21wdXRlclN3aXRjaGVyWTEpIHtcclxuICAgIGNoYW5nZVRvQ29tcHV0ZXIoKTtcclxuICAgIGRpc3BsYXlDaG9zZW5Vbml0cygpO1xyXG4gICAgZGlzcGxheUNvbXB1dGVyKCk7XHJcbiAgICBkaXNwbGF5VGl0bGUoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgdGl0bGVIZWlnaHRcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUnO1xyXG5cclxuZXhwb3J0IGxldCBwbGF5ZXJTd2l0Y2hlclgwID0gYXJteUxheW91dFdpZHRoO1xyXG5leHBvcnQgbGV0IHBsYXllclN3aXRjaGVyWDEgPSBhcm15TGF5b3V0V2lkdGggKyAoYXJteUxheW91dFdpZHRoIC8gMik7XHJcbmV4cG9ydCBsZXQgcGxheWVyU3dpdGNoZXJZMCA9IDBcclxuZXhwb3J0IGxldCBwbGF5ZXJTd2l0Y2hlclkxID0gdGl0bGVIZWlnaHQgLyAyO1xyXG5cclxuZXhwb3J0IGxldCBjb21wdXRlclN3aXRjaGVyWDAgPSBwbGF5ZXJTd2l0Y2hlclgxO1xyXG5leHBvcnQgbGV0IGNvbXB1dGVyU3dpdGNoZXJYMSA9IGNvbXB1dGVyU3dpdGNoZXJYMCArIChhcm15TGF5b3V0V2lkdGggLyAyKTtcclxuZXhwb3J0IGxldCBjb21wdXRlclN3aXRjaGVyWTAgPSAwO1xyXG5leHBvcnQgbGV0IGNvbXB1dGVyU3dpdGNoZXJZMSA9IHRpdGxlSGVpZ2h0IC8gMjtcclxuXHJcbmV4cG9ydCBsZXQgcGxheWVyU3dpdGNoZXJXaWR0aCA9IGFybXlMYXlvdXRXaWR0aCAvIDI7XHJcbmV4cG9ydCBsZXQgY29tcHV0ZXJTd2l0Y2hlcldpZHRoID0gYXJteUxheW91dFdpZHRoIC8gMjtcclxuXHJcbmV4cG9ydCBjb25zdCBnb2xkWDpudW1iZXIgPSBwbGF5ZXJTd2l0Y2hlclgwICsgcGxheWVyU3dpdGNoZXJXaWR0aDtcclxuZXhwb3J0IGNvbnN0IGdvbGRZOm51bWJlciA9ICh0aXRsZUhlaWdodCAvIDIpICsgMjU7XHJcbiIsImltcG9ydCB7XHJcbiAgYXJteUxheW91dFdpZHRoLFxyXG4gIHRpdGxlSGVpZ2h0LFxyXG4gIHVuaXRSb3N0ZXJXaWR0aFxyXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9tYWluTWVudSc7XHJcbmltcG9ydCB7bWFpbk1lbnVDdHh9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuaW1wb3J0IHtzaWRlfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUvc2lkZXMvc2lkZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZGlzcGxheUNvbXB1dGVyID0gKCkgPT4ge1xyXG4gIGxldCBjb2xvcjpzdHJpbmcgPSAnI2NjYyc7XHJcbiAgaWYoc2lkZSA9PT0gJ2NvbXB1dGVyJykgY29sb3IgPSAnI2ZmZic7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gY29sb3I7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFJlY3QodW5pdFJvc3RlcldpZHRoICsgKGFybXlMYXlvdXRXaWR0aCAvIDIpLCAwLCAoYXJteUxheW91dFdpZHRoIC8gMiksICh0aXRsZUhlaWdodCAvIDIpKTtcclxuICBtYWluTWVudUN0eC5zdHJva2VSZWN0KHVuaXRSb3N0ZXJXaWR0aCArIChhcm15TGF5b3V0V2lkdGggLyAyKSwgMCwgKGFybXlMYXlvdXRXaWR0aCAvIDIpLCAodGl0bGVIZWlnaHQgLyAyKSk7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gICcjMDAwJztcclxuICBtYWluTWVudUN0eC5mb250ID0gJzI4cHggc2VyaWYnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxUZXh0KCdDb21wdXRlcicsIGFybXlMYXlvdXRXaWR0aCArIDM2MCwgKHRpdGxlSGVpZ2h0IC8gMikgLSAxMCk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgdGl0bGVIZWlnaHQsXHJcbiAgdW5pdFJvc3RlcldpZHRoXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHttYWluTWVudUN0eH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge3NpZGV9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9tYWluTWVudS9zaWRlcy9zaWRlJztcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5UGxheWVyID0gKCkgPT4ge1xyXG4gIGxldCBjb2xvcjpzdHJpbmcgPSAnI2NjYyc7XHJcbiAgaWYoc2lkZSA9PT0gJ3BsYXllcicpIGNvbG9yID0gJyNmZmYnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxSZWN0KHVuaXRSb3N0ZXJXaWR0aCwgMCwgKGFybXlMYXlvdXRXaWR0aCAvIDIpLCAodGl0bGVIZWlnaHQgLyAyKSk7XHJcbiAgbWFpbk1lbnVDdHguc3Ryb2tlUmVjdCh1bml0Um9zdGVyV2lkdGgsIDAsIChhcm15TGF5b3V0V2lkdGggLyAyKSwgKHRpdGxlSGVpZ2h0IC8gMikpO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICAnIzAwMCc7XHJcbiAgbWFpbk1lbnVDdHguZm9udCA9ICcyOHB4IHNlcmlmJztcclxuICBtYWluTWVudUN0eC5maWxsVGV4dCgnUGxheWVyJywgYXJteUxheW91dFdpZHRoICsgMTIwLCAodGl0bGVIZWlnaHQgLyAyKSAtIDEwKTtcclxufVxyXG4iLCJpbXBvcnQge21haW5NZW51Q3R4fSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7c2lkZX0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUnO1xyXG5pbXBvcnQge1xyXG4gIGNvbXB1dGVyU3BlbnRHb2xkLFxyXG4gIHBsYXllclNwZW50R29sZFxyXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9tYWluTWVudS9nb2xkL3NwZW50R29sZCc7XHJcbmltcG9ydCB7dG90YWxHb2xkfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUvZ29sZC90b3RhbEdvbGQnO1xyXG5pbXBvcnQge1xyXG4gIGdvbGRYLFxyXG4gIGdvbGRZXHJcbn0gZnJvbSAnLi4vdXBwZXJMYXlvdXRTZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgY29uc3QgZGlzcGxheVJlbWFpbkdvbGQgPSAoKSA9PiB7XHJcbiAgbGV0IHNwZW5kZWRHb2xkOm51bWJlcjtcclxuICBpZihzaWRlID09PSAnY29tcHV0ZXInKSB7XHJcbiAgICBzcGVuZGVkR29sZCA9IGNvbXB1dGVyU3BlbnRHb2xkO1xyXG4gIH1cclxuICBlbHNlIGlmKHNpZGUgPT09ICdwbGF5ZXInKSB7XHJcbiAgICBzcGVuZGVkR29sZCA9IHBsYXllclNwZW50R29sZDtcclxuICB9XHJcbiAgaWYoc3BlbmRlZEdvbGQgPiB0b3RhbEdvbGQpIHtcclxuICAgIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICdyZWQnO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAnI2NkZDFkNic7XHJcbiAgfVxyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMjRweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFRleHQoc3BlbmRlZEdvbGQgKyAnLycgKyB0b3RhbEdvbGQsIGdvbGRYLCBnb2xkWSk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBkaXNwbGF5Q29tcHV0ZXIsXHJcbiAgZGlzcGxheVBsYXllcixcclxuICBkaXNwbGF5UmVtYWluR29sZFxyXG59IGZyb20gJy4nO1xyXG5pbXBvcnQge1xyXG4gIHRpdGxlSGVpZ2h0XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtcclxuICBNQVBfV0lEVEhcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcnO1xyXG5pbXBvcnQge21haW5NZW51Q3R4fSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7c2lkZX0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BsYXlUaXRsZSA9ICgpID0+IHtcclxuICBtYWluTWVudUN0eC5jbGVhclJlY3QoMCwwLCBNQVBfV0lEVEgsIHRpdGxlSGVpZ2h0KTtcclxuICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSAgJyMyYzJmMzMnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxSZWN0KDAsIDAsIE1BUF9XSURUSCwgdGl0bGVIZWlnaHQpXHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyNjZGQxZDYnO1xyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMzhweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgZGlzcGxheVBsYXllcigpO1xyXG4gIGRpc3BsYXlDb21wdXRlcigpO1xyXG4gIGRpc3BsYXlSZW1haW5Hb2xkKCk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBwbGF5ZXJTd2l0Y2hlclgxLFxyXG4gIHBsYXllclN3aXRjaGVyWTAsXHJcbiAgcGxheWVyU3dpdGNoZXJZMVxyXG59IGZyb20gJy4uL3VwcGVyTGF5b3V0U2V0dGluZ3MnO1xyXG5pbXBvcnQge1xyXG4gIGNoYW5nZVRvUGxheWVyXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3NpZGVzL3NpZGUnO1xyXG5pbXBvcnQge1xyXG4gIGRpc3BsYXlQbGF5ZXIsXHJcbiAgZGlzcGxheVRpdGxlXHJcbn0gZnJvbSAnLi4vZGlzcGxheSc7XHJcbmltcG9ydCB7XHJcbiAgdW5pdFJvc3RlcldpZHRoXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtkaXNwbGF5Q2hvc2VuVW5pdHN9IGZyb20gJy4uLy4uJztcclxuXHJcbmV4cG9ydCBjb25zdCBvbkNob29zZVBsYXllciA9IChtb3VzZVg6bnVtYmVyLCBtb3VzZVk6bnVtYmVyKSA9PiB7XHJcbiAgaWYobW91c2VYID49IHVuaXRSb3N0ZXJXaWR0aCAmJiBtb3VzZVggPCBwbGF5ZXJTd2l0Y2hlclgxICYmIG1vdXNlWSA+PSBwbGF5ZXJTd2l0Y2hlclkwICYmIG1vdXNlWSA8IHBsYXllclN3aXRjaGVyWTEpIHtcclxuICAgIGNoYW5nZVRvUGxheWVyKCk7XHJcbiAgICBkaXNwbGF5Q2hvc2VuVW5pdHMoKTtcclxuICAgIGRpc3BsYXlQbGF5ZXIoKTtcclxuICAgIGRpc3BsYXlUaXRsZSgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHBsYXllckFybXksXHJcbiAgY29tcHV0ZXJBcm15XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vc3RvcmUvcm9zdGVyL2FybXknO1xyXG5pbXBvcnQge1xyXG4gIGNvbXB1dGVyU3BlbnRHb2xkLFxyXG4gIHBsYXllclNwZW50R29sZCxcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUvZ29sZC9zcGVudEdvbGQnO1xyXG5pbXBvcnQge3RvdGFsR29sZH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L2dvbGQvdG90YWxHb2xkJztcclxuaW1wb3J0IHtcclxuICBkaXNhYmxlU3RhcnRCYXR0bGVCdXR0b24sXHJcbiAgZW5hYmxlU3RhcnRCYXR0bGVCdXR0b25cclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUnO1xyXG5pbXBvcnQge1xyXG4gIGRyYXdCb3R0b21MYXlvdXRcclxufSBmcm9tICcuLi9sYXlvdXQnO1xyXG4vKlxyXG4gIENoZWNrcyB0b3RhbCBwbGF5ZXIgYW5kIGNvbXB1dGVyIHVuaXRzIGFuZCBzcGVuZGVkIGdvbGRcclxuICBhbmQgZGVjaWRlIGlmIGJhdHRsZSBjYW4gc3RhcnQgb3Igbm90XHJcbiovXHJcbmV4cG9ydCBjb25zdCBpc1N0YXJ0QmF0dGxlQXZhaWxhYmxlID0gKCkgPT4ge1xyXG4gIGxldCBjb21wdXRlclVuaXRzTnVtYmVyOm51bWJlciA9IGNvbXB1dGVyQXJteS5sZW5ndGg7XHJcbiAgbGV0IHBsYXllclVuaXRzTnVtYmVyOm51bWJlciA9IHBsYXllckFybXkubGVuZ3RoO1xyXG4gIGxldCBjb21wdXRlclJlbWFpbkdvbGQ6bnVtYmVyID0gdG90YWxHb2xkIC0gY29tcHV0ZXJTcGVudEdvbGQ7XHJcbiAgbGV0IHBsYXllclJlbWFpbkdvbGQ6bnVtYmVyID0gdG90YWxHb2xkIC0gcGxheWVyU3BlbnRHb2xkO1xyXG4gIGlmKGNvbXB1dGVyVW5pdHNOdW1iZXIgPCAxIHx8IHBsYXllclVuaXRzTnVtYmVyIDwgMSkge1xyXG4gICAgLy8gY29tcHV0ZXIgb3IoYW5kKSBwbGF5ZXIgZG9uJ3QgaGF2ZSB1bml0c1xyXG4gICAgZGlzYWJsZVN0YXJ0QmF0dGxlQnV0dG9uKCk7XHJcbiAgICBkcmF3Qm90dG9tTGF5b3V0KCk7IC8vIHJlZHJhdyBzdGFydEJhdHRsZSBsYXlvdXRcclxuICB9XHJcbiAgZWxzZSBpZihjb21wdXRlclJlbWFpbkdvbGQgPCAwIHx8IHBsYXllclJlbWFpbkdvbGQgPCAwKSB7XHJcbiAgICAvLyBjb21wdXRlciBvcihhbmQgcGxheWVyKSBleGNlZWQgdG90YWwgYXZhaWxhYmxlIGdvbGRcclxuICAgIGRpc2FibGVTdGFydEJhdHRsZUJ1dHRvbigpO1xyXG4gICAgZHJhd0JvdHRvbUxheW91dCgpOyAvLyByZWRyYXcgc3RhcnRCYXR0bGUgbGF5b3V0XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgZW5hYmxlU3RhcnRCYXR0bGVCdXR0b24oKTtcclxuICAgIGRyYXdCb3R0b21MYXlvdXQoKTsgLy8gcmVkcmF3IHN0YXJ0QmF0dGxlIGxheW91dFxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge2ZpbGxMYXlvdXR9IGZyb20gJy4vZmlsbExheW91dCc7XHJcbmltcG9ydCB7c2hvd1N0YXJ0QmF0dGxlQnV0dG9ufSBmcm9tICcuLi9idXR0b24nO1xyXG5pbXBvcnQge3Nob3dUZXh0fSBmcm9tICcuLi9idXR0b24nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRyYXdCb3R0b21MYXlvdXQgPSAoKSA9PiB7XHJcbiAgZmlsbExheW91dCgpO1xyXG4gIHNob3dTdGFydEJhdHRsZUJ1dHRvbigpO1xyXG4gIHNob3dUZXh0KCk7XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBzdGFydEJhdHRsZUJ1dHRvblgsXHJcbiAgc3RhcnRCYXR0bGVCdXR0b25XaWR0aCxcclxuICBzdGFydEJhdHRsZUJ1dHRvblksXHJcbiAgc3RhcnRCYXR0bGVCdXR0b25IZWlnaHRcclxufSBmcm9tICcuLi9ib3R0b21TZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgY29uc3QgaXNTdGFydEJhdHRsZUJ1dHRvblNlbGVjdGVkID0gKG1vdXNlWDpudW1iZXIsIG1vdXNlWTpudW1iZXIpOmJvb2xlYW4gPT4ge1xyXG4gIGxldCB4MCA9IHN0YXJ0QmF0dGxlQnV0dG9uWDtcclxuICBsZXQgeDEgPSB4MCArIHN0YXJ0QmF0dGxlQnV0dG9uV2lkdGg7XHJcbiAgbGV0IHkwID0gc3RhcnRCYXR0bGVCdXR0b25ZO1xyXG4gIGxldCB5MSA9IHkwICsgc3RhcnRCYXR0bGVCdXR0b25IZWlnaHQ7XHJcbiAgaWYobW91c2VYID49IHgwICYmIG1vdXNlWCA8IHgxICYmIG1vdXNlWSA+PSB5MCAmJiBtb3VzZVkgPCB5MSkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIHN0YXJ0QmF0dGxlV2lkdGgsXHJcbiAgc3RhcnRCYXR0bGVTdGFydFlcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUnO1xyXG5cclxuZXhwb3J0IGxldCBzdGFydEJhdHRsZUJ1dHRvblg6bnVtYmVyID0gTWF0aC5yb3VuZChzdGFydEJhdHRsZVdpZHRoIC8gMykgKyAxMjA7XHJcbmV4cG9ydCBsZXQgc3RhcnRCYXR0bGVCdXR0b25ZOm51bWJlciA9IHN0YXJ0QmF0dGxlU3RhcnRZICsgMTU7XHJcbmV4cG9ydCBsZXQgc3RhcnRCYXR0bGVCdXR0b25XaWR0aDpudW1iZXIgPSAyMDA7XHJcbmV4cG9ydCBsZXQgc3RhcnRCYXR0bGVCdXR0b25IZWlnaHQ6bnVtYmVyID0gNDA7XHJcbmV4cG9ydCBsZXQgc3RhcnRCYXR0bGVUZXh0WDpudW1iZXIgPSBzdGFydEJhdHRsZUJ1dHRvblggKyAzMDtcclxuZXhwb3J0IGxldCBzdGFydEJhdHRsZVRleHRZOm51bWJlciA9IHN0YXJ0QmF0dGxlQnV0dG9uWSArIDMwO1xyXG4iLCJpbXBvcnQge21haW5NZW51Q3R4fSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7c3RhcnRCYXR0bGVBdmFpbGFibGV9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9tYWluTWVudS9zdGFydEJhdHRsZS9zdGFydEJhdHRsZUF2YWlsYWJsZSc7XHJcbmltcG9ydCB7XHJcbiAgc3RhcnRCYXR0bGVCdXR0b25YLFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uWSxcclxuICBzdGFydEJhdHRsZUJ1dHRvbldpZHRoLFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uSGVpZ2h0LFxyXG4gIHN0YXJ0QmF0dGxlVGV4dFgsXHJcbiAgc3RhcnRCYXR0bGVUZXh0WVxyXG59IGZyb20gJy4uL2JvdHRvbVNldHRpbmdzJztcclxuXHJcbmV4cG9ydCBjb25zdCBzaG93U3RhcnRCYXR0bGVCdXR0b24gPSAoKSA9PiB7XHJcbiAgbGV0IGNvbG9yOnN0cmluZztcclxuICBpZihzdGFydEJhdHRsZUF2YWlsYWJsZSkge1xyXG4gICAgY29sb3IgPSAnI2ZmZic7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbG9yID0gJyNjY2MnO1xyXG4gIH1cclxuICBtYWluTWVudUN0eC5maWxsU3R5bGUgPSBjb2xvcjtcclxuICBtYWluTWVudUN0eC5maWxsUmVjdChzdGFydEJhdHRsZUJ1dHRvblgsIHN0YXJ0QmF0dGxlQnV0dG9uWSwgc3RhcnRCYXR0bGVCdXR0b25XaWR0aCwgc3RhcnRCYXR0bGVCdXR0b25IZWlnaHQpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc2hvd1RleHQgPSAoKSA9PiB7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyMwMDAnO1xyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMzJweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxUZXh0KCdTdGFydCBCYXR0bGUnLCBzdGFydEJhdHRsZVRleHRYLCBzdGFydEJhdHRsZVRleHRZKTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIG9uQ2hvb3NlQmF0dGxlU2V0dGluZ3MsXHJcbiAgb25DaG9vc2VJbmZvLFxyXG4gIG9uQ2hvb3NlVW5pdEluZm9cclxufSBmcm9tICcuL2Nob29zZSc7XHJcbmltcG9ydCB7XHJcbiAgZGlzcGxheUluZm9cclxufSBmcm9tICcuL2Rpc3BsYXknO1xyXG5pbXBvcnQge1xyXG4gIGJhdHRsZVNldHRpbmdTd2l0Y2hlcixcclxuICBzaG93U3dpdGhlcixcclxuICB1bml0SW5mb1N3aXRjaGVyXHJcbn0gZnJvbSAnLi9zd2l0Y2hlcic7XHJcblxyXG5leHBvcnQge1xyXG4gIG9uQ2hvb3NlQmF0dGxlU2V0dGluZ3MsXHJcbiAgb25DaG9vc2VJbmZvLFxyXG4gIG9uQ2hvb3NlVW5pdEluZm8sXHJcbiAgZGlzcGxheUluZm8sXHJcbiAgYmF0dGxlU2V0dGluZ1N3aXRjaGVyLFxyXG4gIHNob3dTd2l0aGVyLFxyXG4gIHVuaXRJbmZvU3dpdGNoZXJcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIG9uQ2hvb3NlQmF0dGxlU2V0dGluZ3NcclxufSBmcm9tICcuL2JhdHRsZVNldHRpbmdzJztcclxuaW1wb3J0IHtcclxuICBvbkNob29zZUluZm9cclxufSBmcm9tICcuL2luZm8nO1xyXG5pbXBvcnQge1xyXG4gIG9uQ2hvb3NlVW5pdEluZm9cclxufSBmcm9tICcuL3VuaXRJbmZvJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgb25DaG9vc2VCYXR0bGVTZXR0aW5ncyxcclxuICBvbkNob29zZUluZm8sXHJcbiAgb25DaG9vc2VVbml0SW5mb1xyXG59XHJcbiIsImltcG9ydCB7b25DaG9vc2VCYXR0bGVTZXR0aW5nc30gZnJvbSAnLi9iYXR0bGVTZXR0aW5ncyc7XHJcbmltcG9ydCB7XHJcbiAgY2hhbmdlQmF0dGxlU2V0dGluZ3NUb1RydWUsXHJcbiAgY2hhbmdlVW5pdEluZm9Ub1RydWVcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9jb25maWcvbWFpbk1lbnUnO1xyXG5pbXBvcnQge29uQ2hvb3NlVW5pdEluZm99IGZyb20gJy4vdW5pdEluZm8nO1xyXG5pbXBvcnQge2Rpc3BsYXlJbmZvfSBmcm9tICcuLi9kaXNwbGF5JztcclxuXHJcbmV4cG9ydCBjb25zdCBvbkNob29zZUluZm8gPSAoeDpudW1iZXIsIHk6bnVtYmVyKSA9PiB7XHJcbiAgaWYob25DaG9vc2VCYXR0bGVTZXR0aW5ncyh4LHkpKSB7XHJcbiAgICBjaGFuZ2VCYXR0bGVTZXR0aW5nc1RvVHJ1ZSgpO1xyXG4gICAgZGlzcGxheUluZm8oKTsgLy8gcmVkcmF3IGluZm9cclxuICB9XHJcbiAgaWYob25DaG9vc2VVbml0SW5mbyh4LHkpKSB7XHJcbiAgICBjaGFuZ2VVbml0SW5mb1RvVHJ1ZSgpO1xyXG4gICAgZGlzcGxheUluZm8oKTsgLy8gcmVkcmF3IGluZm9cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHtcclxuICBtYWluTWVudUN0eFxyXG59IGZyb20gJy4uLy4uLy4uLy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuaW1wb3J0IHtcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgdW5pdFJvc3RlcldpZHRoLFxyXG4gIHRpdGxlSGVpZ2h0LFxyXG4gIGluZm9MYXlvdXRXaWR0aCxcclxuICBpbmZvTGF5b3V0SGVpZ2h0XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtzaG93U3dpdGhlcn0gZnJvbSAnLi4vc3dpdGNoZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BsYXlJbmZvID0gKCkgPT4ge1xyXG4gIG1haW5NZW51Q3R4LmNsZWFyUmVjdChhcm15TGF5b3V0V2lkdGggKyB1bml0Um9zdGVyV2lkdGgsIHRpdGxlSGVpZ2h0LCBpbmZvTGF5b3V0V2lkdGgsIGluZm9MYXlvdXRIZWlnaHQpO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxTdHlsZSA9ICcjY2RkMWQ2JztcclxuICBtYWluTWVudUN0eC5maWxsUmVjdChhcm15TGF5b3V0V2lkdGggKyB1bml0Um9zdGVyV2lkdGgsIHRpdGxlSGVpZ2h0LCBpbmZvTGF5b3V0V2lkdGgsIGluZm9MYXlvdXRIZWlnaHQpO1xyXG4gIHNob3dTd2l0aGVyKCk7XHJcbn1cclxuIiwiaW1wb3J0IHtiYXR0bGVTZXR0aW5nU3dpdGNoZXJ9IGZyb20gJy4vYmF0dGxlU2V0dGluZ1N3aXRjaGVyJztcclxuaW1wb3J0IHt1bml0SW5mb1N3aXRjaGVyfSBmcm9tICcuL3VuaXRJbmZvU3dpdGNoZXInO1xyXG5pbXBvcnQge3VuaXRJbmZvfSBmcm9tICcuLi8uLi91bml0SW5mbyc7XHJcbmltcG9ydCB7XHJcbiAgc2hvd0JhdHRsZVNldHRpbmdzXHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3Nob3cvc2hvd0luZm8nO1xyXG5pbXBvcnQge3Nob3dUb3RhbEdvbGR9IGZyb20gJy4uLy4uL2JhdHRsZUluZm8vdG90YWxHb2xkJztcclxuXHJcbmV4cG9ydCBjb25zdCBzaG93U3dpdGhlciA9ICgpID0+IHtcclxuICBiYXR0bGVTZXR0aW5nU3dpdGNoZXIoKTtcclxuICB1bml0SW5mb1N3aXRjaGVyKCk7XHJcbiAgaWYoc2hvd0JhdHRsZVNldHRpbmdzKSB7XHJcbiAgICBzaG93VG90YWxHb2xkKCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHVuaXRJbmZvKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgdW5pdEluZm8sXHJcbiAgZGlzcGxheVVuaXRJbmZvXHJcbn0gZnJvbSAnLi91bml0SW5mbyc7XHJcblxyXG5leHBvcnQge1xyXG4gIHVuaXRJbmZvLFxyXG4gIGRpc3BsYXlVbml0SW5mb1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgbWFpbk1lbnVDdHhcclxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgcHJvcGVydHlTdGFydFgsXHJcbiAgcHJvcGVydHlTdGFydFksXHJcbiAgdmFsdWVTdGFydFgsXHJcbiAgdmFsdWVTdGFydFlcclxufSBmcm9tICcuLi9pbmZvU2V0dGluZ3MvaW5mb1NldHRpbmdzJztcclxuaW1wb3J0IHtcclxuICBjaGFuZ2VZLFxyXG4gIHNldERlZmF1bHRcclxufSBmcm9tICcuLi9pbmZvU2V0dGluZ3MvaW5mb1NldHRpbmdzJztcclxuaW1wb3J0IHtcclxuICBhcm15TGF5b3V0V2lkdGgsXHJcbiAgdW5pdFJvc3RlcldpZHRoLFxyXG4gIHRpdGxlSGVpZ2h0XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtob3ZlcmVkVW5pdH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3VuaXQvaG92ZXJlZFVuaXQnO1xyXG5pbXBvcnQge2Rpc3BsYXlUaXRsZX0gZnJvbSAnLi4vdGl0bGUnO1xyXG5cclxuY29uc3QgcHJvcGVydHlMaXN0ID0gW1xyXG4gICduYW1lJywgJ2Nvc3QnLCAndHlwZScsICdoZWFsdGgnLCAnc3BlZWQnLCAnYXJtb3VyJywgJ3JhbmdlJyxcclxuICAnbW9iaWxpdHknLCAnbWVsZWVEYW1hZ2UnLCAnbWlzc2lsZURhbWFnZScsICdjaGFyZ2UnLCAndmlzaWJpbGl0eSdcclxuXVxyXG5cclxuZXhwb3J0IGNvbnN0IHVuaXRJbmZvID0gKCkgPT4ge1xyXG4gIGRpc3BsYXlUaXRsZSgpO1xyXG4gIGRpc3BsYXlVbml0SW5mbyhob3ZlcmVkVW5pdCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5VW5pdEluZm8gPSAodW5pdDphbnkpID0+IHtcclxuICBzZXREZWZhdWx0KCk7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyMwMDAnO1xyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMjRweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gIGlmKGhvdmVyZWRVbml0KSB7XHJcbiAgICBmb3IobGV0IHByb3BlcnR5IG9mIHByb3BlcnR5TGlzdCkge1xyXG4gICAgICBtYWluTWVudUN0eC5maWxsVGV4dChwcm9wZXJ0eSwgcHJvcGVydHlTdGFydFgsIHByb3BlcnR5U3RhcnRZKTtcclxuICAgICAgbWFpbk1lbnVDdHguZmlsbFRleHQodW5pdFtwcm9wZXJ0eV0sIHZhbHVlU3RhcnRYLCB2YWx1ZVN0YXJ0WSk7XHJcbiAgICAgIGNoYW5nZVkoKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgICBtYWluTWVudUN0eC5maWxsVGV4dCgnTm8gdW5pdCBzZWxlY3RlZCcsIHByb3BlcnR5U3RhcnRYLCBwcm9wZXJ0eVN0YXJ0WSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZGlzcGxheVRpdGxlXHJcbn0gZnJvbSAnLi9kaXNwbGF5VGl0bGUnO1xyXG5cclxuZXhwb3J0IHtcclxuICBkaXNwbGF5VGl0bGVcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIG1haW5NZW51Q3R4LFxyXG4gIGRyYWdBbmREcm9wQ2FudmFzQ3R4XHJcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uZmlnL2NvbnRleHQnO1xyXG5pbXBvcnQge1xyXG4gIHVuaXRJbmZvVGl0bGVYLFxyXG4gIHVuaXRJbmZvVGl0bGVZXHJcbn0gZnJvbSAnLi4vaW5mb1NldHRpbmdzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5VGl0bGUgPSAoKSA9PiB7XHJcbiAgbWFpbk1lbnVDdHguZmlsbFN0eWxlID0gJyMwMDAnO1xyXG4gIG1haW5NZW51Q3R4LmZvbnQgPSAnMjRweCBzZXJpZic7XHJcbiAgbWFpbk1lbnVDdHgudGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gIG1haW5NZW51Q3R4LmZpbGxUZXh0KCdVbml0IEluZm86JywgdW5pdEluZm9UaXRsZVgsIHVuaXRJbmZvVGl0bGVZKTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRyYWdBbmREcm9wXHJcbn0gZnJvbSAnLi9tYWluJztcclxuXHJcbmV4cG9ydCB7XHJcbiAgZHJhZ0FuZERyb3BcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGRyYWdBbmREcm9wQ2FudmFzXHJcbn0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL2NhbnZhcyc7XHJcbmltcG9ydCB7XHJcbiAgZHJhZ0FuZERyb3BDYW52YXNDdHhcclxufSBmcm9tICcuLi8uLi8uLi9jb25maWcvY29udGV4dCc7XHJcbmltcG9ydCB7XHJcbiAgZGVjcmVhc2VTcGVudEdvbGQsXHJcbiAgaW5jcmVhc2VTcGVudEdvbGQsXHJcbiAgY2hhbmdlVW5pdEluZm9Ub1RydWUsXHJcbiAgY2hhbmdlSG92ZXJlZFVuaXQsXHJcbiAgc2hvd1VuaXRJbmZvLFxyXG4gIGhvdmVyZWRVbml0XHJcbn0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL21haW5NZW51JztcclxuaW1wb3J0IHtzdGFydEJhdHRsZUF2YWlsYWJsZX0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL21haW5NZW51L3N0YXJ0QmF0dGxlL3N0YXJ0QmF0dGxlQXZhaWxhYmxlJztcclxuaW1wb3J0IHtcclxuICBhZGRVbml0VG9Bcm15LFxyXG4gIHJlbW92ZVVuaXRGcm9tQXJteVxyXG59IGZyb20gJy4uLy4uLy4uL3N0b3JlL3Jvc3Rlci9hcm15JztcclxuaW1wb3J0IHtyb3N0ZXJ9IGZyb20gJy4uLy4uLy4uL3N0b3JlL3Jvc3Rlci9yb3N0ZXInO1xyXG5pbXBvcnQge3NlbGVjdFVuaXRJblJvc3Rlcn0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvcm9zdGVyL3NlbGVjdGVkVW5pdCc7XHJcbmltcG9ydCB7c2VsZWN0ZWRVbml0SW5Sb3N0ZXJ9IGZyb20gJy4uLy4uLy4uL3N0b3JlL3Jvc3Rlci9zZWxlY3RlZFVuaXQnO1xyXG5pbXBvcnQge1xyXG4gIHJvc3RlckltZ1dpZHRoLFxyXG4gIHJvc3RlckltZ0hlaWdodFxyXG59IGZyb20gJy4uL2xheW91dHMvcm9zdGVyTGF5b3V0L3Jvc3RlclNldHRpbmdzJztcclxuaW1wb3J0IHtpc1VuaXRTZWxlY3RlZEluUm9zdGVyfSBmcm9tICcuLi9sYXlvdXRzL3Jvc3RlckxheW91dC91bml0L2lzVW5pdFNlbGVjdGVkSW5Sb3N0ZXInO1xyXG5pbXBvcnQge2xvYWRJbWFnZX0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnXHJcbmltcG9ydCB7TUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUfSBmcm9tICcuLi8uLi8uLi9jb25maWcnO1xyXG5pbXBvcnQge1xyXG4gIG9uQ2hvb3NlUGxheWVyLFxyXG4gIG9uQ2hvb3NlQ29tcHV0ZXIsXHJcbiAgZGlzcGxheVRpdGxlXHJcbn0gZnJvbSAnLi4vbGF5b3V0cy91cHBlckxheW91dCc7XHJcbmltcG9ydCB7XHJcbiAgb25DaG9vc2VVbml0SW5Bcm15LFxyXG4gIGFybXlJbWdXaWR0aCxcclxuICBhcm15SW1nSGVpZ2h0LFxyXG4gIGRpc3BsYXlDaG9zZW5Vbml0cyxcclxufSBmcm9tICcuLi9sYXlvdXRzL2FybXlMYXlvdXQnO1xyXG5pbXBvcnQge2lzVW5pdFNob3VsZEJlUmVtb3ZlZH0gZnJvbSAnLi4vbGF5b3V0cy9hcm15TGF5b3V0L3JlbW92ZS9yZW1vdmVVbml0JztcclxuaW1wb3J0IHtlbXB0eUJveH0gZnJvbSAnLi4vbGF5b3V0cy9hcm15TGF5b3V0L2FybXkvZGlzcGxheUFybXknXHJcbmltcG9ydCB7XHJcbiAgb25DaG9vc2VJbmZvLFxyXG4gIGRpc3BsYXlJbmZvXHJcbn0gZnJvbSAnLi4vbGF5b3V0cy9pbmZvTGF5b3V0JztcclxuaW1wb3J0IHtjaGFuZ2VUb3RhbEdvbGR9IGZyb20gJy4uL2xheW91dHMvaW5mb0xheW91dCc7XHJcbmltcG9ydCB7XHJcbiAgaXNTdGFydEJhdHRsZUF2YWlsYWJsZSxcclxuICBpc1N0YXJ0QmF0dGxlQnV0dG9uU2VsZWN0ZWRcclxufSBmcm9tICcuLi9sYXlvdXRzL2JvdHRvbUxheW91dC9idXR0b24nO1xyXG5pbXBvcnQge2FjdGl2YXRlQmF0dGxlTW9kZX0gZnJvbSAnLi4vLi4vLi4vbGF1bmNoJztcclxuXHJcbmV4cG9ydCBjb25zdCBkcmFnQW5kRHJvcCA9ICgpID0+IHtcclxuICBkcmFnQW5kRHJvcENhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlOmFueSkgPT4ge1xyXG4gICAgbGV0IHggPSBlLm9mZnNldFg7IC8vIGdldCBYXHJcbiAgICBsZXQgeSA9IGUub2Zmc2V0WTsgLy8gZ2V0IFlcclxuICAgIGNoYW5nZVRvdGFsR29sZCh4LHkpOyAvLyB0ZXN0XHJcbiAgICBvbkNob29zZUluZm8oeCx5KTtcclxuICAgIG9uQ2hvb3NlUGxheWVyKHgsIHkpO1xyXG4gICAgb25DaG9vc2VDb21wdXRlcih4LCB5KTtcclxuICAgIGlmKGlzVW5pdFNob3VsZEJlUmVtb3ZlZCh4LHkpKSB7XHJcbiAgICAgIGxldCB1bml0ID0gaXNVbml0U2hvdWxkQmVSZW1vdmVkKHgsIHkpO1xyXG4gICAgICBkZWNyZWFzZVNwZW50R29sZCh1bml0LmNvc3QpO1xyXG4gICAgICByZW1vdmVVbml0RnJvbUFybXkodW5pdCk7XHJcbiAgICAgIGRpc3BsYXlDaG9zZW5Vbml0cygpO1xyXG4gICAgICBkaXNwbGF5VGl0bGUoKTsgLy8gcmVkcmF3IHRvdGFsR29sZCBpbiB0aXRsZVxyXG4gICAgICBkcmFnQW5kRHJvcENhbnZhc0N0eC5jbGVhclJlY3QoMCwwLCBNQVBfV0lEVEgsIENBTlZBU19IRUlHSFQpO1xyXG4gICAgICBpc1N0YXJ0QmF0dGxlQXZhaWxhYmxlKCk7XHJcbiAgICB9XHJcbiAgICBpZihzdGFydEJhdHRsZUF2YWlsYWJsZSAmJiBpc1N0YXJ0QmF0dGxlQnV0dG9uU2VsZWN0ZWQoeCx5KSkge1xyXG4gICAgICBhY3RpdmF0ZUJhdHRsZU1vZGUoKTtcclxuICAgIH1cclxuICAgIGlmKHNlbGVjdGVkVW5pdEluUm9zdGVyKSB7IC8vIGFkZCB1bml0IHRvIHJvc3RlclxyXG4gICAgICBpZihpc1VuaXRBZGRlZFRvQXJteSh4LHkpKSB7IC8vIGRyYXcgdW5pdCBpbiBhcm15IGxpc3RcclxuICAgICAgICBsZXQgdW5pdCA9IGlzVW5pdEFkZGVkVG9Bcm15KHgseSk7XHJcbiAgICAgICAgYWRkVW5pdFRvQXJteSh1bml0KTtcclxuICAgICAgICBkaXNwbGF5Q2hvc2VuVW5pdHMoKTtcclxuICAgICAgICBpbmNyZWFzZVNwZW50R29sZCh1bml0LmNvc3QpO1xyXG4gICAgICAgIGRpc3BsYXlUaXRsZSgpOyAvLyByZWRyYXcgdG90YWxHb2xkIGluIHRpdGxlXHJcbiAgICAgICAgZHJhZ0FuZERyb3BDYW52YXNDdHguY2xlYXJSZWN0KDAsIDAsIE1BUF9XSURUSCwgQ0FOVkFTX0hFSUdIVCk7IC8vIGNsZWFyIGNhbnZhc1xyXG4gICAgICAgIGlzU3RhcnRCYXR0bGVBdmFpbGFibGUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkaXNwbGF5Q2hvc2VuVW5pdHMoKTtcclxuICAgICAgICBkcmFnQW5kRHJvcENhbnZhc0N0eC5jbGVhclJlY3QoMCwgMCwgTUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUKTsgLy8gY2xlYXIgY2FudmFzXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2hvb3NlUm9zdGVyKHgsIHkpO1xyXG4gIH0pO1xyXG5cclxuICBkcmFnQW5kRHJvcENhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZTphbnkpID0+IHtcclxuICAgIGxldCB4ID0gZS5vZmZzZXRYOyAvLyBnZXQgWFxyXG4gICAgbGV0IHkgPSBlLm9mZnNldFk7IC8vIGdldCBZXHJcbiAgICBvbkRyYWdVbml0KHgsIHkpO1xyXG4gICAgb25DaG9vc2VVbml0SW5Bcm15KHgseSk7XHJcbiAgICBpZihpc1VuaXRTZWxlY3RlZEluUm9zdGVyKHgseSkpIHsgLy8gcGxheWVyIGhvdmVyIHVuaXQgaW4gcm9zdGVyXHJcbiAgICAgIGxldCB1bml0ID0gaXNVbml0U2VsZWN0ZWRJblJvc3Rlcih4LHkpO1xyXG4gICAgICBpZihob3ZlcmVkVW5pdCkge1xyXG4gICAgICAgIGlmKHVuaXQueCAhPT0gaG92ZXJlZFVuaXQueCAmJiB1bml0LnkgIT09IGhvdmVyZWRVbml0KSB7XHJcbiAgICAgICAgICBjaGFuZ2VIb3ZlcmVkVW5pdCh1bml0KTtcclxuICAgICAgICAgIGRpc3BsYXlJbmZvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNoYW5nZUhvdmVyZWRVbml0KHVuaXQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKCFzaG93VW5pdEluZm8pIHtcclxuICAgICAgICBjaGFuZ2VVbml0SW5mb1RvVHJ1ZSgpOyAvLyBzaG93IHVuaXQgaW5mb1xyXG4gICAgICAgIGRpc3BsYXlJbmZvKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGxldCBvbkNob29zZVJvc3RlciA9IChtb3VzZVg6bnVtYmVyLCBtb3VzZVk6bnVtYmVyKSA9PiB7XHJcbiAgbGV0IHNlbGVjdGVkVW5pdCA9IG51bGw7XHJcbiAgY29uc3Qgd2lkdGggPSByb3N0ZXJJbWdXaWR0aDtcclxuICBjb25zdCBoZWlnaHQgPSByb3N0ZXJJbWdIZWlnaHQ7XHJcbiAgZm9yKGxldCB1bml0IG9mIHJvc3Rlcikge1xyXG4gICAgbGV0IHggPSB1bml0Lng7XHJcbiAgICBsZXQgeSA9IHVuaXQueTtcclxuICAgIGlmKG1vdXNlWCA+PSB4ICYmIG1vdXNlWCA8IHggKyB3aWR0aCAmJiBtb3VzZVkgPj0geSAmJiBtb3VzZVkgPCB5ICsgaGVpZ2h0KSB7XHJcbiAgICAgIHNlbGVjdGVkVW5pdCA9IHVuaXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHNlbGVjdFVuaXRJblJvc3RlcihzZWxlY3RlZFVuaXQpO1xyXG4gIGNoYW5nZUhvdmVyZWRVbml0KHNlbGVjdGVkVW5pdCk7XHJcbiAgZGlzcGxheUluZm8oKTtcclxufVxyXG5cclxuZXhwb3J0IGxldCBvbkRyYWdVbml0ID0gKG1vdXNlWDpudW1iZXIsIG1vdXNlWTpudW1iZXIpID0+IHtcclxuICBpZihzZWxlY3RlZFVuaXRJblJvc3Rlcikge1xyXG4gICAgbGV0IHdpZHRoID0gcm9zdGVySW1nV2lkdGg7XHJcbiAgICBsZXQgaGVpZ2h0ID0gcm9zdGVySW1nSGVpZ2h0O1xyXG4gICAgbGV0IHggPSBtb3VzZVggLSAod2lkdGggLyAyKTtcclxuICAgIGxldCB5ID0gbW91c2VZIC0gKGhlaWdodCAvIDIpO1xyXG4gICAgbG9hZEltYWdlKHNlbGVjdGVkVW5pdEluUm9zdGVyLmltZ1NyYywgKGVycjphbnksIGltZzphbnkpID0+IHtcclxuICAgICAgZHJhZ0FuZERyb3BDYW52YXNDdHguY2xlYXJSZWN0KDAsIDAsIE1BUF9XSURUSCwgQ0FOVkFTX0hFSUdIVCk7XHJcbiAgICAgIGRyYWdBbmREcm9wQ2FudmFzQ3R4LmRyYXdJbWFnZShpbWcsIHgsIHksIHJvc3RlckltZ1dpZHRoLCByb3N0ZXJJbWdIZWlnaHQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gIHNob3cgaWYgcGFydGljdWxhciB1bml0IGhhcyBiZWVuIGFkZGVkIHRvIGFybXksXHJcbiAgcmV0dXJuIGJveCBpZiB1bml0IGhhcyBiZWVuIGRvd24gaW4gdGhhdCBib3gsXHJcbiAgaWYgbm8gYm94ZXMgY2hvc2VuIHJldHVybiBudWxsXHJcbiovXHJcbmV4cG9ydCBjb25zdCBpc1VuaXRBZGRlZFRvQXJteSA9IChtb3VzZVg6bnVtYmVyLCBtb3VzZVk6bnVtYmVyKTphbnkgPT4ge1xyXG4gIGNvbnN0IHdpZHRoID0gYXJteUltZ1dpZHRoO1xyXG4gIGNvbnN0IGhlaWdodCA9IGFybXlJbWdIZWlnaHQ7XHJcbiAgbGV0IHggPSBlbXB0eUJveC54O1xyXG4gIGxldCB5ID0gZW1wdHlCb3gueTtcclxuXHJcbiAgaWYoIWVtcHR5Qm94LmZpbGxlZCAmJiAobW91c2VYID49IHggJiYgbW91c2VYIDwgKHggKyB3aWR0aCkgJiYgbW91c2VZID49IHkgJiYgbW91c2VZIDwgKHkgKyBoZWlnaHQpKSkge1xyXG4gICAgcmV0dXJuIHNlbGVjdGVkVW5pdEluUm9zdGVyO1xyXG4gIH1cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGlzU3RhcnRCYXR0bGVBdmFpbGFibGUsXHJcbiAgaXNTdGFydEJhdHRsZUJ1dHRvblNlbGVjdGVkLFxyXG4gIHNob3dTdGFydEJhdHRsZUJ1dHRvbixcclxuICBzaG93VGV4dFxyXG59IGZyb20gJy4vYnV0dG9uJztcclxuaW1wb3J0IHtcclxuICBkcmF3Qm90dG9tTGF5b3V0LFxyXG4gIGZpbGxMYXlvdXRcclxufSBmcm9tICcuL2xheW91dCc7XHJcbmltcG9ydCB7XHJcbiAgc3RhcnRCYXR0bGVCdXR0b25YLFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uWSxcclxuICBzdGFydEJhdHRsZUJ1dHRvbldpZHRoLFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uSGVpZ2h0LFxyXG4gIHN0YXJ0QmF0dGxlVGV4dFgsXHJcbiAgc3RhcnRCYXR0bGVUZXh0WVxyXG59IGZyb20gJy4vYm90dG9tU2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IHtcclxuICBpc1N0YXJ0QmF0dGxlQXZhaWxhYmxlLFxyXG4gIGlzU3RhcnRCYXR0bGVCdXR0b25TZWxlY3RlZCxcclxuICBzaG93U3RhcnRCYXR0bGVCdXR0b24sXHJcbiAgc2hvd1RleHQsXHJcbiAgZHJhd0JvdHRvbUxheW91dCxcclxuICBmaWxsTGF5b3V0LFxyXG4gIHN0YXJ0QmF0dGxlQnV0dG9uWCxcclxuICBzdGFydEJhdHRsZUJ1dHRvblksXHJcbiAgc3RhcnRCYXR0bGVCdXR0b25XaWR0aCxcclxuICBzdGFydEJhdHRsZUJ1dHRvbkhlaWdodCxcclxuICBzdGFydEJhdHRsZVRleHRYLFxyXG4gIHN0YXJ0QmF0dGxlVGV4dFlcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIGFjdGl2YXRlQmF0dGxlTW9kZVxyXG59IGZyb20gJy4vYmF0dGxlTW9kZSc7XHJcbmltcG9ydCB7XHJcbiAgYWN0aXZhdGVNYWluTWVudU1vZGVcclxufSBmcm9tICcuL21haW5NZW51TW9kZSc7XHJcblxyXG5leHBvcnQge1xyXG4gIGFjdGl2YXRlQmF0dGxlTW9kZSxcclxuICBhY3RpdmF0ZU1haW5NZW51TW9kZVxyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgbWFpbk1lbnUsXHJcbiAgZHJhZ0FuZERyb3BDYW52YXNcclxufSBmcm9tICcuLi8uLi9jb25maWcvY2FudmFzJztcclxuaW1wb3J0IHtcclxuICBjYW52YXMsXHJcbiAgYXV4aWxpYXJ5Q2FudmFzLFxyXG4gIGJhY2tncm91bmRDYW52YXMsXHJcbiAgdGVycmFpblxyXG59IGZyb20gJy4uLy4uL2NvbmZpZy9jYW52YXMnO1xyXG5pbXBvcnQgeyBzZXRCYXR0bGVNb2RlIH0gZnJvbSAnLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgbGF1bmNoR2FtZSB9IGZyb20gJy4uJztcclxuaW1wb3J0IHsgY2xlYXJNYWluTWVudSB9IGZyb20gJy4uLy4uL1VJL21haW5NZW51L3NldHRpbmdzL2NsZWFyTWFpbk1lbnUnO1xyXG5pbXBvcnQgeyBjcmVhdGVBcm15IH0gZnJvbSAnLi4vLi4vYmF0dGxlL3Jvc3Rlci9hcm15L2NyZWF0ZUFybXknO1xyXG5pbXBvcnQgeyBsb2FkVW5pdEljb25zIH0gZnJvbSAnLi4vLi4vc3RvcmUvaW1hZ2VzL3VuaXRJY29uSW1hZ2VzJztcclxuaW1wb3J0IHsgcGF0aENhbnZhcyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jYW52YXMvcGF0aCc7XHJcbmltcG9ydCB7IGV2ZW50Q2FudmFzIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NhbnZhcy9ldmVudCc7XHJcbmltcG9ydCB7IGxvYWRpbmdDYW52YXMgfSBmcm9tICcuLi8uLi9jb25maWcvY2FudmFzL2xvYWRpbmcnO1xyXG5pbXBvcnQgeyBkcmF3TG9hZGluZ0NhbnZhcyB9IGZyb20gJy4uL2xvYWRpbmcvZHJhd0xvYWRpbmdDYW52YXMnO1xyXG5pbXBvcnQgeyBmaWxsVW5pdFRvSWNvbk1hcCB9IGZyb20gJy4uLy4uL3N0b3JlL2ltYWdlcy91bml0VG9JY29uTWFwJztcclxuXHJcbmV4cG9ydCBjb25zdCBhY3RpdmF0ZUJhdHRsZU1vZGUgPSAoKSA9PiB7XHJcbiAgZHJhd0xvYWRpbmdDYW52YXMoKTtcclxuICBzZXRCYXR0bGVNb2RlKCkudGhlbigoKSA9PiB7XHJcbiAgICBjbGVhck1haW5NZW51KCk7XHJcbiAgICBmaWxsVW5pdFRvSWNvbk1hcCgpO1xyXG4gICAgY3JlYXRlQXJteSgpLnRoZW4oKCkgPT4gbG9hZFVuaXRJY29ucygpKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBkcmFnQW5kRHJvcENhbnZhcy5zdHlsZS56SW5kZXggPSAnMCc7XHJcbiAgICAgIG1haW5NZW51LnN0eWxlLnpJbmRleCA9ICcwJztcclxuICAgICAgYXV4aWxpYXJ5Q2FudmFzLnN0eWxlLnpJbmRleCA9ICc2JztcclxuICAgICAgZXZlbnRDYW52YXMuc3R5bGUuekluZGV4ID0gJzUnO1xyXG4gICAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gJzQnO1xyXG4gICAgICBwYXRoQ2FudmFzLnN0eWxlLnpJbmRleCA9ICczJztcclxuICAgICAgdGVycmFpbi5zdHlsZS56SW5kZXggPSAnMic7XHJcbiAgICAgIGJhY2tncm91bmRDYW52YXMuc3R5bGUuekluZGV4ID0gJzEnO1xyXG4gICAgICBsb2FkaW5nQ2FudmFzLnN0eWxlLnpJbmRleCA9ICcwJztcclxuICAgICAgbGF1bmNoR2FtZSgpXHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIE1BUF9XSURUSCxcclxuICBDQU5WQVNfSEVJR0hUXHJcbn0gZnJvbSAnLi4vLi4vLi4vY29uZmlnJztcclxuaW1wb3J0IHtcclxuICBkcmFnQW5kRHJvcENhbnZhc0N0eCxcclxuICBtYWluTWVudUN0eFxyXG59IGZyb20gJy4uLy4uLy4uL2NvbmZpZy9jb250ZXh0JztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgY2xlYXJNYWluTWVudSA9ICgpID0+IHtcclxuICBtYWluTWVudUN0eC5jbGVhclJlY3QoMCwgMCwgTUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUKTtcclxuICBkcmFnQW5kRHJvcENhbnZhc0N0eC5jbGVhclJlY3QoMCwgMCwgTUFQX1dJRFRILCBDQU5WQVNfSEVJR0hUKTtcclxufVxyXG4iLCJpbXBvcnQgeyBjcmVhdGVQbGF5ZXJBcm15IH0gZnJvbSBcIi4vcGxheWVyQXJteVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVDb21wdXRlckFybXkgfSBmcm9tIFwiLi9jb21wdXRlckFybXlcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVBcm15ID0gKCkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGNyZWF0ZVBsYXllckFybXkoKS50aGVuKCgpID0+IGNyZWF0ZUNvbXB1dGVyQXJteSgpKTtcclxuICAgIHJlc29sdmUoKTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBwbGF5ZXJBcm15IH0gZnJvbSAnLi4vLi4vLi4vc3RvcmUvcm9zdGVyL2FybXknO1xyXG5pbXBvcnQgeyBkZWxldGVOb2RlRnJvbVBsYXllck5vZGVzIH0gZnJvbSAnLi4nO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Ob2RlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbm9kZSc7XHJcbmltcG9ydCB7XHJcbiAgcGxheWVyVW5pdHNOb2RlcywgaW5pdGlhbGl6ZVBsYXllclVuaXRzTm9kZXNcclxufSBmcm9tICcuLi9ub2Rlcy9wbGF5ZXJOb2Rlcyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVuaXQgfSBmcm9tICcuLi8uLi8uLi91bml0JztcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVQbGF5ZXJBcm15ID0gKCkgPT4ge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGluaXRpYWxpemVQbGF5ZXJVbml0c05vZGVzKCkudGhlbihcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIGZvcihsZXQgdW5pdCBvZiBwbGF5ZXJBcm15KSB7XHJcbiAgICAgICAgICBsZXQgbm9kZSA9IGdldFJhbmRvbU5vZGUocGxheWVyVW5pdHNOb2Rlcyk7XHJcbiAgICAgICAgICBsZXQgdHlwZSA9IHVuaXQubmFtZTtcclxuICAgICAgICAgIGxldCB4ID0gbm9kZS54O1xyXG4gICAgICAgICAgbGV0IHkgPSBub2RlLnk7XHJcbiAgICAgICAgICBjcmVhdGVVbml0KHR5cGUsIHgsIHksICdwbGF5ZXInKTtcclxuICAgICAgICAgIGRlbGV0ZU5vZGVGcm9tUGxheWVyTm9kZXMobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfVxyXG4gICAgKVxyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgZGVsZXRlTm9kZUZyb21Db21wdXRlck5vZGVzXHJcbn0gZnJvbSAnLi9jb21wdXRlck5vZGVzJztcclxuaW1wb3J0IHtcclxuICBkZWxldGVOb2RlRnJvbVBsYXllck5vZGVzXHJcbn0gZnJvbSAnLi9wbGF5ZXJOb2Rlcyc7XHJcblxyXG5leHBvcnQge1xyXG4gIGRlbGV0ZU5vZGVGcm9tQ29tcHV0ZXJOb2RlcyxcclxuICBkZWxldGVOb2RlRnJvbVBsYXllck5vZGVzLFxyXG59XHJcbiIsImltcG9ydCB7IGNvbXB1dGVyQXJteSB9IGZyb20gJy4uLy4uLy4uL3N0b3JlL3Jvc3Rlci9hcm15JztcclxuaW1wb3J0IHsgZGVsZXRlTm9kZUZyb21Db21wdXRlck5vZGVzIH0gZnJvbSAnLi4nO1xyXG5pbXBvcnQgeyBnZXRSYW5kb21Ob2RlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbm9kZSc7XHJcbmltcG9ydCB7IGNvbXB1dGVyVW5pdHNOb2RlcywgaW5pdGlhbGl6ZUNvbXB1dGVyVW5pdHNOb2RlcyB9IGZyb20gJy4uL25vZGVzL2NvbXB1dGVyTm9kZXMnO1xyXG5pbXBvcnQgeyBjcmVhdGVVbml0IH0gZnJvbSAnLi4vLi4vLi4vdW5pdCc7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlQ29tcHV0ZXJBcm15ID0gKCkgPT4ge1xyXG4gIGluaXRpYWxpemVDb21wdXRlclVuaXRzTm9kZXMoKS50aGVuKFxyXG4gICAgKCkgPT4ge1xyXG4gICAgICBmb3IobGV0IHVuaXQgb2YgY29tcHV0ZXJBcm15KSB7XHJcbiAgICAgICAgbGV0IG5vZGUgPSBnZXRSYW5kb21Ob2RlKGNvbXB1dGVyVW5pdHNOb2Rlcyk7XHJcbiAgICAgICAgbGV0IHR5cGUgPSB1bml0Lm5hbWU7XHJcbiAgICAgICAgbGV0IHggPSBub2RlLng7XHJcbiAgICAgICAgbGV0IHkgPSBub2RlLnk7XHJcbiAgICAgICAgY3JlYXRlVW5pdCh0eXBlLCB4LCB5LCAnY29tcHV0ZXInKTtcclxuICAgICAgICBkZWxldGVOb2RlRnJvbUNvbXB1dGVyTm9kZXMobm9kZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICApO1xyXG59XHJcbiIsImltcG9ydCB7XHJcbiAgbWFpbk1lbnUsXHJcbiAgZHJhZ0FuZERyb3BDYW52YXNcclxufSBmcm9tICcuLi8uLi9jb25maWcvY2FudmFzJztcclxuaW1wb3J0IHsgY2xlYXJNYXAgfSBmcm9tICcuLi8uLi9tYXAnO1xyXG5pbXBvcnQge1xyXG4gIGNhbnZhcyxcclxuICBhdXhpbGlhcnlDYW52YXMsXHJcbiAgYmFja2dyb3VuZENhbnZhcyxcclxuICB0ZXJyYWluXHJcbn0gZnJvbSAnLi4vLi4vY29uZmlnL2NhbnZhcyc7XHJcbmltcG9ydCB7IHNldE1haW5NZW51TW9kZSB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7IGxhdW5jaEdhbWUgfSBmcm9tICcuLic7XHJcbmltcG9ydCB7IGV2ZW50Q2FudmFzIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NhbnZhcy9ldmVudCc7XHJcbmltcG9ydCB7IHBhdGhDYW52YXMgfSBmcm9tICcuLi8uLi9jb25maWcvY2FudmFzL3BhdGgnO1xyXG5pbXBvcnQgeyBsb2FkaW5nQ2FudmFzIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NhbnZhcy9sb2FkaW5nJztcclxuXHJcbmV4cG9ydCBjb25zdCBhY3RpdmF0ZU1haW5NZW51TW9kZSA9ICgpID0+IHtcclxuICBkcmFnQW5kRHJvcENhbnZhcy5zdHlsZS56SW5kZXggPSAnNic7XHJcbiAgbWFpbk1lbnUuc3R5bGUuekluZGV4ID0gJzUnO1xyXG4gIGF1eGlsaWFyeUNhbnZhcy5zdHlsZS56SW5kZXggPSAnNCc7XHJcbiAgY2FudmFzLnN0eWxlLnpJbmRleCA9ICczJztcclxuICB0ZXJyYWluLnN0eWxlLnpJbmRleCA9ICcyJ1xyXG4gIGV2ZW50Q2FudmFzLnN0eWxlLnpJbmRleCA9ICcxJztcclxuICBwYXRoQ2FudmFzLnN0eWxlLnpJbmRleCA9ICcxJztcclxuICBiYWNrZ3JvdW5kQ2FudmFzLnN0eWxlLnpJbmRleCA9ICcxJztcclxuICBsb2FkaW5nQ2FudmFzLnN0eWxlLnpJbmRleCA9ICcxJztcclxuICBjbGVhck1hcCgpO1xyXG4gIHNldE1haW5NZW51TW9kZSgpO1xyXG4gIGxhdW5jaEdhbWUoKTtcclxufVxyXG4iLCJpbXBvcnQgeyBzd29yZEljb25JbWFnZSwgc3BlYXJJY29uSW1hZ2UsIHNwZWFyQW5kU2hpZWxkSWNvbkltYWdlIH0gZnJvbSBcIi4vdW5pdEljb25JbWFnZXNcIjtcclxuXHJcbmV4cG9ydCBsZXQgdW5pdFRvSWNvbk1hcDphbnk7XHJcblxyXG5leHBvcnQgY29uc3QgZmlsbFVuaXRUb0ljb25NYXAgPSAoKSA9PiB7XHJcbiAgICB1bml0VG9JY29uTWFwID0ge1xyXG4gICAgICAgICdBcmNoZXJzJzogc3dvcmRJY29uSW1hZ2UsXHJcbiAgICAgICAgJ0hlYXZ5Q2F2YWxyeSc6IHN3b3JkSWNvbkltYWdlLFxyXG4gICAgICAgICdIb3BsaXRlcyc6IHNwZWFyQW5kU2hpZWxkSWNvbkltYWdlLFxyXG4gICAgICAgICdMaWdodENhdmFscnknOiBzd29yZEljb25JbWFnZSxcclxuICAgICAgICAnTGlnaHRJbmZhbnRyeSc6IHN3b3JkSWNvbkltYWdlLFxyXG4gICAgICAgICdIZWF2eUluZmFudHJ5Jzogc3dvcmRJY29uSW1hZ2UsXHJcbiAgICAgICAgJ01pbGl0aWEnOiBzd29yZEljb25JbWFnZSxcclxuICAgICAgICAnUGVsdGFzdHMnOiBzd29yZEljb25JbWFnZSxcclxuICAgICAgICAnUGlrZW1lbic6IHNwZWFySWNvbkltYWdlLFxyXG4gICAgICAgICdTY291dHMnOiBzd29yZEljb25JbWFnZVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==